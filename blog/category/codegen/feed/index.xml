
<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>CodeGen Archives - APIMatic</title>
	<atom:link href="/blog/category/codegen/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>APIMatic is an API documentation tool that provides a complete set of DX components such as autogenerated SDKs, API portal, API docs, live code samples, and more.</description>
	<lastBuildDate>Sun, 24 Apr 2022 01:19:18 +0000</lastBuildDate>
	<language>en</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.9.3</generator>

<image>
	<url>/wp-content/uploads/2021/10/cropped-cropped-apimaticio-favicon-1-32x32.png</url>
	<title>CodeGen Archives - APIMatic</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>How to Integrate Java SDKs into Android Applications?</title>
		<link>/blog/2022/03/how-to-integrate-java-sdks-into-android-applications/</link>
		
		<dc:creator><![CDATA[Muhammad Sufyan]]></dc:creator>
		<pubDate>Fri, 18 Mar 2022 14:28:54 +0000</pubDate>
				<category><![CDATA[APIMATIC]]></category>
		<category><![CDATA[CodeGen]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[Android App]]></category>
		<category><![CDATA[android application]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[auto-generated SDKs]]></category>
		<category><![CDATA[Java SDK]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1803</guid>

					<description><![CDATA[<p>Your mobile/Android application can talk to any API with the low-code approach through client SDKs. Client SDKs are independent internal libraries for your application that focus on the end-to-end flow for an API. They cut down the manual process of writing a whole client and related components, providing you with the best developer experience, and [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/2022/03/how-to-integrate-java-sdks-into-android-applications/">How to Integrate Java SDKs into Android Applications?</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class=""><img class="aligncenter wp-image-1816 " src="/wp-content/uploads/2022/04/Integrate-Java-SDKs-into-Android-02-1024x498.png" alt="" width="729" height="355"></p>
<p class=""><span style="font-weight: 400;">Your mobile/Android application can talk to any API with the low-code approach through client SDKs. </span><span style="font-weight: 400;">Client SDKs are independent internal libraries for your application that focus on the end-to-end flow for an API.</span><span style="font-weight: 400;"> They cut down the manual process of writing a whole client and related components, </span><span style="font-weight: 400;">providing you with the best developer experience, and increasing API adoption</span><span style="font-weight: 400;">. You just have to import an auto-generated end-to-end SDK and focus on the core business logic in your application.</span></p>
<p><a href="https://apimatic.io/"><span style="font-weight: 400;">APIMatic</span></a> <span style="font-weight: 400;">is a developer experience platform that provides automatic code generation for API specifications, in multiple popular languages. In this blog, we will be discussing how to integrate Java SDKs into Android applications.</span></p>
<h2 class=""><span style="font-weight: 400;">Why Java Libraries Instead of Android Native Libraries?</span></h2>
<p class=""><span style="font-weight: 400;">An AAR (i.e. Android ARchive) file can be included in the build process of an Android application similar to a JAR (i.e. Java ARchive) file. Both can serve the same purpose but the main difference between a JAR and an AAR is that AARs can include resources such as layouts, drawables, and more.</span></p>
<p class=""><span style="font-weight: 400;">For an API client SDK, you don&#8217;t need Android components and resources, but some classes, making the library lightweight that developers can quickly interact with to call your APIs, making a JAR library a better option than AAR.</span></p>
<p class=""><span style="font-weight: 400;">Another advantage of using Java libraries is that JAR can be used for IDEs like eclipse and Android Studio without any complicated steps. Also, JAR, in contrast to AAR, can be used with any Java application which makes it technology-independent in terms of Java-specific applications like web, desktop, and Android apps.</span></p>
<h2><span style="font-weight: 400;">Inside the Java SDK</span></h2>
<p class=""><span style="font-weight: 400;">APIMatic SDKs adhere to the best </span><a href="https://docs.apimatic.io/generate-sdks/sdk-coding-standards/"><span style="font-weight: 400;">coding practices and standards</span></a><span style="font-weight: 400;">&nbsp;and support the latest dependencies and versions for full coverage. The Java SDK uses Maven as its project management tool which allows it to adjust itself in the Maven ecosystem.&nbsp;</span></p>
<p class=""><span style="font-weight: 400;">In an Android application, the Gradle build system makes it easier to include external binaries and other library modules to your build as dependencies. </span><span style="font-weight: 400;">These dependencies can be located on your machine or in a remote repository, and any transitive dependencies declared are automatically included as well.</span><span style="font-weight: 400;"><br />
</span></p>
<p class=""><span style="font-weight: 400;">Having Gradle support of adding Maven dependencies directly makes it easier for developers to include Maven projects like an APIMatic SDK as a dependency. This enables you to consume Maven libraries for any application built on top of Java or Kotlin languages. APIMatic Java SDKs have this ability and allow you to accomplish what you need with some clicks.</span></p>
<p class=""><span style="font-weight: 400;">In this blog, we will use our public </span><a href="https://github.com/apimatic/calculator-sdk"><span style="font-weight: 400;">Calculator SDK</span></a><span style="font-weight: 400;"> as an example to demonstrate how to integrate Java SDKs into Android applications. The Calculator SDK contains simple operations like addition, multiplication, subtraction, division, and a README file that walks you through the setup installation and highlights the documentation of the modules involved.</span><span style="font-weight: 400;"><br />
</span><span style="font-weight: 400;"><br />
</span><span style="font-weight: 400;">The published Java SDK has the following Maven identifiers:</span></p>
<pre class=""><code class="language-xml">Group-id: io.github.apimatic
Artifact-id: sample-calculator-sdk
Version: 1.0.0
</code></pre>
<h2 class=""><span style="font-weight: 400;">How to Integrate Java SDKs into Android Applications?</span></h2>
<p class=""><span style="font-weight: 400;">There are two ways to integrate Java SDKs into Android applications:</span></p>
<ul class="">
<li style="font-weight: 400;"><span style="font-weight: 400;">Declare the dependency directly using groupId, artifact, and version</span></li>
<li style="font-weight: 400;"><span style="font-weight: 400;">Utilize the GUI tool provided by Android Studio</span></li>
</ul>
<p>&nbsp;</p>
<p class=""><span style="font-weight: 400;">The source of the artifact could be one of the following:</span></p>
<ul class="">
<li style="font-weight: 400;"><span style="font-weight: 400;">A Remote Artifact (Gradle will resolve the artifact from Maven central repository)</span></li>
<li style="font-weight: 400;"><span style="font-weight: 400;">A Local Artifact (Gradle will resolve the artifact from the local Maven repository)</span><span style="font-weight: 400;"><br />
</span></li>
</ul>
<h3><span style="font-weight: 400;">Import Remote Dependency</span></h3>
<p><span style="font-weight: 400;">Note: A prerequisite to import the remote dependency is that the Java SDK should already be published on the Maven repository. In our case, the calculator SDK is published on Maven Central under the group id </span><a href="https://search.maven.org/search?q=g:io.github.apimatic"><span style="font-weight: 400;">io.github.apimatic</span></a><span style="font-weight: 400;">.</span></p>
<h3 class=""><span style="font-weight: 400;">Option 1: Add Dependency Using Android Studio</span></h3>
<p class=""><span style="font-weight: 400;">Follow these steps to include the dependency:</span></p>
<ol class="">
<li style="font-weight: 400;"><span style="font-weight: 400;">In the Android project structure, select </span><b>Dependencies </b><span style="font-weight: 400;">from the left navigation section. Select the target module and click on </span><b>Library Dependency </b><span style="font-weight: 400;">as shown: <img class=" wp-image-1806 aligncenter" src="/wp-content/uploads/2022/04/image3.png" alt="" width="657" height="344"></span></li>
<li style="font-weight: 400;"><span style="font-weight: 400;">In the subsequent dialog box, search for the group id </span><b>io.github.apimatic</b><span style="font-weight: 400;">. Configure your dependency if required (labeled 2) and click </span><b>OK</b><span style="font-weight: 400;">.<img class=" wp-image-1804 aligncenter" src="/wp-content/uploads/2022/04/image1.jpg" alt="" width="659" height="470"></span></li>
<li><span style="font-weight: 400;">As the last step, click on </span><b>Apply</b><span style="font-weight: 400;"> and </span><b>OK</b><span style="font-weight: 400;">. Gradle will start syncing.</span></li>
</ol>
<h3 class=""><span style="font-weight: 400;">Option 2: Adding the Dependency Directly&nbsp;</span></h3>
<p class=""><span style="font-weight: 400;">You can also add the dependency directly in the respective module’s </span><b>build.gradle</b><span style="font-weight: 400;"> file. This can be achieved by setting a lookup configuration for Maven Central in Dependency Resolution Management through the root level build file, i.e. build.gradle, shown below:</span></p>
<pre class=""><code class="language-xml">buildscript {
    ...
    repositories {
        ...
        MavenCentral()
        ...
    }
    ...
}
</code></pre>
<p class=""><span style="font-weight: 400;">Add the artifact information like </span><b>groupId</b><span style="font-weight: 400;">, </span><b>artifactId</b><span style="font-weight: 400;">, and </span><b>version </b><span style="font-weight: 400;">in the </span><b>dependencies </b><span style="font-weight: 400;">section of the respective module, for example:</span><span style="font-weight: 400;"><br />
</span></p>
<pre class=""><code class="language-xml">dependencies {
    ...
    implementation &#039;io.github.apimatic:sample-calculator-sdk:1.0.0&#039;
    ...
}</code></pre>
<p><span style="font-weight: 400;">Follow the proper format for Maven Central as prescribed in </span><a href="https://docs.gradle.org/current/userguide/declaring_dependencies.html"><span style="font-weight: 400;">Gradle official documentation</span></a><span style="font-weight: 400;">. Read more on </span><a href="https://docs.gradle.org/current/userguide/single_versions.html"><span style="font-weight: 400;">Gradle Version Ranging</span></a><span style="font-weight: 400;">.&nbsp;&nbsp;</span></p>
<h3 class=""><span style="font-weight: 400;">Import Local Dependency</span></h3>
<p class=""><span style="font-weight: 400;">Gradle can consume dependencies available in the local Maven repository (i.e. in-home directory under </span><b>.m2</b><span style="font-weight: 400;"> directory). The target artifact should already exist in the local Maven repository. In order to achieve this, use the following Maven build command to build the project and have a snapshot in the local repository:</span></p>
<pre class=""><code class="language-bash">mvn clean install
</code></pre>
<p class=""><span style="font-weight: 400;">This will make the artifact locally available. Now, it can be added as a dependency or external JAR.</span></p>
<h3 class=""><span style="font-weight: 400;">Option 1: Add Dependency as External JAR</span></h3>
<ol class="">
<li style="font-weight: 400;"><span style="font-weight: 400;">Locate the JAR file in the system. Copy and paste the SDK JAR file in </span><b>libs </b><span style="font-weight: 400;">directory of your application.<img class="size-full wp-image-1807 aligncenter" src="/wp-content/uploads/2022/04/image4.png" alt="" width="595" height="417"></span></li>
<li><span style="font-weight: 400;">Now right click on the copied JAR file and click </span><b>Add As Library.<img class=" wp-image-1805 aligncenter" src="/wp-content/uploads/2022/04/image2.png" alt="" width="598" height="592"></b></li>
<li><span style="font-weight: 400;">Once added, a popup will appear to confirm the target module, select the module and click </span><b>OK</b><span style="font-weight: 400;">.<img class=" wp-image-1808 aligncenter" src="/wp-content/uploads/2022/04/image5.png" alt="" width="398" height="116"></span></li>
</ol>
<h3 class=""><span style="font-weight: 400;">Option 2: Add Dependency Directly</span></h3>
<p class=""><span style="font-weight: 400;">Allow Gradle to search in the local Maven repository by adding </span><b>mavenLocal()</b><span style="font-weight: 400;"> configuration in the </span><b>settings.gradle</b><span style="font-weight: 400;"> file (i.e. project/root level Gradle settings).</span><span style="font-weight: 400;"><br />
</span></p>
<pre class=""><code class="language-xml">buildscript {
    ...
    repositories {
        ...
        mavenLocal()
        ...
    }
    ...
}</code></pre>
<p class=""><span style="font-weight: 400;">Add the dependency in </span><b>build.gradle</b><span style="font-weight: 400;"> (i.e. module-level Gradle settings) as shown:</span></p>
<pre class=""><code class="language-xml">dependencies {
    ...
    implementation &#039;io.github.apimatic:sample-calculator-sdk:1.0.0&#039;
    ...
}
</code></pre>
<p><span style="font-weight: 400;">The dependency format is in the form of &lt;</span><b>groupId:artifactId:version&gt;</b><span style="font-weight: 400;"> but it can be applied through different formats as prescribed on </span><a href="https://docs.gradle.org/current/userguide/declaring_dependencies.html"><span style="font-weight: 400;">Gradle official documentation</span></a><span style="font-weight: 400;">. Gradle also supports version ranging.</span></p>
<p class=""><span style="font-weight: 400;">Once Gradle is synchronized, the application is ready to consume the added SDK dependency.</span></p>
<h2 class=""><span style="font-weight: 400;">Using the Imported SDK in Java and Kotlin</span></h2>
<p class=""><span style="font-weight: 400;">Once the dependency resolution is done, you can start using the SDK components in your application.&nbsp;</span></p>
<h3 class=""><span style="font-weight: 400;">Java Code Sample</span></h3>
<p class=""><span style="font-weight: 400;">The following code sample in Java shows how easily you can initialize the client and use the Multiply endpoint of the integrated Calculator SDK in the Android application:</span></p>
<pre class=""><code class="language-java">// client initialization in Java

APIMATICCalculatorClient client = new APIMATICCalculatorClient.Builder()
    .httpClientConfig(configBuilder -&gt; configBuilder
            .timeout(0))
    .environment(Environment.PRODUCTION)
    .build();

</code></pre>
<pre class=""><code class="language-java">// Preparing and Calling API Endpoint

GetCalculateInput getCalculateInput = new GetCalculateInput();
getCalculateInput.setOperation(OperationTypeEnum.MULTIPLY);
getCalculateInput.setX(222.14);
getCalculateInput.setY(165.14);

client.getSimpleCalculatorController()
        .getCalculateAsync(getCalculateInput)
            .thenAccept(result -&gt; {
                // TODO success callback handler
            }).exceptionally(exception -&gt; {
                // TODO failure callback handler
                return null;
            });

</code></pre>
<h3><span style="font-weight: 400;">Kotlin Code Sample</span></h3>
<p class=""><span style="font-weight: 400;">The following code sample in Kotlin shows how easy it is to initialize the client and use the Multiply endpoint of the integrated Calculator SDK in your Android application:</span></p>
<pre class=""><code class="language-kotlin">// client initialization in Kotlin

var client: APIMATICCalculatorClient = APIMATICCalculatorClient.Builder()
    .httpClientConfig { configBuilder: HttpClientConfiguration.Builder -&gt;
        configBuilder
            .timeout(0)
    }
    .environment(Environment.PRODUCTION)
    .build()

</code></pre>
<pre class=""><code class="language-kotlin">// Preparing and Calling API Endpoint

val getCalculateInput = GetCalculateInput()
getCalculateInput.operation = OperationTypeEnum.MULTIPLY
getCalculateInput.x = 222.14
getCalculateInput.y = 165.14

client.simpleCalculatorController.getCalculateAsync(getCalculateInput)
   .thenAccept { result -&gt;
       // TODO success callback handler
   }
   .exceptionally {
       // TODO failure callback handler
       null
   }</code></pre>
<h2 class=""><span style="font-weight: 400;">Conclusion</span></h2>
<p class=""><span style="font-weight: 400;">APIMatic Java SDKs are fully compliant with the Android app environment making app development quicker. With APIMatic, you can focus on the business domain and leave the server or third-party communication to APIMatic SDKs. APIMatic excels in providing a complete developer experience with language-specific documentation, interactive API portals, and SDKs with end-to-end test coverage.</span></p>
</div>
</div>
</div>
</div>
<p>The post <a rel="nofollow" href="/blog/2022/03/how-to-integrate-java-sdks-into-android-applications/">How to Integrate Java SDKs into Android Applications?</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Facilitate On-Premise Deployment with APIMatic Kubernetes Operator</title>
		<link>/blog/2022/03/facilitate-on-premise-deployment-with-apimatic-kubernetes-operator/</link>
		
		<dc:creator><![CDATA[Arooj Arshad]]></dc:creator>
		<pubDate>Tue, 01 Mar 2022 09:53:43 +0000</pubDate>
				<category><![CDATA[APIMATIC]]></category>
		<category><![CDATA[CodeGen]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Apimatic Features]]></category>
		<category><![CDATA[Code Generation]]></category>
		<category><![CDATA[Developer Experience]]></category>
		<category><![CDATA[Kubernetes]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1688</guid>

					<description><![CDATA[<p>Working in an on-premise production environment containing containerized applications for the APIs requires maintaining and managing all the solutions within it amid strict security and availability requirements. This is the reason why setting up containerized images causes a lot of nuisance. Hence, to enable users to run applications on diverse sets of infrastructures on-premises: the [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/2022/03/facilitate-on-premise-deployment-with-apimatic-kubernetes-operator/">Facilitate On-Premise Deployment with APIMatic Kubernetes Operator</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<figure id="attachment_1691" aria-describedby="caption-attachment-1691" style="width: 712px" class="wp-caption aligncenter"><img class=" wp-image-1691" src="/wp-content/uploads/2022/04/kubernetes-image.png" alt="APIMatic Kubernetes Operator" width="712" height="445"><figcaption id="caption-attachment-1691" class="wp-caption-text">APIMatic Kubernetes Operator</figcaption></figure>
<p class=""><span style="font-weight: 400">Working in an on-premise production environment containing containerized applications for the APIs requires maintaining and managing all the solutions within it amid strict security and availability requirements. This is the reason why setting up containerized images causes a lot of nuisance. Hence, to enable users to run applications on diverse sets of infrastructures on-premises: the </span><span style="color: #0000ff"><a style="color: #0000ff" href="https://docs.apimatic.io/kubernetes-operator/apimatic-operator-overview/"><span style="font-weight: 400">Kubernetes Operator</span></a></span><span style="font-weight: 400"> comes to the rescue!</span></p>
<p class=""><span style="color: #0000ff"><a style="color: #0000ff" href="https://docs.apimatic.io/kubernetes-operator/apimatic-operator-overview/"><span style="font-weight: 400">APIMatic Kubernetes Operator</span></a></span><span style="font-weight: 400">, available as a containerized application and solution, makes on-premise deployment a whole lot easier, ensures that APIMatic’s developer experience platform gets simple for the API users, and cuts down the </span><span style="font-weight: 400">setup process to minutes, allowing users to instantly get up and running with APIMatic on their own infrastructure.</span><span style="font-weight: 400">&nbsp; &nbsp;&nbsp;</span></p>
<p class=""><span style="font-weight: 400">The APIMatic Kubernetes Operator offers the following features:</span></p>
<ul class="">
<li style="font-weight: 400"><span style="font-weight: 400">Deploying APIMatic CodeGen Web API service within the Kubernetes or OpenShift cluster.</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">Exposing the APIMatic CodeGen API external to the cluster.</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">Exposing the service through an ingress resource.</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">Manual horizontal scaling of pods.</span></li>
</ul>
<p class="">&nbsp;</p>
<figure id="attachment_1694" aria-describedby="caption-attachment-1694" style="width: 734px" class="wp-caption aligncenter"><img class=" wp-image-1694" src="/wp-content/uploads/2022/04/Apimatic-Kubernetes-Diagram.png" alt="" width="734" height="402"><figcaption id="caption-attachment-1694" class="wp-caption-text">&nbsp;How the APIMatic Kubernetes Operator works?</figcaption></figure>
<p class=""><span style="font-weight: 400">In this blog, we will take a dive into how the APIMatic Kubernetes Operator actually runs along with the methods to deploy it within the APIMatic environment.</span></p>
<h2><span style="font-weight: 400">Running the APIMatic Kubernetes Operator</span></h2>
<p class=""><span style="font-weight: 400">For running the APIMatic Kubernetes operator, you need to go through some steps and requirements. First of all, contact APIMatic at </span><b>support@apimatic.io</b><span style="font-weight: 400"> to register with the APIMatic CodeGen Docker Hub registry and acquire a valid license to run the APIMatic CodeGen API. Moreover, you need to install:</span></p>
<ol class="">
<li style="font-weight: 400"><a href="https://golang.org/"><span style="font-weight: 400">Go language</span></a> <span style="font-weight: 400">version v1.16.*</span></li>
<li style="font-weight: 400"><a href="https://git-scm.com/"><span style="font-weight: 400">Git</span></a></li>
<li style="font-weight: 400"><span style="color: #3366ff"><a style="color: #3366ff" href="https://www.gnu.org/software/make/"><span style="font-weight: 400">GNU Make Tool</span></a></span></li>
<li style="font-weight: 400"><span style="color: #3366ff"><a style="color: #3366ff" href="https://sdk.operatorframework.io/docs/overview/"><span style="font-weight: 400">Operator SDK</span></a></span></li>
<li style="font-weight: 400"><span style="font-weight: 400">A running Kubernetes cluster with </span><a href="https://kubernetes.io/docs/reference/kubectl/overview/"><span style="font-weight: 400">kubectl</span></a><span style="font-weight: 400"> on the client.&nbsp;</span></li>
<li style="font-weight: 400"><a href="https://minikube.sigs.k8s.io/docs/"><span style="font-weight: 400">Minikube</span></a><span style="font-weight: 400"> or </span><a href="https://minikube.sigs.k8s.io/docs/"><span style="font-weight: 400">kind</span></a><span style="font-weight: 400">, for testing purposes.</span></li>
<li style="font-weight: 400"><a href="https://metallb.org/"><span style="font-weight: 400">MetalLB</span></a><span style="font-weight: 400">, for checking the service created by the APIMatic operator on-premises.</span></li>
</ol>
<h2 class=""><span style="font-weight: 400">How to Deploy the Kubernetes Operator?</span></h2>
<p class=""><span style="font-weight: 400">Once the initial requirements are complete, you can proceed to deploy the APIMatic Kubernetes operator via the methods:</span></p>
<ul class="">
<li style="font-weight: 400"><span style="font-weight: 400">Direct Deployment of Operator</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">OLM Deployment of Operator (will be covered in our next blog soon&#8230;)</span></li>
</ul>
<h3 class=""><span style="font-weight: 400">Direct Deployment of Operator</span></h3>
<p class=""><span style="font-weight: 400">Direct deployment is an instant deployment to those instances that are externally accessible. To run the operator via direct deployment, start off by cloning the APIMatic repository into your working directory using the </span><b>git clone</b><span style="font-weight: 400"> command.&nbsp;&nbsp;</span></p>
<pre><code class="language-bash">git clone https://github.com/apimatic/apimatic-kubernetes-operator.git</code></pre>
<p class=""><span style="font-weight: 400">Next, run the </span><b>make deploy </b><span style="font-weight: 400">command to set up the APIMatic operator resources. This will deploy the </span><b>apimatic-system</b><span style="font-weight: 400"> namespace as well as the </span><b>CRD</b><span style="font-weight: 400"> and the </span><b>RBAC</b><span style="font-weight: 400"> manifests. Following this, create a secret, named </span><b>apimaticimagesecret, </b><span style="font-weight: 400">with </span><b>kubectl create secret</b><span style="font-weight: 400">&nbsp;command which allows pulling the APIMatic CodeGen image using the Docker Hub username registered with APIMatic.</span></p>
<pre class=""><code class="language-bash">kubectl create secret docker-registry apimaticimagesecret --docker-server=https://index.docker.io/v1/ --
docker-username=&lt;your-name&gt; --docker-password=&lt;your-pword&gt; --docker-email=&lt;your-email&gt;</code></pre>
<p class=""><span style="font-weight: 400">Now, create a </span><a href="https://kubernetes.io/docs/concepts/configuration/configmap/"><span style="font-weight: 400">configmap</span></a> <span style="font-weight: 400">resource named </span><b>apimaticlicense, </b><span style="font-weight: 400">with the </span><b>kubectl create configmap</b><span style="font-weight: 400">&nbsp;command, that will serve as the volume storing the APIMatic license. For example,the following command creates a ConfigMap and deploys it using the </span><i><span style="font-weight: 400">License.lic</span></i><span style="font-weight: 400"> file located at </span><i><span style="font-weight: 400">/usr/local/apimatic/license/</span></i><span style="font-weight: 400">.</span></p>
<pre><code class="language-bash">kubectl create configmap apimaticlicense --from-file /usr/local/apimatic/license/License.lic</code></pre>
<p class=""><span style="font-weight: 400">After running the operator using the following </span><b>kubectl apply</b><span style="font-weight: 400">&nbsp;command, you will see a newly created </span><span style="color: #3366ff"><a style="color: #3366ff" href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/"><span style="font-weight: 400">Deployment</span></a></span><span style="font-weight: 400"> with a replica count of 3 and </span><span style="color: #3366ff"><a style="color: #3366ff" href="https://kubernetes.io/docs/concepts/services-networking/service/"><span style="font-weight: 400">Service</span></a></span><span style="font-weight: 400"> of type NodePort, both named </span><b>apimatic-sample</b><span style="font-weight: 400">. Accessing </span><i><span style="font-weight: 400">http://localhost:32000/</span></i><span style="font-weight: 400"> from your browser (or using curl from within the Minikube or Kind cluster) will show the APIMatic Titan page.</span></p>
<pre><code class="language-bash">kubectl apply -f config/samples/apicodegen_v1beta1_apimatic.yaml</code></pre>
<p class=""><span style="font-weight: 400">Once done with all the above, you can use the exposed APIMatic CodeGen API to generate API SDKs and Docs using </span><span style="color: #3366ff"><a style="color: #3366ff" href="https://curl.se/"><span style="font-weight: 400">curl</span></a></span><span style="font-weight: 400">, Postman, or your own custom Web application that consumes the APIMatic CodeGen API service. You can also remove the APIMatic resources using the </span><b>make undeploy</b><span style="font-weight: 400">&nbsp;command.</span></p>
<p class=""><span style="font-weight: 400">For detailed information, please visit our </span><span style="color: #3366ff"><a style="color: #3366ff" href="https://docs.apimatic.io/kubernetes-operator/direct-deployment-of-operator/"><span style="font-weight: 400">Direct Deployment APIMatic Docs</span></a></span><span style="font-weight: 400">.&nbsp;</span></p>
<h2 class=""><span style="font-weight: 400">Conclusion</span></h2>
<p class=""><span style="font-weight: 400">Setting up a containerized application may not be difficult for API users but is definitely a workout. This is largely because </span><span style="font-weight: 400">containerization</span><span style="font-weight: 400">, the principle approach that Kubernetes is built upon, is still not nearly as ubiquitous as the classical approach to API design and resource management. Therefore, APIMatic Kubernetes Operator has been introduced as yet another option </span><a href="http://apimatic.io/"><span style="font-weight: 400">amongst our developing toolset</span></a><span style="font-weight: 400"> so that you can get up and running with APIMatic on your own infrastructure.</span></p>
</div>
</div>
</div>
</div>
<p>The post <a rel="nofollow" href="/blog/2022/03/facilitate-on-premise-deployment-with-apimatic-kubernetes-operator/">Facilitate On-Premise Deployment with APIMatic Kubernetes Operator</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>How Are SDKs and API Documentation Helping API Industries?</title>
		<link>/blog/2022/02/the-customers-pov-how-do-sdks-and-api-documentation-help-business/</link>
		
		<dc:creator><![CDATA[Nida I Zamir]]></dc:creator>
		<pubDate>Fri, 25 Feb 2022 08:34:38 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Portal]]></category>
		<category><![CDATA[APIMATIC]]></category>
		<category><![CDATA[Automation]]></category>
		<category><![CDATA[Case Studies]]></category>
		<category><![CDATA[CodeGen]]></category>
		<category><![CDATA[Communication APIs]]></category>
		<category><![CDATA[FinTech APIs]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[Api documentation]]></category>
		<category><![CDATA[auto-generated SDKs]]></category>
		<category><![CDATA[Case Study]]></category>
		<category><![CDATA[customer]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1693</guid>

					<description><![CDATA[<p>The API community seems to have settled upon one ground rule: give the developers what they want, and then some more. Yay for the external developers (the API users), nay for the internal developers (the API developers).&#160; The exponential growth in APIs and the consequent competition between the API providers warrant the need for maximum [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/2022/02/the-customers-pov-how-do-sdks-and-api-documentation-help-business/">How Are SDKs and API Documentation Helping API Industries?</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class=""><img class="aligncenter wp-image-1697 " src="/wp-content/uploads/2022/04/CustomrPoV3-02-1024x619.png" alt="SDKs and API documentation by APIMatic" width="744" height="450"></p>
<p class=""><span style="font-weight: 400;">The API community seems to have settled upon one ground rule: give the developers what they want, and then some more. Yay for the external developers (the API users), nay for the internal developers (the API developers).&nbsp; </span></p>
<p class=""><span style="font-weight: 400;">The exponential growth in APIs and the consequent competition between the API providers warrant the need for maximum developer experience with the least onboarding problems.</span></p>
<p class=""><span style="font-weight: 400;">Automated SDK and API documentation generations are a sure way to boost API adoption while lifting the strain of repetitive tasks off developers. API provider companies from various industries like communication, fintech, and travel enjoy better team productivity and faster time to market as the time-consuming monotony of maintaining SDKs and API documentation is handled by APIMatic.</span></p>
<h2 class=""><span style="font-weight: 400;">Communication APIs: Increased Developer Productivity for MessageMedia</span></h2>
<p class=""><a href="https://messagemedia.com/us/"><span style="font-weight: 400;">MessageMedia</span></a><span style="font-weight: 400;"> is Australia’s leading global business messaging platform that offers communication services between its customers’ workforce.</span></p>
<p class=""><span style="font-weight: 400;">Sending over a billion messages per year and servicing thousands of global customers required a streamlined developer experience to integrate their various messaging APIs, and manually updating SDKs on each update was not optimal.</span></p>
<p class=""><span style="color: #999999;"><i><span style="font-weight: 400;">“One of the problems we had with our SDKs was if a new feature was added to the API, we would have to manually make the code changes to the SDKs itself. Given we have 6 SDKs for each of our APIs, it was a long and inefficient process to update.” — Ibrahim Tareq, Developer Evangelist</span></i></span></p>
<p class=""><span style="font-weight: 400;">With APIMatic’s CodeGen Engine, MessageMedia was able to auto-generate SDKs in all of the required languages, and the SDKs could reflect changes in the API on the go, which had been a pain point for the team.</span></p>
<p class=""><span style="color: #999999;"><i><span style="font-weight: 400;">“It has helped reduce the barrier of entry… you can hand out SDKs to your customers and make it easier and simpler for them to code their way to the first ‘hello world’.”</span></i></span></p>
<p class="">Case Study: <a href="https://blog.apimatic.io/messagemedia-speaking-the-language-of-developers-with-apimatic-codegen-5a3a7ad17d8e"><span style="font-weight: 400;">MessageMedia Increases Developer Productivity with Autogenerated SDKs</span></a></p>
<h2 class=""><span style="font-weight: 400;">Fintech APIs: Revenue Generator for Fortune 500 Fintech</span></h2>
<p class=""><span style="font-weight: 400;">This leading financial services giant provides access to the world’s largest independent payment network to almost any country in the world through API integrations.&nbsp;</span></p>
<p class=""><span style="font-weight: 400;">Hence, this company was quick to realize that in order to obtain partnerships and integrations with third parties, they needed to reach out to a larger developer community and ensure that their APIs were adopted faster. They began offering .NET and Java SDKs for their APIs, which were built in-house, but maintaining them took the time that could instead be spent on expanding their API landscape with the growing demand.</span></p>
<p class=""><span style="color: #999999;"><i><span style="font-weight: 400;">“Writing SDKs for just two languages was a pretty time consuming and expensive </span></i><i><span style="font-weight: 400;">process, every time we had a release that affected those services, it would increase </span></i><i><span style="font-weight: 400;">our sprints and dev timelines” &#8211; Head of Innovation</span></i></span></p>
<p class=""><span style="font-weight: 400;">APIMatic’s CodeGen Engine streamlined their process in the form of automatically generated SDKs and API documentation for six languages instead of two, directly from their API definition files. This resulted in cost savings of hundreds of thousands of dollars compared to building SDKs and docs in-house while reducing their time to market the APIs.</span></p>
<p class=""><span style="color: #999999;"><i><span style="font-weight: 400;">“Fast go-to-market time for documentation, and then the ability to generate SDKs in </span></i><i><span style="font-weight: 400;">multiple languages; those were the things that attracted us to APIMatic.”</span></i></span></p>
<p class="">Case Study: <a href="https://www.apimatic.io/success-stories/fintech/a-fortune-500-fintech-company/"><span style="font-weight: 400;">How APIMatic Became a Revenue Generator for a Fortune 500 Fintech</span></a></p>
<h2 class=""><span style="font-weight: 400;">Operation Management APIs: From 1 Week to 18 Seconds with Dude Solutions</span></h2>
<p class=""><a href="https://www.dudesolutions.com/"><span style="font-weight: 400;">Dude Solutions</span></a><span style="font-weight: 400;"> is a leading software-as-a-service (SaaS) provider of operations management solutions for education, government, healthcare, and many industries.</span></p>
<p class=""><span style="font-weight: 400;">They have two front-facing REST APIs that drive their platform and are supported by a set of micro-services that specialize in different areas.&nbsp;</span></p>
<p class=""><span style="font-weight: 400;">Dude Solutions realized early on that with SDKs, they would have sharable software that could be used across the entire platform. It would reduce the amount of code in each API stack and understand the security protocols. However, they started by creating the SDKs from scratch and soon enough found out that it was just as long a process as API development.</span></p>
<p class=""><span style="color: #999999;"><i><span style="font-weight: 400;">“We learned that it takes almost as long to do the API implementation as it did the SDK development. In fact, it took one week to develop the SDK for a single language.” &#8211; Brian Hyder, Engineering Manager</span></i></span></p>
<p class=""><span style="font-weight: 400;">When they began designing their next micro-service, Dude Solutions started looking for alternate ways for SDK development and came across APIMatic. The autogeneration of SDKs in multiple languages helped drastically cut down SDK development and maintenance costs.</span></p>
<p class=""><span style="color: #999999;"><i><span style="font-weight: 400;">“Development time for SDKs for each language went from 1 week to 18 seconds thanks to APIMatic.”</span></i></span></p>
<p class="">&nbsp;</p>
<p class=""><span style="font-weight: 400;"><img class="aligncenter wp-image-1695 size-full" src="/wp-content/uploads/2022/04/dude-solutions.png" alt="" width="603" height="393"></span></p>
<p class=""><span style="font-weight: 400;">While they had initially planned to provide SDKs in 3 languages, the significant time and cost reduction enabled them to provide SDKs for 7 languages with APIMatic’s autogenerated SDKs.</span></p>
<p class="">Read More: <a href="https://blog.apimatic.io/automate-all-the-things-how-dude-solutions-saved-20-000-in-development-costs-using-apimatic-f9c05118f041"><span style="font-weight: 400;">How Dude Solutions Cut Down Time to Release from 1 Week to 18 Seconds</span></a></p>
<h2 class=""><span style="font-weight: 400;">Travel APIs: Client Onboarding Time Reduced by 20% for Didgigo</span></h2>
<p class=""><a href="https://www.didgigo.com/"><span style="font-weight: 400;">Didgigo</span></a><span style="font-weight: 400;"> is a digital media platform that assists travel agents in organizing and maintaining data, as well as creating detailed itinerary proposals that save time and boost sales opportunities for clients.</span></p>
<p class=""><span style="font-weight: 400;">Didgigo offers APIs that allow travel experts to create travel documents for their clients automatically and publish both digital and print versions at the same time. However, for a firm that excels at offering automated tailor-made solutions to its clients, it became critical to find a solution that could shorten the API onboarding time for customers, without the engineering team having to context switch on each release.</span></p>
<p class=""><span style="color: #999999;"><i><span style="font-weight: 400;">“Our process was extremely manual and required a lot of back and forth” &#8211; Keanu Ashwell, Development Operations Engineer</span></i></span></p>
<p class=""><span style="font-weight: 400;">With APIMatic’s autogenerated documentation in multiple languages, Didgigo is able to shift its focus on building robust APIs, without having to devote time and resources to maintain the documentation. The customer onboarding process has become more streamlined, with tickets raised during onboarding being <strong>reduced by 11-20%</strong>, and customer onboarding meetings going down by more than 7 meetings per quarter.</span></p>
<p class=""><span style="color: #999999;"><i><span style="font-weight: 400;">“Our experience with APIMatic and its provisions has been exceptional. We haven&#8217;t had </span></i><i><span style="font-weight: 400;">much time to maintain everything as we&#8217;re still strapped for resources due to COVID-19, </span></i><i><span style="font-weight: 400;">but we&#8217;ve still been able to rely on APIMatic to give our API users an understanding of </span></i><i><span style="font-weight: 400;">what functionality we expose via our APIs. The ability to test [the APIs] is also a feature I </span></i><i><span style="font-weight: 400;">love and something that drew me to the service when we migrated from our in-house Swagger solution.”</span></i></span></p>
<p class="">Case Study: <a href="https://www.apimatic.io/success-stories/api-portal/didgigo/"><span style="font-weight: 400;">How Didgigo Reduces Client Onboarding Time with Autogenerated Documentation</span></a></p>
<h2 class=""><span style="font-weight: 400;">Healthcare/Senior Living APIs: Time to Release Down by 30% for Caremerge</span></h2>
<p class=""><a href="https://caremerge.com/"><span style="font-weight: 400;">Caremerge</span></a> <span style="font-weight: 400;">is an </span><span style="font-weight: 400;">all-in-one platform that empowers families, residents, and staff of senior citizens by </span><span style="font-weight: 400;">providing tools for modern elder care including family engagement, community engagement, chronic care management, and more.</span></p>
<p class=""><span style="font-weight: 400;">Caremerge also uses various pre-existing services to make them more accessible for these senior citizens, for example with voice commands. However, managing all these services in a single platform requires multiple internal microservices and a public API.</span></p>
<p class=""><span style="font-weight: 400;">The Caremerge API powers communication between the services they offer and allows them to build integrations with various third-party vendors and services. Building those integrations requires the documentation for the API to be always updated, so developers spend less time figuring out how to integrate.</span></p>
<p class=""><span style="font-weight: 400;">Using APIMatic’s autogenerated API documentation with the API playground allows developers to test inputs and outputs within the docs, resulting in quicker integration of the API, and helps Caremerge cut down on time spent on maintenance.</span></p>
<p class=""><span style="color: #999999;"><em><span style="font-weight: 400;">“APIMatic helps us save 20–30% of the time it took us to manage documentation for our API” &#8211; </span><span style="font-weight: 400;">Fahad Aziz, Co-Founder, and CTO</span></em></span></p>
<p class="">Read More: <a href="https://blog.apimatic.io/serving-the-senior-living-industry-with-caremerge-api-734da95b2d9b"><span style="font-weight: 400;">Serving The Senior Living Industry with Caremerge</span></a></p>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">
<hr>
</div>
</div>
<p class=""><span style="font-weight: 400;">Quicker synchronization of documentation and SDKs with APIs leads to shorter sprints and faster time to market. With a mission to make API consumption as simple as possible, APIMatic considers it a victory when our</span><a href="https://www.apimatic.io/success-stories/"><span style="font-weight: 400;"> customers’ APIs are consumed</span></a><span style="font-weight: 400;"> more readily with our autogenerated SDKs and documentation.</span></p>
</div>
</div>
</div>
</div>
<p>The post <a rel="nofollow" href="/blog/2022/02/the-customers-pov-how-do-sdks-and-api-documentation-help-business/">How Are SDKs and API Documentation Helping API Industries?</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>An Insight into APIMatic’s Autogenerated SDKs</title>
		<link>/blog/2022/02/an-insight-into-apimatics-autogenerated-sdks/</link>
		
		<dc:creator><![CDATA[Arooj Arshad]]></dc:creator>
		<pubDate>Mon, 21 Feb 2022 11:44:24 +0000</pubDate>
				<category><![CDATA[Automation]]></category>
		<category><![CDATA[CLI]]></category>
		<category><![CDATA[CodeGen]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[auto-generated SDKs]]></category>
		<category><![CDATA[Code Generation]]></category>
		<category><![CDATA[Sdks]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1665</guid>

					<description><![CDATA[<p>How can you reduce client onboarding of your API so that the API user quickly gets to their first &#8220;Hello World&#8221;? One definitive way is to provide an SDK for a developer&#8217;s technology stack so that they can easily integrate your APIs onto their native platforms. By providing an SDK, it becomes much simpler for [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/2022/02/an-insight-into-apimatics-autogenerated-sdks/">An Insight into APIMatic’s Autogenerated SDKs</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<div class="">
<p class=""><img class=" wp-image-1675 aligncenter" src="/wp-content/uploads/2022/04/updated-pic.png" alt="Generate SDK" width="572" height="404"></p>
<p class=""><span style="font-weight: 400">How can you reduce client onboarding of your API so that the API user quickly gets to their first &#8220;Hello World&#8221;?</span> <span style="font-weight: 400">One definitive way is to provide an SDK for a developer&#8217;s technology stack so that they can easily integrate your APIs onto their native platforms.</span><span style="font-weight: 400"> By providing an SDK, it becomes much simpler for a developer to integrate your API in ways that are familiar and well-integrated with their existing toolchain</span><span style="font-weight: 400">.</span></p>
<p class=""><span style="font-weight: 400">In simpler terms, it is no longer enough to expose your API endpoints with just HTTP documentation or API references. You need to attract developers to enable them to comfortably play around with your code, and this is what APIMatic SDKs help with.</span></p>
<h2 class=""><span style="font-weight: 400">APIMatic as a Code Generator</span></h2>
<p class=""><span style="color: #3366ff"><a style="color: #3366ff" href="https://www.apimatic.io/"><span style="font-weight: 400">APIMatic</span></a></span><span style="font-weight: 400"> autogenerates SDKs </span><span style="font-weight: 400">f</span><span style="font-weight: 400">or APIs automatically in all major programming languages so that developers can consume APIs in their favorite development environment with less code, less effort, and more fun</span><span style="font-weight: 400">. </span><span style="font-weight: 400">These </span><span style="color: #3366ff"><a style="color: #3366ff" href="https://docs.apimatic.io/generate-sdks/overview-sdks/"><span style="font-weight: 400">comprehensive SDKs</span></a></span><span style="font-weight: 400"> help accelerate the API consumption process as they can be automatically generated and shipped along with your latest API update. They accurately map your API definition files into their respective classes and controllers while adhering to the best coding practices. APIMatic further provides flexibility to customize code generation through </span><span style="color: #3366ff"><a style="color: #3366ff" href="https://docs.apimatic.io/generate-sdks/configure-codegen/"><span style="font-weight: 400">Customizable CodeGen Settings</span></a></span><span style="font-weight: 400">. APIMatic generates SDKs in the following languages:</span></p>
<ul class="">
<li style="font-weight: 400"><span style="font-weight: 400">PHP</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">Ruby</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">Python</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">C# (.NET)</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">Java</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">TypeScript</span></li>
</ul>
<p class=""><span style="font-weight: 400">Building and maintaining these feature-packed SDKs from scratch is not easy and requires extensive engineering time and effort. However, autogenerated SDKs can significantly cut down costs and time.</span> <span style="font-weight: 400">For more detailed pros and cons of manually generating SDKs against autogenerating them, read here on </span><span style="color: #3366ff"><a style="color: #3366ff" href="https://www.apimatic.io/blog/2021/09/the-great-sdk-battle-build-vs-buy/"><span style="font-weight: 400">The Great SDK Battle: Build vs Buy</span></a></span><span style="font-weight: 400">.</span></p>
<h2 class=""><span style="font-weight: 400">How does APIMatic Autogenerate SDKs?</span></h2>
<p class=""><span style="font-weight: 400">SDK generation is a tricky challenge for API providers. On one side, you want to keep SDKs with minimal code and dependencies and on the other hand, you want to customize the generated code according to the needs of the developers. APIMatic gives you an easy solution by providing autogenerated SDKs for your APIs.</span></p>
<p class=""><span style="font-weight: 400">APIMatic’s Code Generation Engine follows several steps internally to generate client libraries from API definition files. The code generation process starts with an input API definition file which can be in any of the multiple supported </span><span style="color: #3366ff"><a style="color: #3366ff" href="https://www.apimatic.io/transformer/#supported-formats"><span style="font-weight: 400">API definition formats</span></a></span><span style="font-weight: 400"> like OpenAPI, RAML, API Blueprint, etc.</span></p>
<ul class="">
<li><b>API Transformation: </b><span style="font-weight: 400">This step transforms the input API definition file into APIMatic&#8217;s format which contains useful information for SDK generation that is not available in other API definition formats.</span></li>
<li style="font-weight: 400"><b>API Validation:</b> <span style="font-weight: 400">After an input file is transformed into APIMatic’s format, it is validated. The validation process includes checking for syntactical and semantical discrepancies in the API definition and shows critical warnings and errors to be fixed before SDK generation can proceed.</span></li>
<li style="font-weight: 400"><b>SDK Generation: </b><span style="font-weight: 400">Now, components of the API definition are looped over to generate code representations. While a basic SDK caters to settings, endpoints, and an abstraction layer, APIMatic goes an extra step by mapping your API completely into an SDK</span><span style="font-weight: 400">. </span><span style="font-weight: 400">Some important entity conversions from an API definition to an SDK are:</span>
<ul>
<li style="font-weight: 400"><b>Settings -&gt; Configuration files:</b><span style="font-weight: 400"> All API settings like environment configuration etc are consolidated in a configuration file.</span></li>
<li style="font-weight: 400"><b>Endpoints -&gt; Functions:</b><span style="font-weight: 400"> Each endpoint maps onto an independent function.</span></li>
<li style="font-weight: 400"><b>Groups -&gt; Controller class files:</b><span style="font-weight: 400"> Endpoints are automatically grouped into separate Controller classes.</span></li>
<li style="font-weight: 400"><b>Models -&gt; Model class files:</b><span style="font-weight: 400"> Data input is converted into models.</span></li>
<li style="font-weight: 400"><b>Errors -&gt; Exception class files:</b><span style="font-weight: 400"> Errors are handled as exceptions via a unified exception class.&nbsp;</span></li>
</ul>
</li>
</ul>
<p class=""><span style="font-weight: 400">&nbsp; &nbsp;</span></p>
<p class=""><span style="font-weight: 400">&nbsp; &nbsp; Apart from these core files, the CodeGen engine also generates the following utility files:</span></p>
<ul class="">
<li style="list-style-type: none">
<ul class="">
<li style="font-weight: 400;text-align: left"><span style="font-weight: 400">&nbsp;HTTP abstraction layer</span></li>
<li style="font-weight: 400;text-align: left"><span style="font-weight: 400">&nbsp;Helper class files</span></li>
<li style="font-weight: 400;text-align: left"><span style="font-weight: 400">Client library interface</span></li>
<li style="font-weight: 400;text-align: left"><span style="font-weight: 400">Language/platform-dependent files</span></li>
</ul>
</li>
<li style="font-weight: 400"><b>Documentation Generation: </b><span style="font-weight: 400">Every generated SDK also includes a README.md file. The README contains complete class reference and code samples for the SDK and guides the user on setting up the environment (using tool-specific IDEs), initializing the client, creating the controller, calling the endpoints, and testing them.&nbsp;</span></li>
<li><b>Packaging:</b> <span style="font-weight: 400">After all the SDK files have been generated, there are multiple packaging options available to APIMatic users. You can either get the SDK packaged in a zip file, have it deployed to GitHub, or </span><span style="color: #3366ff"><a style="color: #3366ff" href="https://docs.apimatic.io/generate-sdks/publishing-a-package/"><span style="font-weight: 400">publish it as a package</span></a></span><span style="font-weight: 400"> on platforms like npm, NuGet, RubyGems, and PyPI.</span></li>
</ul>
<p class="">&nbsp;</p>
<p class=""><span style="font-weight: 400">For more detail on the mapping from an API specification file to SDK, please refer to the </span><span style="color: #3366ff"><a style="color: #3366ff" href="https://docs.apimatic.io/generate-sdks/overview-sdks/"><span style="font-weight: 400">APIMatic SDK O</span>verview</a></span><span style="font-weight: 400">.</span></p>
<h2 class=""><span style="font-weight: 400">Features Supported in APIMatic&#8217;s Autogenerated SDKs&nbsp;</span></h2>
<p class=""><span style="font-weight: 400">APIMatic SDKs supports the latest versions and language dependencies, along with features that make them as robust and fault-tolerant as possible.</span></p>
<p class=""><strong>Immutable Clients for Multi-Threading</strong></p>
<p class=""><span style="font-weight: 400">An</span><a href="https://docs.apimatic.io/changelog/apimatic-code-generator-v3-titan#new-immutable-clients-in-sdks"> <span style="font-weight: 400">Immutable Client</span></a><span style="font-weight: 400"> does not allow the user of the client to mutate the client (i.e change its state) once it has been created.</span> <span style="font-weight: 400">Client classes of all the SDKs are designed using the immutable design pattern. This gives developers the assurity that no method call would mutate its state once the client is instantiated.</span></p>
<p class=""><strong>Timeout and Retries on API Call Errors</strong></p>
<p class=""><span style="font-weight: 400">APIMatic generated SDKs help you write fault-tolerant applications by helping deal with network fault errors. If an API call fails due to network problems, it is retried with an exponentially increasing wait time up to a maximum retry count specified by the user. This is particularly helpful during temporary network outages.</span></p>
<p class=""><strong>Support for XML in API Calls</strong></p>
<p class=""><span style="font-weight: 400">The SDKs contain support for </span><a href="https://docs.apimatic.io/changelog/apimatic-code-generator-v3-titan#support-for-xml"><span style="font-weight: 400">sending and receiving XML</span></a><span style="font-weight: 400"> in the API calls, alongside JSON. So if your API definition uses XML, it can be imported into APIMatic to generate SDKs without having to worry about serializing and deserializing the XML data.</span><span style="font-weight: 400">&nbsp;</span></p>
<p class=""><strong>oneOf and anyOf Support</strong></p>
<p class=""><span style="font-weight: 400">Java, Python, and PHP SDKs contain the support of <strong>oneOf</strong> and <strong>anyOf</strong> which gives the ability to create a complex schema or validate a value against multiple criteria.</span></p>
<p class=""><strong>Support for Nullable Properties in Models</strong></p>
<p class=""><span style="font-weight: 400">J</span><span style="font-weight: 400">ava and C# SDKs contain nullable properties in models, so if a user does not assign any value to a property after model instance initialization, a null value will be sent in the HTTP request instead of being skipped altogether.</span></p>
<p class=""><strong>Access to HTTP Response Data</strong></p>
<p class=""><span style="font-weight: 400">The SDKs also allow access to the HTTP response information like response headers, status code, and body on API calls. </span></p>
<p class=""><span style="font-weight: 400">Other features in the SDKs include optimized error messages, handling cancellation of API calls, and more. For more information and details on all the features that APIMatic SDKs provide, have a look at our </span><span style="color: #3366ff"><a style="color: #3366ff" href="https://docs.apimatic.io/generate-sdks/sdk-features/"><span style="font-weight: 400">SDK Features List</span></a></span><span style="font-weight: 400">.</span></p>
<h2 class=""><span style="font-weight: 400">How to Generate SDKs from API Definitions?</span></h2>
<p><span style="font-weight: 400">Next, comes the part where you can generate your SDKs via various options according to your specified use case:</span></p>
<ul class="">
<li style="font-weight: 400"><span style="color: #3366ff"><a style="color: #3366ff" href="https://docs.apimatic.io/generate-sdks/generating-sdks/#generate-sdks-via-web"><span style="font-weight: 400">Web</span></a></span></li>
<li style="font-weight: 400"><span style="color: #3366ff"><a style="color: #3366ff" href="https://docs.apimatic.io/generate-sdks/generating-sdks/#generate-sdks-via-api"><span style="font-weight: 400">API</span></a></span><span style="font-weight: 400">&nbsp;</span></li>
<li style="font-weight: 400"><span style="color: #3366ff"><a style="color: #3366ff" href="https://docs.apimatic.io/generate-sdks/generating-sdks/#generate-sdks-via-apimatic-cli"><span style="font-weight: 400">APIMatic CLI</span></a></span></li>
</ul>
<h3 class=""><span style="font-weight: 400">Generate SDKs through Web</span></h3>
<p class=""><span style="font-weight: 400">You can generate an SDK for any API definition file in your favorite language through our </span><span style="color: #3366ff"><a style="color: #3366ff" href="https://www.apimatic.io/dashboard"><span style="font-weight: 400">APIMatic dashboard</span></a></span><span style="font-weight: 400">. Select any API or its version from the dashboard and generate the SDK via the ‘Generate’</span> <span style="font-weight: 400">button. After the validation process, you can choose to download the SDK as a zip file, deploy it to Github or publish it as a package.</span></p>
<figure id="attachment_1668" aria-describedby="caption-attachment-1668" style="width: 590px" class="wp-caption aligncenter"><img class="size-full wp-image-1668" src="/wp-content/uploads/2022/04/generation-options.png" alt="" width="590" height="582"><figcaption id="caption-attachment-1668" class="wp-caption-text">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Generating SDK Options</figcaption></figure>
<h3 class=""><span style="font-weight: 400">Generate SDKs through API</span></h3>
<p class=""><span style="font-weight: 400">You can automate the process of SDK generation using</span> <span style="color: #3366ff"><a style="color: #3366ff" href="https://www.apimatic.io/apidocs/apimatic/"><span style="font-weight: 400">APIMatic&#8217;s CodeGen API</span></a>,<span style="color: #000000"> by integrating it into your CI/CD pipelines</span></span><span style="font-weight: 400">. </span><span style="font-weight: 400">You can generate SDKs for APIs already imported into APIMatic, any external API, or by specifying a URL. The generated SDKs are downloaded as a zip file in your system.</span></p>
<pre class=""><code class="language-cs">{
    string apiEntityId = &quot;apiEntityId2&quot;; 
    Platforms template = Platforms.CSNETSTANDARDLIB; 

    try { &nbsp;&nbsp;&nbsp;
            APIEntityCodeGeneration result = await codeGenerationImportedApisController
                                                        .GenerateSDKAsync(apiEntityId, template); 
        } 
    catch (ApiException e) {};
}</code></pre>
<h3 class=""><span style="font-weight: 400">Generate SDKs through APIMatic CLI</span><span style="font-weight: 400">&nbsp;</span></h3>
<p class=""><span style="font-weight: 400">You can also integrate the </span><span style="color: #3366ff"><a style="color: #3366ff" href="https://docs.apimatic.io/apimatic-cli/intro-and-install/"><span style="font-weight: 400">APIMatic CLI</span></a></span><span style="font-weight: 400"> into your CI/CD pipelines for a seamless and automated experience. APIMatic CLI supports all the basic features like validation, transformation, SDK, and documentation generation. You can generate an SDK for your API through the CLI via the <strong>apimatic SDK:generate</strong> command:&nbsp;</span></p>
<p class=""><img class="aligncenter wp-image-1680 size-full" src="/wp-content/uploads/2022/04/cli-image.png" alt="apimatic-cli command to generate SDK" width="779" height="97"></p>
<p class=""><span style="font-weight: 400">For more details, read our </span><span style="color: #3366ff"><a style="color: #3366ff" href="https://docs.apimatic.io/generate-sdks/generating-sdks/"><span style="font-weight: 400">Generating SDKs via APIMatic Docs</span></a></span><span style="font-weight: 400">.</span></p>
<h2 class=""><span style="font-weight: 400">Wrapping it Up!</span></h2>
<p class=""><span style="font-weight: 400">Creating SDKs in multiple languages is quite resource-intensive and expensive. Good SDKs save both time and cognitive effort when integrating with a provider’s API. This is why APIMatic&#8217;s CodeGen engine gives you the maximum advantage in creating SDKs and takes care of all the SDK generation and maintenance work behind the scenes while your developers can focus on their applications and innovative solutions.&nbsp;</span></p>
<p class="">&nbsp;</p>
</div>
</div>
</div>
</div>
</div>
<p>The post <a rel="nofollow" href="/blog/2022/02/an-insight-into-apimatics-autogenerated-sdks/">An Insight into APIMatic’s Autogenerated SDKs</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Using Optional and Nullable Properties in API Requests</title>
		<link>/blog/2021/09/using-optional-and-nullable-properties-in-api-requests/</link>
		
		<dc:creator><![CDATA[Maryam Adnan]]></dc:creator>
		<pubDate>Thu, 16 Sep 2021 09:00:51 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[APIMATIC]]></category>
		<category><![CDATA[CodeGen]]></category>
		<category><![CDATA[OpenAPI]]></category>
		<category><![CDATA[REST APIs]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[nullable]]></category>
		<category><![CDATA[OpenApi]]></category>
		<category><![CDATA[optional]]></category>
		<category><![CDATA[optional/nullable]]></category>
		<category><![CDATA[Sdks]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1436</guid>

					<description><![CDATA[<p>An essential part of an API endpoint is its parameters. While certain parameters must be included in each request, there may be some parameters that may or not may not be included in the request. The optional property was introduced to create unique combinations of such parameters in API requests. In other cases, some parameters [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/2021/09/using-optional-and-nullable-properties-in-api-requests/">Using Optional and Nullable Properties in API Requests</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1436" class="elementor elementor-1436">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-4ea2926a elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="4ea2926a" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-1c6630db" data-id="1c6630db" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-274d9c90 elementor-widget elementor-widget-text-editor" data-id="274d9c90" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
			<style>/*! elementor - v3.6.4 - 13-04-2022 */
.elementor-widget-text-editor.elementor-drop-cap-view-stacked .elementor-drop-cap{background-color:#818a91;color:#fff}.elementor-widget-text-editor.elementor-drop-cap-view-framed .elementor-drop-cap{color:#818a91;border:3px solid;background-color:transparent}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap{margin-top:8px}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap-letter{width:1em;height:1em}.elementor-widget-text-editor .elementor-drop-cap{float:left;text-align:center;line-height:1;font-size:50px}.elementor-widget-text-editor .elementor-drop-cap-letter{display:inline-block}</style>				<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class=""><img class="aligncenter wp-image-1451" src="/wp-content/uploads/2021/12/Using-OptionalNullable-Properties-in-API-Requests_Blog_Facebook-1-e1631787822746-1024x436.png" alt="Using Optional and Nullable Properties in API Requests | APIMatic Blog" width="623" height="265" /></p>
<p class=""><span style="font-weight: 400;">An essential part of an API endpoint is its parameters. While certain parameters must be included in each request, there may be some parameters that may or not may not be included in the request. The </span><span style="font-weight: 400;"><code>optional</code> </span><span style="font-weight: 400;">property was introduced to create unique combinations of such parameters in API requests. In other cases, some parameters may be allowed to hold a null value, which is catered via <code>nullable</code> properties that help in coping with the errors if null is not handled correctly. </span></p>
<p class=""><span style="font-weight: 400;">While all endpoint parameter types (query, body, form, and path) can have optional nullable properties, we’ll be focusing on the optional nullable properties of a model’s fields being passed as request parameters in a </span><b>client SDK</b><span style="font-weight: 400;">. </span></p>
<p class=""><i><span style="font-weight: 400;">This blog is the first part of a series on how optional and nullable properties can be used flexibly and in multiple combinations to cater to each parameter of your API requests. </span></i></p>

<h2 class=""><strong>Required, Optional, and Nullable Properties in OpenAPI</strong></h2>
<p class=""><span style="font-weight: 400;">The </span><a href="https://github.com/OAI/OpenAPI-Specification"><span style="font-weight: 400;">OpenAPI Specification</span></a> <span style="font-weight: 400;">is a simple yet powerful way of describing RESTful APIs, in a machine and human-readable format, using JSON or YAML.</span><span style="font-weight: 400;"> OpenAPI has some examples of Uber’s API listed down </span><a href="https://github.com/OAI/OpenAPI-Specification/blob/main/examples/v2.0/json/uber.json"><span style="font-weight: 400;">in their repository</span></a> <span style="font-weight: 400;">to help understand how the endpoint is specified with OpenAPI. </span></p>
<p class=""><span style="font-weight: 400;">The OpenAPI specification allows defining parameters for an operation or path. Parameters can be of different types i.e header, query, cookies, path parameters.</span></p>

<h3 class=""><b>Required Parameters</b></h3>
<p class=""><span style="font-weight: 400;">One of the attributes that can be defined for these parameters is</span><b> “required”</b><span style="font-weight: 400;"> which simply means whether it is a </span><i><span style="font-weight: 400;">required </span></i><span style="font-weight: 400;">parameter or an </span><i><span style="font-weight: 400;">optional </span></i><span style="font-weight: 400;">one. Let&#8217;s take a look at an example of Uber’s </span><a href="https://developer.uber.com/docs/riders/references/api/v1.2/products-get"><span style="font-weight: 400;">Get Products</span></a><span style="font-weight: 400;"> endpoint specification:</span></p>

<pre class=""><code class="language-json">"paths": {
	"/products": {
  	"get": {
        ...
        "parameters": [
            {
                "name": "latitude",
                "in": "query",
                "description": "Latitude component of location.",
                "required": true,
                "style": "form",
                ...
            },
            {
                "name": "longitude",
                "in": "query",
                "description": "Longitude component of location.",
                "required": true,
                "style": "form",
                ...
            }
    	]
  	    }
      }
  }</code></pre>
<p class=""><span style="font-weight: 400;">You can get more details </span><span style="font-weight: 400;">regarding </span><a href="https://swagger.io/docs/specification/describing-parameters/"><span style="font-weight: 400;">Required and Optional Parameters</span></a> <span style="font-weight: 400;">in the official OAS document.</span></p>

<h3 class=""><b>Nullable Parameters</b></h3>
<p class=""><span style="font-weight: 400;">OpenAPI supports values of data types to be null. To specify, one can use the </span><b>“</b><span style="font-weight: 400;">nullable: true</span><b>” </b><span style="font-weight: 400;">property while defining a data type in OAS version 3.0.0. Let&#8217;s look at the definition of the </span><code>Profile</code> <span style="font-weight: 400;">schema that is defined for the response that we receive for the endpoint </span><a href="https://developer.uber.com/docs/riders/references/api/v1.2/me-get#resource"><span style="font-weight: 400;">User Profile</span></a>. <span style="font-weight: 400;">The attribute </span><code>promo_code</code><span style="font-weight: 400;"> is nullable here:</span></p>

<pre class=""><code class="language-json">"Profile": {
	"title": "Profile",
	"required": [
  	"middle_name",
  	"rider-id"
	],
	"type": "object",
	"properties": {
        "first_name": {
            "type": "string",
            "description": "First name of the Uber user."
        },
        ...
        "promo_code": {
            "type": "string",
            "nullable": "true",
            "description": "Promo code of the Uber user."
        }
    }
}</code></pre>
<p class=""><span style="font-weight: 400;">For more detail, please refer to the </span><a href="https://swagger.io/docs/specification/data-models/data-types/"><span style="font-weight: 400;">Null Property</span></a> <span style="font-weight: 400;">section in the OAS document.</span></p>

<h2 class=""><strong>Optional and Nullable Properties in APIMatic&#8217;s Client SDKs</strong></h2>
<p class=""><span style="font-weight: 400;"><a href="https://apimatic.io/">APIMatic</a> is a developer experience platform that focuses on increasing your API’s adoption with comprehensive documentation, multi-language SDKs, and much more. The SDKs are autogenerated for your API and contain support for optional and nullable properties, that are translated from your OpenAPI specification file. </span></p>
<p class=""><span style="font-weight: 400;">The client SDK is built up of a multitude of endpoints sending data from client to server with the help of parameters. Those parameters can be sent in different parts of a request and hence they are distinguished on the location in which they are sent. Endpoint parameters can be of four types:</span></p>

<ol class="">
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Query parameters</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Path parameters </span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Body parameters</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Form parameters</span></li>
</ol>
<p class=""><span style="font-weight: 400;">These parameters can have multiple properties associated with them like their schema, description, summary, and more. </span><b>Required </b><span style="font-weight: 400;">and </span><b>nullable </b><span style="font-weight: 400;">are two of those properties that can be set for these parameters. </span></p>
<p class=""><span style="font-weight: 400;">During client and server communication, data is serialized from object to JSON string and gets deserialized from JSON string to an object. The data being passed in the parameters can be a simple field, or a model containing multiple fields. Model fields can have </span><em>required</em> <span style="font-weight: 400;">and </span><em>nullable</em> <span style="font-weight: 400;">properties in the same way as a request parameter itself. Regardless of the type of data being passed, </span><em>optional</em> <span style="font-weight: 400;">and </span><em>nullable</em> <span style="font-weight: 400;">is in context to the representation of that data in JSON string during serialization.</span></p>
<p class=""><span style="font-weight: 400;">An</span><strong> o</strong><span style="font-weight: 400;"><strong>ptional</strong> </span><span style="font-weight: 400;">property means that it may or may not be present in the resultant JSON string, while a </span><span style="font-weight: 400;"><strong>required</strong> </span><span style="font-weight: 400;">property means that it will always be present in the JSON string. </span><span style="font-weight: 400;"><strong>Nullable</strong> </span><span style="font-weight: 400;">means that if the property is present in JSON, it can hold a null value, and </span><strong>non-nullable</strong><span style="font-weight: 400;"> means that the value of that property cannot be null in the JSON string. Therefore, we can formulate a total of four combinations for this:</span></p>

<h3><b>1. Optional Nullable</b></h3>
<p class=""><span style="font-weight: 400;">If a field (whether it is a parameter or a part of a model) is uninitialized, i.e., not specified, then </span><span style="font-weight: 400;">it should be ignored in the JSON string during serialization. If it is initialized and assigned a null value explicitly, then it should be represented in the JSON string. </span></p>
<p class=""><span style="font-weight: 400;">Let&#8217;s consider the example of a model/definition </span><code>Profile</code><span style="font-weight: 400;"> which consists of the following fields:</span></p>

<pre class=""><code class="language-c">Profile
{
   string picture;
   string first_name;
   string middle_name;
   string last_name;
   string uuid;
   string rider_id;
   string email;
   bool mobile_verified;
   string promo_code;
}</code></pre>
<p class=""><span style="font-weight: 400;">Its OpenAPI specification looks like this:</span></p>

<pre class=""><code class="language-json">"Profile": {
	"title": "Profile",
	"required": ["middle_name", "rider-id"],
	"type": "object",
	"properties": {
  	"first_name": {
    	"type": "string",
    	"description": "First name of the Uber user."
  	},
  	"last_name": {
    	"type": "string",
    	"description": "Last name of the Uber user."
  	},
  	"middle_name": {
    	"type": "string",
    	"nullable": "true",
    	"description": "Last name of the Uber user."
  	},
  	"email": {
    	"type": "string",
    	"description": "Email address of the Uber user"
  	},
        "mobile_verified": {
    	"type": "boolean",
    	"description": "Mobile verification of Uber user"
  	},
  	"rider-id": {
    	"type": "string",
    	"description": "Rider id of the Uber user"
  	},
  	"picture": {
    	"type": "string",
    	"description": "Image URL of the Uber user."
  	},
  	"promo_code": {
    	"type": "string",
    	"nullable": "true",
    	"description": "Promo code of the Uber user."
  	}
    }
}</code></pre>
<p class=""><span style="font-weight: 400;">During the instantiation of <code>Profile</code>, if  </span><code>promo_code</code><b> </b><span style="font-weight: 400;">is initialized with a null value in the client SDK and sent in the request, the resultant JSON string after serialization will hold its null value as its nullable property:</span></p>

<pre class=""><code class="language-json">{
    "picture": "https://d1w2poirtb3as9.cloudfront.net/f3be498cb0bbf570aa3d.jpeg",
    "first_name": "Uber",
    ...
    "mobile_verified": true,
    "promo_code": "null"
}</code></pre>
<p class=""><span style="font-weight: 400;">If </span><code>promo_code</code><b> </b><span style="font-weight: 400;">is uninitialized during the <code>Profile</code> instantiation for the request, the resultant JSON will ignore <code>promo_code</code>, as it was an </span><b>optional </b><span style="font-weight: 400;">field.</span></p>

<pre class=""><code class="language-json">{
    "picture": "https://d1w2poirtb3as9.cloudfront.net/f3be498cb0bbf570aa3d.jpeg",
    "first_name": "Uber",
    ...
    "mobile_verified": true,
}</code></pre>
<p class=""><span style="font-weight: 400;">If  </span><code>promo_code</code><b> </b><span style="font-weight: 400;">is initialized with a proper value during the <code>Profile</code> instantiation for sending it in the request, the resultant JSON will include the field as specified:</span></p>

<pre class=""><code class="language-json">{
    "picture": "https://d1w2poirtb3as9.cloudfront.net/f3be498cb0bbf570aa3d.jpeg",
    "first_name": "Uber",
    ...
    "mobile_verified": true,
    "promo_code": "uberd340ue"
}</code></pre>
<h3><b>2. Optional Non-Nullable</b></h3>
<p class=""><span style="font-weight: 400;">If a field (whether it’s a parameter or a part of the model) is uninitialized, i.e., not specified, then </span><span style="font-weight: 400;">it should be ignored in JSON string during serialization but as it can not be initialized with a null value, hence we should ignore it JSON. Let’s look at the </span><code>Profile</code> <span style="font-weight: 400;">JSON schema again, where the attribute </span><code>picture</code><b> </b><span style="font-weight: 400;">is optional non-nullable as specified in the OAS of Profile. </span></p>
<p class=""><span style="font-weight: 400;">If </span><code>picture</code><span style="font-weight: 400;"> is initialized with a non-null value when sending it in a request, the resultant JSON string will look like this:</span></p>

<pre class=""><code class="language-json">{
    "picture": "https://d1w2poirtb3as9.cloudfront.net/f3be498cb0bbf570aa3d.jpeg",
    "first_name": "Uber",
    "middle_name": "null",
    "last_name": "Developer",
    "uuid": "f4a416e3-6016-4623-8ec9-d5ee105a6e27",
     ...
}</code></pre>
<p class=""><span style="font-weight: 400;">If </span><b><code>picture</code> </b><span style="font-weight: 400;">is initialized with a <strong>null</strong> value, it can be ignored in the resultant JSON as it is an optional attribute.</span></p>

<pre class=""><code class="language-json">{
    "first_name": "Uber",
    "middle_name": "null",
    "last_name": "Developer",
    "uuid": "f4a416e3-6016-4623-8ec9-d5ee105a6e27",
     ...
}</code></pre>
<h3 class=""><b>3. Required Nullable</b></h3>
<p class=""><span style="font-weight: 400;">Required Nullable attributes will always become part of the resultant JSON string as they are required. It will always be included in the JSON, whether it has a null or non-null value. </span><span style="font-weight: 400;">Let&#8217;s consider the </span><code>middle_name</code><b> </b><span style="font-weight: 400;">as a </span><strong>required nullable </strong><span style="font-weight: 400;">attribute.</span></p>
<p class=""><span style="font-weight: 400;">If </span><code>middle_name</code><b> </b><span style="font-weight: 400;">is initialized with a null value or uninitialized in the request, its JSON output will be:</span></p>

<pre class=""><code class="language-">{
   ...
    "middle_name": "Software",
    "last_name": "Developer",
    "uuid": "f4a416e3-6016-4623-8ec9-d5ee105a6e27",
   ...
}</code></pre>
<p class=""><span style="font-weight: 400;">If </span><code>middle_name</code><b> </b><span style="font-weight: 400;">is initialized with a proper value, the resultant JSON will be:</span></p>

<pre class=""><code class="language-json">{
    ...
    "middle_name": "faloola",
    "last_name": "Developer",
    "uuid": "f4a416e3-6016-4623-8ec9-d5ee105a6e27",
    ...
}</code></pre>
<h3><b>4. Required Non-Nullable</b></h3>
<p class=""><span style="font-weight: 400;">Required Non-Nullable attributes are also a </span><b>must </b><span style="font-weight: 400;">in JSON string during serialization. A null value is not allowed to be specified as <em>required</em> so it cannot be ignored. </span></p>
<p class=""><span style="font-weight: 400;">The </span><code>rider_id</code><b> </b><span style="font-weight: 400;">is a non-nullable attribute in the </span><span style="font-weight: 400;">Profile </span><span style="font-weight: 400;">schema. The null value cannot be specified in this case, and with a non-null value its resultant JSON will be:</span></p>

<pre class=""><code class="language-json">{
    "picture": "https://d1w2poirtb3as9.cloudfront.net/f3be498cb0bbf570aa3d.jpeg",
    "first_name": "Uber",
    "middle_name": "null",
    "last_name": "Developer",
    "uuid": "f4a416e3-6016-4623-8ec9-d5ee105a6e27",
    "rider_id": "8OlTlUG1TyeAQf1JiBZZdkKxuSSOUwu2IkO0Hf9d2HV52Pm25A0NvsbmbnZr85tLVi-s8CckpBK8Eq0Nke4X-no3AcSHfeVh6J5O6LiQt5LsBZDSi4qyVUdSLeYDnTtirw==",
    "email": "uberdevelopers@gmail.com",
    "mobile_verified": true,
    "promo_code": "uberd340ue"
}</code></pre>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">

<hr />

</div>
</div>
<h2 class=""><strong>Conclusion</strong></h2>
<p class=""><span style="font-weight: 400;">It is entirely up to you how you incorporate the optional and nullable properties in your API calls. It is essential to handle null reference exceptions being thrown to the end-user, to avoid any unpleasant experience with your API. Learn more about what APIMatic offers for a comprehensive <a href="https://www.apimatic.io/features/">developer experience</a> and how you can generate feature-packed <a href="https://www.apimatic.io/account/register">SDKs with your API</a> in just a few clicks. Stay tuned for more blogs that go into detail on how optional and nullable properties can be implemented in Java, C#, Python, Ruby, PHP, and TypeScript.</span></p>

</div>
</div>
</div>
</div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/2021/09/using-optional-and-nullable-properties-in-api-requests/">Using Optional and Nullable Properties in API Requests</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>The Great SDK Battle: Build vs Buy</title>
		<link>/blog/2021/09/the-great-sdk-battle-build-vs-buy/</link>
		
		<dc:creator><![CDATA[Mehdi Raza Jaffery]]></dc:creator>
		<pubDate>Wed, 08 Sep 2021 08:10:28 +0000</pubDate>
				<category><![CDATA[APIMATIC]]></category>
		<category><![CDATA[CodeGen]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[auto-generated SDKs]]></category>
		<category><![CDATA[Code Generation]]></category>
		<category><![CDATA[Sdks]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1407</guid>

					<description><![CDATA[<p>In this API-driven era, offering just an API won’t cut it anymore. The APIs need proper documentation, helping code samples, and SDKs to ensure that the end-user quickly gets to the first Hello World. While an SDK is a “make-it-or-break-it” deal for your API, it is just as difficult to get it right. Engineering the [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/2021/09/the-great-sdk-battle-build-vs-buy/">The Great SDK Battle: Build vs Buy</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1407" class="elementor elementor-1407">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-1ed8f23b elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="1ed8f23b" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-694f00b6" data-id="694f00b6" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-4dcf0310 elementor-widget elementor-widget-text-editor" data-id="4dcf0310" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class=""><img class="wp-image-1431 aligncenter" src="/wp-content/uploads/2021/12/build-vs-buy-1024x367.png" alt="SDKs: Build vs Buy" width="700" height="251"></p>
<p class=""><span style="font-weight: 400;">In this API-driven era, offering just an API won’t cut it anymore. The APIs need proper documentation, helping code samples, and SDKs to ensure that the end-user quickly gets to the first </span><i><span style="font-weight: 400;">Hello World</span></i><span style="font-weight: 400;">. While an SDK is a “make-it-or-break-it” deal for your API, it is just as difficult to get it right. Engineering the SDK is only the first step of this cycle. Once your SDK is published, it needs to be maintained consistently with each bug fix, feature, or new API version.</span></p>
<p class=""><em><span style="font-weight: 400;">This blog is the first part of a series on what goes behind SDK creation and maintenance.&nbsp;</span></em></p>

<h2 class=""><b>What to Look Out For While Creating SDKs?</b></h2>
<p class=""><span style="font-weight: 400;">From an engineering perspective, each phase of building an SDK is crucial and comes with its own set of challenges. In time-critical situations, you may overlook some issues that can impact your SDK’s usability and maintainability in the long run. Hence, while creating SDKs, you need to address these issues for </span><b>each API, in each language</b><span style="font-weight: 400;">:</span></p>

<h3 class=""><b>&nbsp;Step 1: Designing an SDK</b></h3>
<ul class="">
 	<li style="font-weight: 400;" aria-level="1"><b>Structure: <span style="font-weight: 400;">Need to design SDKs for the user, for future extensibility.</span></b></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Language versions:</b><span style="font-weight: 400;"> What min/max versions to support? What are the version-specific issues and your upgrade policy?</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Dependencies: <span style="font-weight: 400;">This includes fixes, workarounds, limitations, quality, upgrade policy, language support.</span></b></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Guidelines: <span style="font-weight: 400;">The design, linting, and static analysis guidelines to apply throughout the codebase.</span></b></li>
</ul>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">

<hr>

</div>
</div>
<h3 class=""><b>Step 2: Implementing the SDK</b></h3>
<ul class="">
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Translate schema to concrete types</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Implementing API calls</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Wrap HTTP implementation in an HTTP layer as HTTP clients come and go, so you may consider a middleware arch</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Handle cancellation of API calls</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Handle API/transient errors and recover gracefully</span><span style="font-weight: 400;">&nbsp;(timeout, retries)</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Handle concurrency via thread-safe calls or chaining</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Handle response caching</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Handle API throttling</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Create interfaces for extension</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Log important events (integrate into system logging)</span></li>
</ul>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">

<hr>

</div>
</div>
<h3 class=""><b>Step 3: Testing the SDK</b></h3>
<ul class="">
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Testing all parts of the SDK code</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Cross-platform/version testing against different language versions, OSes</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Integration tests (end-to-end testing of SDKs)</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Testing your code generator (if you&#8217;re using one)</span></li>
</ul>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">

<hr>

</div>
</div>
<h3><b>Step 4: Writing SDK Reference</b></h3>
<ul class="">
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Writing getting started guides</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Writing usage examples for every endpoint</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Creating a reference website for the SDK user</span></li>
 	<li aria-level="1"><span style="font-weight: 400;">Creating sample applications (in addition to the code samples per endpoint) to get started quickly</span></li>
</ul>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">

<hr>

</div>
</div>
<h3 class=""><b>Step 5: Packaging/Publishing the SDKs</b></h3>
<ul class="">
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Publishing packages on package repositories</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Recreating bugs reports</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Handling customer issues and feedback related to SDK on GitHub or other forums</span></li>
</ul>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">

<hr>

</div>
</div>
<p class=""><span style="font-weight: 400;">The engineering effort required to maintain the SDK program explodes with the number of supported languages, as all the steps mentioned above for creating <b>one</b> SDK will need to be done for <b>each API and each language, every time</b>. Careful planning can reduce some of this cost, but the perpetual maintenance cost will still exist.</span></p>
<p class=""><img class="aligncenter wp-image-1426 " src="/wp-content/uploads/2021/12/SDK-1024x676.png" alt="SDK Maintenance" width="381" height="252"></p>

<h2 class=""><b>Why Do SDKs Need Maintenance?</b></h2>
<p class=""><span style="font-weight: 400;">Once you’ve successfully implemented and published your SDK, the endless cycle of maintenance begins. Maintenance is required from an engineering as well as a business perspective, hence making the cost of maintenance much higher than the development cost, as again, this applies to the SDKs of <strong>each language per API</strong>.</span></p>

<h3 class=""><b>Maintenance From Engineering Perspective</b></h3>
<p class=""><span style="font-weight: 400;">If you think creating an SDK is enough, updating it is much more resource and time-intensive. Technology and APIs are continuously evolving, and SDKs need to keep up with them. You will need to update your SDKs (on time!) for the following reasons:</span></p>

<ol class="">
 	<li style="font-weight: 400;" aria-level="1"><b>Updates to the API</b><span style="font-weight: 400;">: With every update to the API, the SDKs need to be updated for all languages simultaneously or the SDKs will lag behind the API updates.</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>New language or framework versions: </b><span style="font-weight: 400;">This occurs more often than you realize and is a major operational burden.</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Language ecosystem evolution:</b><span style="font-weight: 400;"> New IDEs, new build tools, major fragmentation in the ecosystem requires constant maintenance.</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>New dependency versions</b><span style="font-weight: 400;">: This results in more fixes, updates, security fixes, development of supported features.</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Bug fixes in the SDK:</b><span style="font-weight: 400;"> You need to test and fix bugs continuously to ensure no blockers occur at the user’s end, negatively impacting your API’s experience.</span></li>
</ol>
<h3 class=""><b>Maintenance From Business POV</b></h3>
<p class=""><span style="font-weight: 400;">Apart from the high maintenance required by your SDKs to tackle engineering concerns, you also need to consider business-oriented issues that may affect your SDK delivery and performance:&nbsp;&nbsp;</span></p>

<ol class="">
 	<li style="font-weight: 400;" aria-level="1"><b>Lock-in on internal SDK team: </b><span style="font-weight: 400;">A custom internal tool or process that requires maintenance and a lot of engineering time/resources.</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Speed of update:</b><span style="font-weight: 400;"> SDKs and documentation lagging behind API releases unless you write a general-purpose code generator.</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Opportunity cost:</b><span style="font-weight: 400;"> Can other areas in your API program use this engineering time?</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Time-to-market:</b><span style="font-weight: 400;"> If you&#8217;re just starting with building SDKs, when will they be available and what do you do in the meantime?</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Operational burden:</b><span style="font-weight: 400;"> Reduces developer velocity and happiness over time due to fighting fires, adds project risk to API program, increases costs for the organization.</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Operational excellence:</b><span style="font-weight: 400;"> Can you achieve the same level of quality and attention to detail compared to a company that exists only for creating SDKs?</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Keeping the SDK program running:</b><span style="font-weight: 400;"> Maintaining SDKs takes time and energy. Building it isn’t where most of the expense lies. Instead, that comes with running and maintaining complicated processes and tools behind the SDK program.</span></li>
</ol>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">

<hr>

</div>
</div>
<p class=""><span style="font-weight: 400;">According to </span><a href="https://www.bls.gov/ooh/computer-and-information-technology/software-developers.htm"><span style="font-weight: 400;">bls.gov</span></a><span style="font-weight: 400;">, the median salaries in 2020 were as follows:</span></p>

<ul class="">
 	<li><span style="font-weight: 400;">Developer: $110,140 per year</span></li>
 	<li><span style="font-weight: 400;">Tester: $110,140 per year</span></li>
 	<li><span style="font-weight: 400;">Technical Writer: $74,650 per</span></li>
</ul>
<p class=""><span style="font-weight: 400;">To make things simple, let’s assume that building a <strong>single SDK for 1 API in just one language</strong> (including research, documentation, and testing) takes 4 weeks to build. This makes the upfront cost around $22,687. Now add in the maintenance time to 2-3 days per month, and SDK maintenance can go up to $29,089, bringing the total to $51,776. Hence, building and maintaining <strong>a single SDK</strong> in a fairytale situation, without any hiccups, can cost around $52,000.</span></p>
<p class=""><span style="font-weight: 400;">Now imagine if you&#8217;re building SDKs for 8 languages for 10 APIs, this will skyrocket this figure to almost $4M.&nbsp;</span></p>


<figure id="attachment_1434" aria-describedby="caption-attachment-1434" style="width: 601px" class="wp-caption aligncenter"><img class="wp-image-1434 " src="/wp-content/uploads/2021/12/TotalCost-01-2-1024x576.png" alt="Total Cost to Build 1 SDK in 1 Language" width="601" height="338"><figcaption id="caption-attachment-1434" class="wp-caption-text">Total Cost to Build 1 SDK in 1 Language per API</figcaption></figure>
<h2 class=""><b>APIMatic as a Code Generator</b></h2>
<p class=""><span style="font-weight: 400;">You can choose to address all of the aforementioned issues yourself and write the SDK code by hand, or even try to solve your problems using an in-house code generator, but the process itself is quite hard and can take up to years to streamline. Not to forget the time and resource overhead involved. However, </span><a href="https://apimatic.io/"><span style="font-weight: 400;">APIMatic</span></a> <span style="font-weight: 400;">can handle these issues automatically at the back-end for you, while you focus on building new solutions. APIMatic’s flagship code generator creates SDKs for multiple languages, including:</span></p>

<ul class="">
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">PHP&nbsp;</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Ruby</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Python</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">C# (.NET)</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Java</span></li>
 	<li aria-level="1">Typescript (coming soon)</li>
</ul>
<p class=""><span style="font-weight: 400;">These SDKs are featured packed with thread-safe configurations, retries, logging, and more. The SDKs accurately map your API definition files into helper classes, model classes, exception classes, and controllers. APIMatic also creates comprehensive, language-specific guides with the SDKs that contain tailored tutorials based on your language and popular IDEs to help users easily get started with the SDK in their applications. For more detail, read here on </span><a href="https://docs.apimatic.io/generate-sdks/overview-sdks/"><span style="font-weight: 400;">APIMatic SDKs</span></a>.</p>
<p class=""><span style="font-weight: 400;">APIMatic creates SDKs from </span><b>OpenAPI 2.0 and 3.0, API Blueprint</b><span style="font-weight: 400;">, </span><b>RAML</b><span style="font-weight: 400;"> as well as several other popular </span><a href="https://www.apimatic.io/transformer/"><span style="font-weight: 400;">API specification formats</span></a><span style="font-weight: 400;">.</span></p>

<h3 class=""><b>Reduce Time to Market</b></h3>
<p class=""><span style="font-weight: 400;">Internal SDK programs can become costly to maintain over time due to churn (new API versions, language features, and library versions or API program engineering turnover). If you are forking open-source code generators, it means you will be maintaining all the custom templates and syncing your project with the upstream for fixes/bugs perpetually. Also, there is no customer support.</span></p>
<p class=""><span style="font-weight: 400;">APIMatic significantly cuts down on costs and time for creating and maintaining SDKs in any language. You only bring in your API specification file and roll out your updated</span><span style="font-weight: 400;"> SDKs in minutes, rather than weeks, months, or years.&nbsp;</span></p>

<h3 class="">Automate SDK Generation and Maintenance</h3>
<p class="">APIMatic offers programmatic access to their flagship Code Generator, which allows integrating the autogeneration of SDKs directly into your CI/CD pipelines. So every time the API is updated, the corresponding updated SDKs are automatically generated, without any manual interference. Learn more about how APIMatic offers <a href="https://www.apimatic.io/continuous-code-generation">CodeGen-as-a-Service</a>.</p>

<h3 class=""><b>Ensure Robustness with Battle-Tested SDKs</b></h3>
<p class=""><span style="font-weight: 400;">SDKs generated by APIMatic are already deployed by large companies and installed several million times, meaning that the SDKs are reviewed by a larger user base that helps us design better SDKs.</span></p>

<h2 class=""><strong>To Sum It Up</strong></h2>
<p class=""><span style="font-weight: 400;">Creating SDKs in multiple languages is quite resource-intensive and expensive. Apart from just development, a major chunk of time and resources is spent on maintaining the SDKs, both from an engineering and business point of view, for all languages for each API. APIMatic is a developer experience platform that takes care of all the SDK generation and maintenance work behind the scenes while your developers can focus on their applications and innovative solutions. See firsthand how APIMatic can help <a href="https://www.apimatic.io/account/register">enhance your developer experience</a>.</span></p>
<p class="">&nbsp;</p>

</div>
</div>
</div>
</div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/2021/09/the-great-sdk-battle-build-vs-buy/">The Great SDK Battle: Build vs Buy</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
