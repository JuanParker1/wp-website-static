
<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Releases Archives - APIMatic</title>
	<atom:link href="/blog/category/releases/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>APIMatic is an API documentation tool that provides a complete set of DX components such as autogenerated SDKs, API portal, API docs, live code samples, and more.</description>
	<lastBuildDate>Sun, 24 Apr 2022 01:28:37 +0000</lastBuildDate>
	<language>en</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.9.3</generator>

<image>
	<url>/wp-content/uploads/2021/10/cropped-cropped-apimaticio-favicon-1-32x32.png</url>
	<title>Releases Archives - APIMatic</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>OpenAPI 3.1 &#8211; What&#8217;s New, and How to Migrate to/from Other API Specs?</title>
		<link>/blog/2021/09/introducing-openapi-3-1-support-in-apimatic/</link>
		
		<dc:creator><![CDATA[Ali Raza]]></dc:creator>
		<pubDate>Tue, 21 Sep 2021 12:40:43 +0000</pubDate>
				<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[APIMATIC]]></category>
		<category><![CDATA[OpenAPI]]></category>
		<category><![CDATA[Releases]]></category>
		<category><![CDATA[API Specification]]></category>
		<category><![CDATA[Api Specs]]></category>
		<category><![CDATA[APIMatic Supported Specs]]></category>
		<category><![CDATA[OpenAPI 3.1]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1461</guid>

					<description><![CDATA[<p>The OpenAPI Initiative announced the latest API specification format OpenAPI 3.1 earlier this year. OpenAPI 3.1 introduces multiple new functionalities and improvements compared to the previous OpenAPI versions, which is why this upgrade is expected to have a higher adoption rate. We are excited to announce the support for OpenAPI 3.1 as APIMatic’s latest supported [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/2021/09/introducing-openapi-3-1-support-in-apimatic/">OpenAPI 3.1 &#8211; What&#8217;s New, and How to Migrate to/from Other API Specs?</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1461" class="elementor elementor-1461">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-2a51f48e elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="2a51f48e" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-30d8c0c6" data-id="30d8c0c6" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-6b60005c elementor-widget elementor-widget-text-editor" data-id="6b60005c" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
			<style>/*! elementor - v3.6.4 - 13-04-2022 */
.elementor-widget-text-editor.elementor-drop-cap-view-stacked .elementor-drop-cap{background-color:#818a91;color:#fff}.elementor-widget-text-editor.elementor-drop-cap-view-framed .elementor-drop-cap{color:#818a91;border:3px solid;background-color:transparent}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap{margin-top:8px}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap-letter{width:1em;height:1em}.elementor-widget-text-editor .elementor-drop-cap{float:left;text-align:center;line-height:1;font-size:50px}.elementor-widget-text-editor .elementor-drop-cap-letter{display:inline-block}</style>				<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12" data-wp-editing="1">
<p class=""><img class="aligncenter wp-image-1474" src="/wp-content/uploads/2021/12/introducing-openapi-3-1-in-apimatic-1024x538.png" alt="OpenAPI 3.1 - What's New and How to Migrate to/from Other API Specs? " width="535" height="281"></p>
<p class=""><span style="font-weight: 400;">The OpenAPI Initiative </span><a href="https://www.openapis.org/blog/2021/02/18/openapi-specification-3-1-released"><span style="font-weight: 400;">announced</span></a> <span style="font-weight: 400;">the latest API specification format </span><a href="https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md"><span style="font-weight: 400;">OpenAPI 3.1</span></a><span style="font-weight: 400;"> earlier this year. OpenAPI 3.1 introduces multiple new functionalities and improvements compared to the previous OpenAPI versions, which is why this upgrade is expected to have a higher adoption rate.&nbsp;</span></p>
<p class=""><span style="font-weight: 400;">We are excited to announce the support for OpenAPI 3.1 as APIMatic’s latest supported API specification format, which can be used throughout </span><a href="https://www.apimatic.io/"><span style="font-weight: 400;">APIMatic</span></a><span style="font-weight: 400;">’s solutions like API transformation, API Portal generation, and SDK generation.</span></p>

<h2 class=""><strong>How Does APIMatic Support OpenAPI 3.1?</strong></h2>
<p class=""><span style="font-weight: 400;">OpenAPI 3.1 can be used in APIMatic to perform any API transformation or to generate API portals and SDKs.</span></p>

<h3 class=""><strong>API Specification Transformation</strong></h3>
<p class=""><span style="font-weight: 400;">APIMatic supports transformations between different API specification formats. If you haven’t jumped on the OpenAPI 3.1 bandwagon yet, you can transform your existing API definition file into OAS 3.1, or convert an OpenAPI 3.1 file to any </span><a href="https://www.apimatic.io/transformer/#supported-formats"><span style="font-weight: 400;">supported format</span></a><span style="font-weight: 400;">.</span></p>

<h3 class=""><strong>API Portal and SDK Generation</strong></h3>
<p class=""><span style="font-weight: 400;">APIMatic’s Code Generator and Docs Generator also support OpenAPI 3.1 definition files. You can import your OpenAPI 3.1 file so as to generate the developer-friendly </span><a href="https://www.apimatic.io/developer-experience-portal/"><span style="font-weight: 400;">API Portal</span></a> <span style="font-weight: 400;">or to generate feature-rich SDKs in any </span><a href="https://docs.apimatic.io/generate-sdks/supported-sdk-version-dependencies/#supported-sdk-language-versions"><span style="font-weight: 400;">language supported</span></a> <span style="font-weight: 400;">by APIMatic.</span></p>

<h2 class=""><strong>Behind the Scenes of Mapping OpenAPI 3.0 to OpenAPI 3.1 in APIMatic</strong></h2>
<p class=""><span style="font-weight: 400;">Let’s dive in to see the process of how each component of OpenAPI 3.0 is actually mapped to the corresponding component in OpenAPI 3.1 with </span><a href="https://www.apimatic.io/transformer/"><span style="font-weight: 400;">APIMatic Transformer</span></a><span style="font-weight: 400;">.</span></p>
<p class=""><span style="font-weight: 400;">The major difference between both formats is related to the </span><b>Schema Object</b><span style="font-weight: 400;">. Previously, the </span><a href="https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.0.md#schemaObject"><span style="font-weight: 400;">OpenAPI 3.0 Schema Object</span></a> <span style="font-weight: 400;">was an extended subset of JSON Schema Specification </span><a href="http://json-schema.org/"><span style="font-weight: 400;">Wright Draft 00</span></a><span style="font-weight: 400;">, however, the </span><a href="https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schemaObject"><span style="font-weight: 400;">OpenAPI 3.1 Schema Object</span></a><span style="font-weight: 400;"> is a superset of JSON Schema Specification </span><a href="https://datatracker.ietf.org/doc/html/draft-bhutton-json-schema-00"><span style="font-weight: 400;">Draft 2020-12</span></a><span style="font-weight: 400;"> by default</span><span style="font-weight: 400;">.</span></p>
<p class=""><span style="font-weight: 400;">Having said that,</span><span style="font-weight: 400;"> you can also use any valid JSON Schema as a Schema Object in OpenAPI 3.1 with </span><a href="http://json-schema.org/understanding-json-schema/reference/schema.html#:~:text=A%20version%20of%20JSON%20Schema,new%20dialect%20of%20JSON%20Schema."><span style="font-weight: 400;">JSON Schema Dialect</span></a><span style="font-weight: 400;"> declared in either JSON Schema or in </span><code>jsonSchemaDialect</code><span style="font-weight: 400;">&nbsp;field in the root OpenAPI 3.1 specification, for that matter.</span></p>
<span style="font-weight: 400;">Now let’s start looking into the mapping of some of the most widely used components of OpenAPI 3.0 to OpenAPI 3.1 one by one:</span>
<h3 class=""><strong>Root Object</strong></h3>
<p class=""><span style="font-weight: 400;">OpenAPI 3.1 has two additional root components </span><code>jsonSchemaDialect</code><span style="font-weight: 400;"> and </span><code>webhooks</code><span style="font-weight: 400;">&nbsp;as shown in the diagram below.</span></p>
<p class=""><span style="font-weight: 400;">APIMatic Transformer sets <code>jsonSchemaDialect</code> </span><span style="font-weight: 400;">&nbsp;to “</span><a href="https://json-schema.org/draft/2020-12/schema"> <code>https://json-schema.org/draft/2020-12/schema</code></a><span style="font-weight: 400;">” in the exported OpenAPI 3.1 file since the exported file always contains Schema Objects which conform to JSON Schema Specification Draft 2020-12.</span></p>


<figure id="attachment_1467" aria-describedby="caption-attachment-1467" style="width: 581px" class="wp-caption aligncenter"><img class="wp-image-1467 " src="/wp-content/uploads/2021/12/root-objects.png" alt="Difference between Root Objects of OpenAPI 3.0 and OpenAPI 3.1" width="581" height="418"><figcaption id="caption-attachment-1467" class="wp-caption-text">Difference between Root Objects of OpenAPI 3.0 and OpenAPI 3.1</figcaption></figure>
<h3 class=""><strong>Info Object</strong></h3>
<p class=""><span style="font-weight: 400;">The </span><a href="https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#infoObject"><span style="font-weight: 400;">Info Object in OpenAPI 3.1</span></a><span style="font-weight: 400;"> is a superset of the </span><a href="https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.0.md#infoObject"><span style="font-weight: 400;">Info Object in OpenAPI 3.0</span></a><span style="font-weight: 400;"> having an additional </span><span style="font-weight: 400;">summary</span><span style="font-weight: 400;"> field. The APIMatic Transformer maps the Info Object’s data from OpenAPI 3.0 to OpenAPI 3.1.</span></p>
<p class=""><span style="font-weight: 400;">Difference between Info Objects of OpenAPI 3.0 and OpenAPI 3.1</span></p>
<p class="mod-reset"><img class="aligncenter wp-image-1466 " src="/wp-content/uploads/2021/12/info-object-1.png" alt="Difference between Info Objects of OpenAPI 3.0 and OpenAPI 3.1" width="611" height="330"></p>
&nbsp;

<figure id="attachment_1465" aria-describedby="caption-attachment-1465" style="width: 605px" class="wp-caption aligncenter"><img class="wp-image-1465 " src="/wp-content/uploads/2021/12/info-object-2.png" alt="Difference between Info Objects of OpenAPI 3.0 and OpenAPI 3.1" width="605" height="265"><figcaption id="caption-attachment-1465" class="wp-caption-text">Difference between Info Objects of OpenAPI 3.0 and OpenAPI 3.1</figcaption></figure>
<h3 class=""><strong>Components Object</strong></h3>
<p class=""><a href="https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#componentsObject"><span style="font-weight: 400;">Components Object in OpenAPI 3.1</span></a><span style="font-weight: 400;"> is also a superset of the </span><a href="https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.0.md#componentsObject"><span style="font-weight: 400;">one in OpenAPI 3.0</span></a><span style="font-weight: 400;">, which contains an additional </span><code>pathItems</code><span style="font-weight: 400;">object. However, there is a major difference between both formats in terms of </span><span style="font-weight: 400;">Schema</span> <span style="font-weight: 400;">Objects</span><span style="font-weight: 400;"> inside </span><code>Schemas</code><span style="font-weight: 400;">, </span><code>Responses</code><span style="font-weight: 400;">, </span><span style="font-weight: 400;"><code>Parameters</code>, </span><span style="font-weight: 400;">and </span><code>RequestBodies</code><span style="font-weight: 400;"> Objects.</span></p>
<p class="mod-reset">&nbsp;</p>
<p class="mod-reset">&nbsp;</p>


<figure id="attachment_1464" aria-describedby="caption-attachment-1464" style="width: 576px" class="wp-caption aligncenter"><img class="wp-image-1464 " src="/wp-content/uploads/2021/12/component-objects.png" alt="Difference between Component Objects of OpenAPI 3.0 and OpenAPI 3.1" width="576" height="345"><figcaption id="caption-attachment-1464" class="wp-caption-text">Difference between Component Objects of OpenAPI 3.0 and OpenAPI 3.1</figcaption></figure>
<h3 class=""><strong>Schema objects</strong></h3>
<p class=""><span style="font-weight: 400;">As described above, the Schema Object in OpenAPI 3.0 is an extended subset of JSON Schema Specification Wright Draft 00 </span><span style="font-weight: 400;">that made it confusing for users as some things could follow JSON schema standards while others had to be done in OpenAPI&#8217;s style.</span><span style="font-weight: 400;"> However, the Schema Object of OpenAPI 3.1 (exported from APIMatic) is a superset of JSON Schema Specification Draft 2020-12.</span></p>
<p class=""><span style="font-weight: 400;">The new JSON Schema Draft 2020-12 has some major changes with respect to the old JSON Schema Draft 00. Thus, APIMatic Transformer converts this Schema Object from old to new JSON Schema Draft while mapping OpenAPI 3.0 to OpenAPI 3.1.</span></p>
<p class=""><span style="font-weight: 400;">Mappings of some widely used components from Json Schema Draft 00 to Draft 2020-12 are explained further:&nbsp;</span></p>

<h4 class=""><strong>Nullable flag</strong></h4>
<span style="font-weight: 400;">If your OpenAPI 3.0 Schema Object contains a </span><span style="font-weight: 400;">nullable</span><span style="font-weight: 400;"> field, it will be mapped to the “</span><span style="font-weight: 400;">null</span><span style="font-weight: 400;">” type in the list of types in OpenAPI 3.1’s Schema Object since the </span><span style="font-weight: 400;">nullable</span><span style="font-weight: 400;"> field is no longer allowed in JSON Schema Draft 2020-12 and must be declared as follows:</span>
<p class=""><strong>OpenAPI 3.0</strong></p>

<pre class=""><code class="language-yaml">requestBody: 
  content: 
    text/plain: 
      example: 3
      schema: 
        nullable: true
        type: integer
  required: true</code></pre>
<p class=""><strong>OpenAPI 3.1</strong></p>

<pre class=""><code class="language-yaml">requestBody:
  content:
    text/plain:
      schema:
        type:
        - integer
        - &#039;null&#039;
        contentEncoding: int32
        contentMediaType: text/plain
      example: 3
  required: true</code></pre>
<h4 class=""><strong>ExclusiveMinimum and ExclusiveMaximum</strong></h4>
<p class=""><span style="font-weight: 400;">In OpenAPI 3.0, </span><code>exclusiveMinimum</code><span style="font-weight: 400;"> and </span><code>exclusiveMaximum</code><span style="font-weight: 400;"> are of </span><code>Boolean</code><span style="font-weight: 400;"> type and are used in conjunction with </span><code>minimum</code><span style="font-weight: 400;"> and </span><code>maximum</code><span style="font-weight: 400;">&nbsp;respectively. However, in OpenAPI 3.1, <code>exclusiveMinimum</code> and <code>exclusiveMaximum</code> are of type </span><span style="font-weight: 400;">Number</span><span style="font-weight: 400;"> and will convey the same meaning as <code>exclusiveMinimum</code> does in conjunction with minimum or <code>exclusiveMaximum</code> with <code>maximum</code> respectively.&nbsp;</span></p>
<p class=""><strong>OpenAPI 3.0</strong></p>

<pre class=""><code class="language-yaml"> requestBody: 
  content: 
    application/json: 
      schema: 
        exclusiveMaximum: true
        exclusiveMinimum: true
        maximum: 50
        minimum: 1.22
        type: number
      example: 3
  required: true</code></pre>
<p class=""><strong>OpenAPI 3.1</strong></p>

<pre class=""><code class="language-yaml">requestBody:
  content:
    text/plain:
      schema:
        exclusiveMaximum: 50
        exclusiveMinimum: 1.22
        type: number
        contentEncoding: double
        contentMediaType: text/plain
      example: 3
  required: true</code></pre>
<h4 class=""><strong>Single-valued Enum and Const</strong></h4>
<p class=""><span style="font-weight: 400;">If you have a single-valued enum in your OpenAPI 3.0 file, the APIMatic Transformer maps this to a field called </span><code>const</code><span style="font-weight: 400;"> since in OpenAPI 3.1, you have the </span><span style="font-weight: 400;">const</span><span style="font-weight: 400;"> field to store the value for a single-valued enum.</span></p>
<p class=""><strong>OpenAPI 3.0</strong></p>

<pre class=""><code class="language-yaml">requestBody: 
  content: 
    text/plain:
      schema: 
        enum: 
          - 1
        type: integer
      example: 1
  required: true</code></pre>
<p class=""><strong>OpenAPI 3.1</strong></p>

<pre class=""><code class="language-yaml">requestBody:
  content:
    text/plain:
      schema:
        const: 1
        type: integer
  required: true
</code></pre>
<h3 class=""><strong>File Upload</strong></h3>
<p class=""><span style="font-weight: 400;">In OpenAPI 3.0, you describe a file upload using </span><code>type</code> <span style="font-weight: 400;">set to <code>string</code> and </span><code>format</code> <span style="font-weight: 400;">set to <code>binary</code> or <code>base64</code> depending on how the file contents will be encoded. However, in OpenAPI 3.1, JSON Schema’s keywords </span><code>contentEncoding</code> <span style="font-weight: 400;">and </span><code>contentMediaType</code> <span style="font-weight: 400;">take care of how the contents will be encoded.&nbsp;</span></p>
<p class=""><span style="font-weight: 400;">Moreover, you don’t even need to use the Schema Object for a binary file in a POST request.</span></p>
<p class=""><strong>Binary File Upload in OpenAPI 3.0</strong></p>

<pre class=""><code class="language-yaml">requestBody:
  content:
    application/octet-stream:
      schema:
        type: string
        format: binary</code></pre>
<p class=""><strong>Binary File Upload in OpenAPI 3.1</strong></p>

<pre class=""><code class="language-yaml">requestBody:
  content:
    application/octet-stream: {}
</code></pre>
<p class=""><strong>Upload via Multipart Request in OpenAPI 3.0</strong></p>

<pre class=""><code class="language-yaml">requestBody:
content:
  multipart/form-data:
    schema:
      type: object
      properties:
        userId:
          type: integer
        fileName:
          type: string
          format: binary</code></pre>
<p class=""><strong>Upload via Multipart Request in OpenAPI 3.1</strong></p>

<pre class=""><code class="language-yaml">requestBody:
  content:
    multipart/form-data:
      schema:
        type: object
        properties:
          userId:
            type: integer
          fileName:
            type: string
            contentMediaType: application/octet-stream</code></pre>
<p class=""><strong>Upload Image with base64 encoding in OpenAPI 3.0</strong></p>

<pre><code class="language-yaml">requestBody:
  content:
    image/png:
      schema:
        type: string
        format: base64</code></pre>
<p class=""><strong>Upload Image with base64 encoding in OpenAPI 3.1</strong></p>

<pre class=""><code class="language-yaml">requestBody:
  content:
    image/png:
      schema:
        type: string
        format: base64</code></pre>
<h3 class=""><strong>Other Components of OpenAPI 3.0</strong></h3>
<span style="font-weight: 400;">All other components of OpenAPI 3.0 are mapped to OpenAPI 3.1 in APIMatic without any change in them.</span>
<h2 class=""><strong>Additional Changes in OpenAPI 3.1</strong></h2>
<p class="">OpenAPI 3.1 also offers additional updates like multiple examples and reference objects:</p>

<h3 class=""><strong>Multiple Examples inside Schema Object</strong></h3>
<p class=""><span style="font-weight: 400;">OpenAPI 3.0 allows multiple examples alongside Schema Object (i.e. as a sibling to Schema Object) but does not allow multiple examples inside Schema Object. Fortunately, the support for multiple examples inside Schema Object has been added in OpenAPI 3.1. But the structure of these multiple examples would be different from what we use for the examples alongside the Schema Object.</span></p>
<p class=""><span style="font-weight: 400;">Multiple examples can be defined as a list of examples as shown below, it is recommended to use examples rather than a single example in Schema Object for OpenAPI 3.1.</span></p>
<p class=""><strong>Example inside Schema Object for OpenAPI 3.0</strong></p>

<pre class=""><code class="language-yaml">requestBody:
  content:
    text/plain:
      schema:
        type: integer
        example: 2</code></pre>
<p class=""><strong>Multiple Examples inside Schema Object for OpenAPI 3.1</strong></p>

<pre class=""><code class="language-yaml">requestBody:
  content:
    text/plain:
      schema:
        type: integer
        examples:
        - 1
        - 2
        - 3</code></pre>
<h3 class=""><strong>Reference Object</strong></h3>
<p class=""><span style="font-weight: 400;">In OpenAPI 3.1, <code>summary</code> and <code>description</code> keywords have been introduced in </span><a href="https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#reference-object"><span style="font-weight: 400;">Reference Object</span></a><span style="font-weight: 400;">. These <code>summary</code> and <code>description</code> fields by default should override the <code>summary</code> and <code>description</code> fields of the referenced component respectively and if the referenced component does not allow summary or description, the corresponding field will have no effect.</span></p>
<p class=""><span style="font-weight: 400;">For additional changes in OpenAPI 3.1, you can visit the </span><a href="https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#openapi-specification"><span style="font-weight: 400;">official OpenAPI 3.1 specification</span></a><span style="font-weight: 400;">.</span></p>

<h2 class=""><strong>Transforming OpenAPI 3.0 Files to OpenAPI 3.1 via APIMatic</strong></h2>
<p class=""><span style="font-weight: 400;">APIMatic takes care of all of these mappings behind the scenes. To actually transform a file to OpenAPI 3.1, is just a matter of a few steps. We will be using a sample Customer API</span><span style="font-weight: 400;">&nbsp;in <a href="https://github.com/aliraza1231/files/blob/main/CustomerAPI.yaml">OpenAPI 3.0</a> format for this example.</span></p>

<ol class="">
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Go to the </span><a href="https://www.apimatic.io/dashboard"><span style="font-weight: 400;">APIMatic Dashboard</span></a> <span style="font-weight: 400;">and click on </span><b>Transform API</b><span style="font-weight: 400;">.</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Import the OpenAPI 3.0 specification linked above.</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Select the export format as </span><b>OpenAPI 3.1</b><span style="font-weight: 400;">.</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Click on </span><b>Convert.</b></li>
</ol>
<figure id="attachment_1477" aria-describedby="caption-attachment-1477" style="width: 1920px" class="wp-caption aligncenter"><img class="size-full wp-image-1477" src="/wp-content/uploads/2021/12/apimatic-transformer-openapi3-1.gif" alt="Transforming a OpenAPI 3.0 file to OpenAPI 3.1 in APIMatic" width="1920" height="1080"><figcaption id="caption-attachment-1477" class="wp-caption-text">Transforming a OpenAPI 3.0 file to OpenAPI 3.1 in APIMatic</figcaption></figure>
<p class=""><span style="font-weight: 400;">Yay! Great, you have successfully transformed an OpenAPI 3.0 file to the latest OpenAPI 3.1 format. You can look at the </span><a href="https://github.com/aliraza1231/files/blob/main/CustomerAPI31.yaml"><span style="font-weight: 400;">exported OpenAPI v3.1 specification here</span></a><span style="font-weight: 400;">.</span></p>

<h2 class=""><strong>To Summarize</strong></h2>
<p class=""><span style="font-weight: 400;">The features and improvements offered in OpenAPI 3.1 can open many avenues for API developers in the future as more products and services will move to support OAS 3.1. APIMatic offers a quick solution with </span><a href="https://www.apimatic.io/transformer/"><span style="font-weight: 400;">API Transformer</span></a> <span style="font-weight: 400;">to convert any API definition into OpenAPI 3.1 format within seconds so you can fully utilize all tools supporting this format, and eliminate the time spent on rewriting API definitions in new formats.</span></p>

</div>
</div>
</div>
</div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/2021/09/introducing-openapi-3-1-support-in-apimatic/">OpenAPI 3.1 &#8211; What&#8217;s New, and How to Migrate to/from Other API Specs?</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>What’s New in APIMatic v3?</title>
		<link>/blog/2021/06/whats-new-in-apimatic-v3/</link>
		
		<dc:creator><![CDATA[Nida I Zamir]]></dc:creator>
		<pubDate>Fri, 18 Jun 2021 10:56:01 +0000</pubDate>
				<category><![CDATA[API Portal]]></category>
		<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[Releases]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Api documentation]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[auto-generated SDKs]]></category>
		<category><![CDATA[Codegen]]></category>
		<category><![CDATA[Developer Portal]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=443</guid>

					<description><![CDATA[<p>With organizations going increasingly digital, it has become challenging for API providers to maintain API visibility amongst a plethora of APIs and ensure faster API adoption. This is where developer experience pivots the developer’s decision in your API’s favor. Keeping this challenge in mind, APIMatic has undergone numerous updates to get you the most out [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/2021/06/whats-new-in-apimatic-v3/">What’s New in APIMatic v3?</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="443" class="elementor elementor-443">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-6d794aaf elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="6d794aaf" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-2bd1a153" data-id="2bd1a153" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-4ecb43bb elementor-widget elementor-widget-text-editor" data-id="4ecb43bb" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-444 aligncenter" src="/wp-content/uploads/2021/12/1_YOxwTEYQH2n9iAsyN5T2og-1024x512.png" alt="APIMatic v3 " width="1024" height="512"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="e1f5" class="">With organizations going increasingly digital, it has become challenging for API providers to maintain API visibility amongst a plethora of APIs and ensure faster API adoption. This is where developer experience pivots the developer’s decision in your API’s favor. Keeping this challenge in mind, APIMatic has undergone numerous updates to get you the most out of your API.</p>
<p id="c384" class="">With APIMatic v3, you can generate feature-rich and code-compliant SDKs as our flagship&nbsp;<strong>Code Generator</strong> includes new features and improvements as an overhaul. We have also completely revamped the&nbsp;<strong>API Portal</strong>&nbsp;with a more aesthetic and interactive API portal and a Markdown docs editor. Furthermore, the&nbsp;<strong>API Transformer</strong>&nbsp;now supports the much-awaited&nbsp;<code>anyOf</code>,&nbsp;<code>oneOf</code>,&nbsp;<code>not&nbsp;</code>constructs and union types and much more.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-445 aligncenter" src="/wp-content/uploads/2021/12/1_GpHWeFNx4IB2CRG1ryZVgA.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="2146" class="">Generate Robust SDKs with Overhauled Code Generator</h2>
<p id="8646" class="">The APIMatic Code Generator contains numerous updates to its feature list along with improvements in the CodeGen Engine:</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-446 aligncenter" src="/wp-content/uploads/2021/12/1_0kwDu7p6QTlVUG4YL9Idmw.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="d6de"><strong>Updated Language Versions, Dependencies, and Adherence to Coding Standards</strong></h3>
<p id="7773" class="">To ensure SDK compatibility with the maximum user codebase, the SDKs have been refactored to target minimum language and runtime versions and updated dependencies. Moreover, we have applied the latest industry-accepted <a href="https://docs.apimatic.io/generate-sdks/sdk-coding-standards">coding standards</a> in all languages to the SDKs.</p>
<h3 id="cb43" class="">Immutable Clients for Multi-Threading</h3>
<p id="8e46" class="">We have refactored our SDKs to <a href="https://docs.apimatic.io/changelog/apimatic-code-generator-v3-titan#new-immutable-clients-in-sdks">immutable clients</a>that make it easier to write network-related code dealing with concurrency, as immutable clients are thread-safe and do not require explicit synchronization or defensive copying.</p>
<h3 id="c83a" class="">Timeout and Retries on API Call Errors</h3>
<p id="ecc0" class="">All APIMatic SDKs now support handling <a href="https://docs.apimatic.io/changelog/apimatic-code-generator-v3-titan#timeout-and-automatic-retries-on-api-call-errors">timeouts and automatic retries</a> if an API call is timing out, is unreachable, or returning API call errors.</p>
<h3 id="fe34" class="">Support for XML in API Calls</h3>
<p id="3a23" class="">All SDKs now come with the added support for <a href="https://docs.apimatic.io/changelog/apimatic-code-generator-v3-titan#support-for-xml">sending and receiving XML</a>&nbsp;in the API calls. So if your API definition uses XML, it can be imported into APIMatic v3 to generate SDKs without having to worry about serializing and deserializing the XML data.</p>
<h3 id="30e8">Support for Nullable Properties in Models</h3>
<p id="247e" class="">Java and C# SDKs now <a href="https://docs.apimatic.io/changelog/apimatic-code-generator-v3-titan#nullable-properties-in-models">contain nullable properties in models</a>, so if a user does not assign any value to a property after model instance initialization, a null value will be sent in the HTTP request instead of being skipped altogether.</p>
<h3 id="1b2d" class="">More Updates to the Code Generator</h3>
<p id="d4e3" class="">Apart from these features, the APIMatic Code Generator generates SDKs that support numerous features and enhancements like deprecating endpoints, cancellable API calls, access to HTTP response data, and more.</p>
<blockquote class="wp-block-quote">
<p>For more in-depth detail on the updated features of the Code Generator, please head over to <a href="https://docs.apimatic.io/changelog/apimatic-code-generator-v3-titan">APIMatic Code Generator v3</a>.</p>
</blockquote>
<h2 id="21fd" class="">Enhance Developer Experience with Revamped API Portal</h2>
<p id="7c60" class="">The API Portal has been revamped in APIMatic v3 to make your documentation and code samples more readable and interactive, making API consumption even faster. We have also updated the Portal Editor for more flexibility in customization to the portal.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-447 aligncenter" src="/wp-content/uploads/2021/12/1_7-EKUeLckKyhjf_3f9QN2w.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="3b90" class="">Improved Aesthetics and UX</h3>
<p id="aa54" class="">Based on feedback from our customers, we updated the design of the API portal to a more modern and reader-friendly interface with new typography, layout, and UI components for a more intuitive experience.</p>
<figure id="attachment_1239" aria-describedby="caption-attachment-1239" style="width: 1890px" class="wp-caption aligncenter"><img class="wp-image-1239 size-full" src="/wp-content/uploads/2021/12/portal.gif" alt="Revamped API Portal in APIMatic v3" width="1890" height="931"><figcaption id="caption-attachment-1239" class="wp-caption-text">Revamped API Portal in APIMatic v3</figcaption></figure>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large"></figure>
</div>
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="6333" class="">Merged API Explorer (API Playground)</h3>
<p id="9472" class="">We have merged the endpoint request documentation with the API Console into a unified <a href="https://docs.apimatic.io/publish-apis/api-console">API Explorer</a>, also called the “API Playground”, that allows your users to explore the endpoint documentation and edit the request data in one place.</p>
<h3 id="e773" class="">Updated Portal Editor</h3>
<p id="ecec" class="">The Portal Editor for customizing the API portal has been remodeled to make it as easy to use as possible while adding a WYSIWYG Markdown docs editor for custom guides. You can customize <a href="https://docs.apimatic.io/publish-apis/customizing-your-portal">portal settings</a> and version-specific <a href="https://docs.apimatic.io/publish-apis/customize-docs">documentation settings</a>, and also include auto-generated documentation for endpoints and models.</p>
<figure id="attachment_1240" aria-describedby="caption-attachment-1240" style="width: 1890px" class="wp-caption aligncenter"><img class="wp-image-1240 size-full" src="/wp-content/uploads/2021/12/portal-editor-1.gif" alt="Revamped Portal Editor in APIMatic v3" width="1890" height="931"><figcaption id="caption-attachment-1240" class="wp-caption-text">Revamped Portal Editor in APIMatic v3</figcaption></figure>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large"></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="a325" class="">More Features in the v3 API Portal</h3>
<p id="b6fe" class="">The API Portal contains more fun features like pop-out code samples, version-specific documentation, customizable table-of-contents, and much more!</p>
<blockquote class="wp-block-quote">
<p>For more information about what APIMatic v3 offers for the API portal in detail, check out <a href="https://docs.apimatic.io/changelog/releasing-apimatic-v3-revamped-api-portal">Revamped API Portal in APIMatic v3</a>.</p>
</blockquote>
<h2 id="3616" class="">Polish Your API Definition with Upgraded API Transformer</h2>
<p id="1533">The API Transformer includes various new features and improvements, so your API definitions can make the most out of APIMatic V3.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-450 aligncenter" src="/wp-content/uploads/2021/12/1_dkZodYI-qBbeus6CoJ7l5g.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="c5a8">Faster OpenAPI v2.0 and v3.0 Imports</h3>
<p id="d2ba" class="">The OpenAPI/Swagger 2.0 and 3.0 import has been completely revamped and impacts your SDK and Docs/Portal generation and API Transformer output. The revamp includes faster imports, improved support for&nbsp;<code>$refs</code> , improved error messages, changes to null value handling, and much more.</p>
<h3 id="4bd6" class="">Support for anyOf, oneOf, not Constructs and Union Types</h3>
<p id="c39a" class="">Probably one of the most requested support for&nbsp;<code>anyOf</code>,&nbsp;<code>oneOf&nbsp;</code>and&nbsp;<code>not&nbsp;</code>constructs is now available in all major API specification formats including OpenAPI, JSON Schema, API Blueprint. Support for RAML and XML schema “union” types has also been added.</p>
<h3 id="23c6" class="">What’s More in the v3 API Transformer?</h3>
<p id="2a1d" class="">The API Transformer is packed with more features and settings like new configuration settings, more specification extensions for OAS and RAML annotations, and so on.</p>
<blockquote class="wp-block-quote">
<p>Read more about what the&nbsp;<a href="https://docs.apimatic.io/changelog/releasing-apimatic-v3-revamped-transformer">revamped API Transformer offers</a>&nbsp;in APIMatic v3.</p>
</blockquote>
<h2 id="2c4a" class="">How do I Migrate to APIMatic v3? <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/2708.png" alt="✈" class="wp-smiley" style="height: 1em; max-height: 1em;" /></h2>
<p id="6280" class="">Migrating to APIMatic v3 is easy. All your data is preserved during migration so you don’t have to worry about any data being lost or discarded. We have also ensured that everything remains backward compatible so if for any reason you revert to v2, no data is lost.</p>
<blockquote class="wp-block-quote">
<p>For more detail, please refer to our guide on&nbsp;<a href="https://docs.apimatic.io/account-management/migrate-to-v3">how to migrate to APIMatic v3</a>, or contact&nbsp;<a href="https://www.apimatic.io/contact/">support</a>.</p>
</blockquote>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/2021/06/whats-new-in-apimatic-v3/">What’s New in APIMatic v3?</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>We&#8217;ve Rewritten Our Developer Experience Portal and You’re Gonna Love It</title>
		<link>/blog/2018/08/weve-rewritten-our-developer-experience-portal-and-youre-gonna-love-it/</link>
		
		<dc:creator><![CDATA[Mehdi Raza Jaffery]]></dc:creator>
		<pubDate>Wed, 01 Aug 2018 12:11:45 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Portal]]></category>
		<category><![CDATA[Code Samples]]></category>
		<category><![CDATA[Developer Experience]]></category>
		<category><![CDATA[Releases]]></category>
		<category><![CDATA[API portal]]></category>
		<category><![CDATA[Developer Experience Portal]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=1109</guid>

					<description><![CDATA[<p>Greetings! Our Developer Experience Portal is already into its next version! We did not pack our bags after launching the first version last month and are proud to present Developer Experience Portal Version 1.1. This time even more optimized, more beautiful, and more developer-friendly. The new version is packed with a number of improvements and [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/2018/08/weve-rewritten-our-developer-experience-portal-and-youre-gonna-love-it/">We&#8217;ve Rewritten Our Developer Experience Portal and You’re Gonna Love It</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1109" class="elementor elementor-1109">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-394a2653 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="394a2653" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-352d1735" data-id="352d1735" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-6cbdcbb5 elementor-widget elementor-widget-text-editor" data-id="6cbdcbb5" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<figure class="graf graf--figure graf--layoutOutsetCenter">
<p class="mod-reset"><img class="graf-image aligncenter" src="/wp-content/uploads/2021/12/1nEt7Q1uNLSW3nMaX8t9LIQ.png" data-image-id="1*nEt7Q1uNLSW3nMaX8t9LIQ.png" data-width="1200" data-height="700" data-is-featured="true"></p>
</figure>
<p class="graf graf--p">Greetings! Our Developer Experience Portal is already into its next version! We did not pack our bags after <a class="markup--anchor markup--p-anchor" href="https://www.apimatic.io/developer-experience-portal/" target="_blank" rel="noopener" data-href="https://www.producthunt.com/posts/developer-experience-portal">launching the first version</a> last month and are proud to present Developer Experience Portal Version 1.1. This time even more optimized, more beautiful, and more developer-friendly. The new version is packed with a number of improvements and some new features.</p>

<blockquote class="graf graf--blockquote">Read what makes APIMatic&#8217;s <a class="markup--anchor markup--blockquote-anchor" href="https://apimatic.io/blog/2018/01//developer-experience-beyond-api-docs" target="_blank" rel="noopener" data-href="https://blog.devapi.dream.press/introducing-portals-that-speak-your-devs-language-bac82a8c573f">Developer Experience portal different</a> from other available solutions.</blockquote>
<h2 class="graf graf--h3">? Built from Ground Up to be&nbsp;Awesome</h2>
<p class="graf graf--p">The new portal is written from scratch, based on our new internal <strong class="markup--strong markup--p-strong">Documentation Format </strong>that powers much of the interactive parts of docs such as the console and reactive code snippets.</p>
<p class="graf graf--p">This will enable us to implement more <strong class="markup--strong markup--p-strong">complex features </strong>in the future without being limited by markup languages such as Markdown.</p>

<h2 class="graf graf--h3"><img src="https://s.w.org/images/core/emoji/13.1.0/72x72/270d.png" alt="✍" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <strong class="markup--strong markup--h3-strong">Overhaul of Typography</strong></h2>
<p class="graf graf--p">The design of typography (textual elements such as headings, paragraphs, lists, etc) has been overhauled. The new portal brings <strong class="markup--strong markup--p-strong">massive improvements to the look of the content</strong>.</p>

<figure class="graf graf--figure graf--layoutOutsetCenter">
<p class="mod-reset"><img class="graf-image aligncenter" src="/wp-content/uploads/2021/12/1Fy_P4QCUmMfw90eXCYndQQ.png" data-image-id="1*Fy_P4QCUmMfw90eXCYndQQ.png" data-width="1106" data-height="729"></p>
</figure>
<h2 class="graf graf--h3">?&#x200d;? Redesigned API Reference</h2>
<p class="graf graf--p">Endpoint reference has been redesigned and now looks much <strong class="markup--strong markup--p-strong">cleaner</strong>.</p>

<figure class="graf graf--figure graf--layoutOutsetCenter">
<p class="mod-reset"><img class="graf-image aligncenter" src="/wp-content/uploads/2021/12/1USLklSloeoR3JIleDnQtow.png" data-image-id="1*USLklSloeoR3JIleDnQtow.png" data-width="1464" data-height="786"></p>
</figure>
<p class="graf graf--p">Also, types are now <strong class="markup--strong markup--p-strong">linked </strong>to their definitions for easier navigation.</p>

<figure class="graf graf--figure graf--layoutOutsetCenter">

<figure style="width: 1145px" class="wp-caption aligncenter"><img class="graf-image" src="/wp-content/uploads/2021/12/1akJ1bDIT9LGupWxCxkEfsQ.png" alt="Now linking properly to models and enumerations in parameters table." width="1145" height="581" data-image-id="1*akJ1bDIT9LGupWxCxkEfsQ.png" data-width="1145" data-height="581"><figcaption class="wp-caption-text">Now linking properly to models and enumerations in the parameters table.</figcaption></figure>

<figcaption class="imageCaption"></figcaption></figure>
<h2 class="graf graf--h3">? <strong class="markup--strong markup--h3-strong">Switching between Languages</strong></h2>
<p class="graf graf--p"><strong class="markup--strong markup--p-strong">Switching </strong>between languages maintains the endpoint or model or whatever section is open. Config in the console is also persisted between languages.</p>

<figure class="graf graf--figure graf--layoutOutsetCenter">
<p class="mod-reset"><img class="graf-image aligncenter" src="/wp-content/uploads/2021/12/1POtnjKzJYhCAvQrF6W3dyg.gif" data-image-id="1*POtnjKzJYhCAvQrF6W3dyg.gif" data-width="1138" data-height="634"></p>
</figure>
<p class="graf graf--p">We’ve added <strong class="markup--strong markup--p-strong">icons </strong>in the language drop-down.</p>

<figure class="graf graf--figure">
<p class="mod-reset"><img class="graf-image aligncenter" src="/wp-content/uploads/2021/12/1T42G2_USrBQ9R0X4uc0gnA.png" data-image-id="1*T42G2_USrBQ9R0X4uc0gnA.png" data-width="189" data-height="403"></p>
</figure>
<h2 class="graf graf--h3">? <strong class="markup--strong markup--h3-strong">Improved Embedded&nbsp;Mode</strong></h2>
<p class="graf graf--p">The menu looks better in the <strong class="markup--strong markup--p-strong">embedded </strong>(two-column) mode. Large menus will scroll now.</p>

<figure class="graf graf--figure graf--layoutOutsetCenter">
<p class="mod-reset"><img class="graf-image aligncenter" src="/wp-content/uploads/2021/12/1yDV9JwbhyDktH3lab9d2dA.png" data-image-id="1*yDV9JwbhyDktH3lab9d2dA.png" data-width="1079" data-height="703"></p>
</figure>
<h2 class="graf graf--h3">? Quick&nbsp;Jump</h2>
<p class="graf graf--p">We’ve added a <strong class="markup--strong markup--p-strong">fuzzy search </strong>that helps quickly jumping to endpoints and models. It can also be triggered from the <strong class="markup--strong markup--p-strong">keyboard </strong>using <code class="markup--code markup--p-code">Ctrl+K</code>&nbsp;.</p>

<figure class="graf graf--figure graf--layoutOutsetCenter">

<figure style="width: 1013px" class="wp-caption aligncenter"><img class="graf-image" src="/wp-content/uploads/2021/12/1vGz-syA7CtCfHug8mJ8AOA.gif" alt="Using the keyboard to quickly navigate documentation." width="1013" height="580" data-image-id="1*vGz-syA7CtCfHug8mJ8AOA.gif" data-width="1013" data-height="580"><figcaption class="wp-caption-text">Using the keyboard to quickly navigate documentation.</figcaption></figure>

<figcaption class="imageCaption"></figcaption></figure>
<h2 class="graf graf--h3">? Gentler Error&nbsp;Messages</h2>
<p class="graf graf--p">We’ve improved the <strong class="markup--strong markup--p-strong">messaging </strong>in case an API call fails in the API console.</p>

<figure class="graf graf--figure">
<p class="mod-reset"><img class="graf-image aligncenter" src="/wp-content/uploads/2021/12/1FXNrUiM2lguTvIT10JtZUQ.png" data-image-id="1*FXNrUiM2lguTvIT10JtZUQ.png" data-width="578" data-height="596"></p>
</figure>
<h2 class="graf graf--h3">? Faster,&nbsp;Lighter</h2>
<p class="graf graf--p">The new portal is written to be fast and light. Despite adding new features, we’ve actually shed weight <strong class="markup--strong markup--p-strong">resulting in about a 33% reduction in size</strong>.</p>
<p class="graf graf--p">The new portal optimizes for a perception of fast loading speed by delaying loading of non-critical components until they are needed. This results in <strong class="markup--strong markup--p-strong">a 71% reduction in size on the first load</strong>. Technical implementation details can be read <a class="markup--anchor markup--p-anchor" href="https://medium.com/@thehappybug/using-react-context-in-a-typescript-app-c4ef7504c858" target="_blank" rel="noopener" data-href="https://medium.com/@thehappybug/using-react-context-in-a-typescript-app-c4ef7504c858">here</a>.</p>

<h2 class="graf graf--h3"><img src="https://s.w.org/images/core/emoji/13.1.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /> How do I get&nbsp;this?</h2>
<ul class="postList">
 	<li class="graf graf--li">Read how to <a class="markup--anchor markup--li-anchor" href="https://docs.apimatic.io/changelog/developer-experience-portal-major-release/" target="_blank" rel="noopener" data-href="https://docs.devapi.dream.press/changelog/developer-experience-portal-major-release/">upgrade your existing portal</a> to the newest version.</li>
 	<li class="graf graf--li">Or create one from scratch using our <a class="markup--anchor markup--li-anchor" href="https://www.apimatic.io/developer-experience-portal/" target="_blank" rel="noopener" data-href="https://devapi.dream.press/developer-experience-portal">portal generator</a>.</li>
</ul>
</div>
</div>
</div>
</div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/2018/08/weve-rewritten-our-developer-experience-portal-and-youre-gonna-love-it/">We&#8217;ve Rewritten Our Developer Experience Portal and You’re Gonna Love It</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
