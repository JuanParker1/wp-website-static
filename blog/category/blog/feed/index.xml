
<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Blog Archives - APIMatic</title>
	<atom:link href="/blog/category/blog/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>APIMatic is an API documentation tool that provides a complete set of DX components such as autogenerated SDKs, API portal, API docs, live code samples, and more.</description>
	<lastBuildDate>Fri, 22 Apr 2022 17:30:14 +0000</lastBuildDate>
	<language>en</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.9.3</generator>

<image>
	<url>/wp-content/uploads/2021/10/cropped-cropped-apimaticio-favicon-1-32x32.png</url>
	<title>Blog Archives - APIMatic</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Letting developers try endpoints right from API Documentation &#8211; UX Case Study</title>
		<link>/blog/2020/06/letting-developers-try-endpoints-right-from-api-documentation-ux-case-study/</link>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Sun, 07 Jun 2020 11:02:52 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Portal]]></category>
		<category><![CDATA[Blog]]></category>
		<category><![CDATA[Case Study]]></category>
		<category><![CDATA[Developer Tools]]></category>
		<category><![CDATA[Portfolio]]></category>
		<category><![CDATA[Product Design]]></category>
		<category><![CDATA[Ui Ux Design]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=389</guid>

					<description><![CDATA[<p>Problem API documentation tells developers how to use a certain API. An API can have multiple endpoints. Developers read the API documentation to get an idea what does each endpoint do. To find out how these endpoints actually work they have to call those endpoints in their respective apps. Ultimately they find themselves jumping between [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/2020/06/letting-developers-try-endpoints-right-from-api-documentation-ux-case-study/">Letting developers try endpoints right from API Documentation &#8211; UX Case Study</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="389" class="elementor elementor-389">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-1fcfba08 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="1fcfba08" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-32016d03" data-id="32016d03" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-399af17f elementor-widget elementor-widget-text-editor" data-id="399af17f" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
			<style>/*! elementor - v3.6.4 - 13-04-2022 */
.elementor-widget-text-editor.elementor-drop-cap-view-stacked .elementor-drop-cap{background-color:#818a91;color:#fff}.elementor-widget-text-editor.elementor-drop-cap-view-framed .elementor-drop-cap{color:#818a91;border:3px solid;background-color:transparent}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap{margin-top:8px}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap-letter{width:1em;height:1em}.elementor-widget-text-editor .elementor-drop-cap{float:left;text-align:center;line-height:1;font-size:50px}.elementor-widget-text-editor .elementor-drop-cap-letter{display:inline-block}</style>				<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="alignnone wp-image-390" src="/wp-content/uploads/2021/12/1_WShpeSnKhzNP41dKnD8bvQ-1024x576.png" alt="Letting developers try endpoints right from API Documentation - UX Case Study" width="1024" height="576"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="37cc" class=""><strong>Problem</strong></h2>
<p id="b81b" class="">API documentation tells developers how to use a certain API. An API can have multiple endpoints. Developers read the API documentation to get an idea what does each endpoint do. To find out how these endpoints actually work they have to call those endpoints in their respective apps. Ultimately they find themselves jumping between the app and the API documentation. This wastes a lot of their time as well as focus.</p>
<h2 id="9142" class=""><strong>Solution:&nbsp;</strong><strong><em>Interactive API Documentation.</em></strong></h2>
<p class="">Provide developers with an API explorer where they can play around with all the endpoints while they are still reading API documentation. So they’ll have a clear understanding of what a specific endpoint does before diving into code.</p>
<h3 id="f2da"><strong>Background</strong></h3>
<p id="053c" class="">To give a little background,&nbsp;<a href="https://www.apimatic.io/">APIMatic</a>&nbsp;is a platform which helps companies improve their developer experience by providing&nbsp;<a href="https://www.apimatic.io/developer-experience-portal">API documentation</a>&nbsp;packed with a lot of features. So we were about to add another feature which was going to allow companies to help their developers consume their APIs.</p>
<blockquote class="wp-block-quote">
<p>Help developers love your API by providing them everything required to consume it.</p>
</blockquote>
<h3 id="d19e"><strong>Process</strong></h3>
<p id="60f2" class="">Before I could get my hand dirty with wireframes I started asking developers questions like:</p>
<p id="d1aa" class="">1- How would you feel if you could interact with API Documentation?</p>
<p id="6ea3">2- How would you feel if you could try out endpoints while reading the API documentation?</p>
<p id="0051">3- Have you ever come across an interactive API documentation?</p>
<p id="d2cb" class="">4- What comes in your mind when you hear “interactive API Documentation”?</p>
<blockquote class="wp-block-quote">
<p>One thing got pretty clear at this point. Developers don’t like moving back and forth between docs and their IDE.</p>
</blockquote>
<p id="57a3" class="">Once I got the validation from the developer community I started studying other API Documentation tools. They all focused on all text and no interaction.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column" style="flex-basis: 100%;"><!-- wp:media-text -->
<div class="wp-block-media-text alignwide is-stacked-on-mobile">
<figure class="wp-block-media-text__media">
<p class="mod-reset"><img class="wp-image-391 size-full aligncenter" src="/wp-content/uploads/2021/12/1_r7rfi4PyXTyxK0cECHIsYw-1024x850.png" alt=""></p>
</figure>
<div class="wp-block-media-text__content"><!-- wp:paragraph -->
<p id="f1a8" class="">This is how content of an endpoint appears in almost all of the API Docs.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="16d1" class="">Here is an example of simple calculation endpoint from our sample “Calculator API”.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="0031">In this example “X” &amp; “Y” are the digits and “Operation” is basically the operator that can be used/applied between both digits e.g Add, Subtract etc.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="f3fd" class="">Developers can read what every endpoint does and all but to try it they’ll have to call it in their respective apps.</p>
<!-- /wp:paragraph --></div>
</div>
<!-- /wp:media-text --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">Next thing that I had in my mind was seamless transition. Like whatever solution I propose must not break the current flow and experience of users. To ensure that I added another tab named “Console” where same parameters were placed but with respective input fields.</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-392" src="/wp-content/uploads/2021/12/1_fuhgdS8TLmxSyh8TO16cOw.jpg" alt=""></p>
<figcaption>Wireframe of how I imagined the API Explorer to fit in.</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-393" src="/wp-content/uploads/2021/12/1_uEoy3zCjTBDPFtfwmtXUqw.png" alt=""></p>
<figcaption>Console tab next to Parameters</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="8aac">I was half way through at this point. I am saying this because filling in fields won’t take us anywhere unless we’ve a result.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-394" src="/wp-content/uploads/2021/12/1_X58c_mCWFYv6H05qQR1ozg.png" alt=""></p>
<figcaption>Views of Parameter and Console Tabs</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p>APIMatic provides a 3 tier documentation. Navigation, docs and code samples. Third tier i-e code is directly tied to the endpoint. To make the documentation interactive we decided to reflect these fields to the code directly.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-395 aligncenter" src="/wp-content/uploads/2021/12/1_qe9FT3u3cBYt7uMVvfWP8w.gif" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:quote -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<blockquote class="wp-block-quote">
<p>I cannot forget excitement of developers when we performed usability testing on this feature.</p>
</blockquote>
<p id="db85">Moving on to testing the endpoint bit. We have the fields to add data, code samples have been tuned accordingly, now we need a trigger to basically get the end result.</p>
<p id="3b95" class="">Placing “TRY IT OUT” button was one last bit of the puzzle. Whether to place it in the mid tier or with the code? I went back to basics and recalled that fields were just there to feed the code while code is what developers would want to test so “TRY IT OUT” button belongs to code tier.</p>
</div>
</div>
</div>
</div>
<!-- /wp:quote -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-396 aligncenter" src="/wp-content/uploads/2021/12/1_7zmkRPMHOSMrLCMCRxw0Iw.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">So this is how we managed to make our docs interactive with reactive code samples. View it live in action&nbsp;<a href="https://www.apimatic.io/apidocs/apimatic/v/1_0#/objective-c/api-endpoints/code-generation-imported-apis/generate-sdk">here</a>. View its visuals&nbsp;<a href="https://dribbble.com/hasham">here</a>.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/2020/06/letting-developers-try-endpoints-right-from-api-documentation-ux-case-study/">Letting developers try endpoints right from API Documentation &#8211; UX Case Study</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Moving to GraphQL from SOAP or REST</title>
		<link>/blog/2019/07/moving-to-graphql-from-soap-or-rest/</link>
		
		<dc:creator><![CDATA[Faria Rehman]]></dc:creator>
		<pubDate>Fri, 12 Jul 2019 11:27:02 +0000</pubDate>
				<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[Blog]]></category>
		<category><![CDATA[REST APIs]]></category>
		<category><![CDATA[SOAP]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[GraphQL]]></category>
		<category><![CDATA[Graphql Schema]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=624</guid>

					<description><![CDATA[<p>This blog is the fourth part of the series called “API Transformer Recipes”. The series aims to highlight numerous ways in which developers can integrate&#160;API Transformer into their workflow in order to gain access to a wide range of tools and frameworks. Hopefully, it will help eliminate any assumptions that they have about being restricted [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/2019/07/moving-to-graphql-from-soap-or-rest/">Moving to GraphQL from SOAP or REST</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="624" class="elementor elementor-624">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-5fc28771 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="5fc28771" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-1d7582c7" data-id="1d7582c7" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-4f627216 elementor-widget elementor-widget-text-editor" data-id="4f627216" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-625" src="/wp-content/uploads/2021/12/1_R4yFQi_9PINp_LHuwRsVag-1024x512.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="e10f" class=""><em>This blog is the fourth part of the series called “API Transformer Recipes”. The series aims to highlight numerous ways in which developers can integrate&nbsp;</em><a href="https://www.apimatic.io/transformer"><em>API Transformer</em></a><em> into their workflow in order to gain access to a wide range of tools and frameworks. Hopefully, it will help eliminate any assumptions that they have about being restricted to a particular set of tools just because they use a certain API specification format.&nbsp;</em></p>
<h2 id="8e77" class="">Announcing support for GraphQL Schema</h2>
<p id="4d39" class="">Oh yes, you heard it right. You can now&nbsp;<a href="https://docs.apimatic.io/changelog/support-for-exporting-graphql-schema-files-now-available/">export GraphQL Schema from APIMatic</a>&nbsp;using&nbsp; API Transformer! Previously, we provided our users means of&nbsp;<a href="https://blog.apimatic.io/api-transformer-recipes-facilitating-migration-from-soap-to-rest-72b8248432d8">migrating from SOAP to REST</a>, and now also aim to facilitate those SOAP/REST users looking to migrate to GraphQL.</p>
<p id="c99b" class="">Why GraphQL, you wonder? Without going into details, GraphQL is known for being simpler, faster and efficient allowing users to fetch exactly the data they need. Many strongly believe that GraphQL is the future of APIs. So if you are one of them and are considering moving to GraphQL, read on.</p>
<p id="2a57" class="">Our support for GraphQL schema is currently in beta so we are open to any feedback/suggestions that you might have.</p>
<h2 id="512e" class="">Role of GraphQL Schema</h2>
<p id="7f3a" class="">GraphQL schemas for a service are defined using&nbsp;<a href="https://graphql.org/learn/schema/">GraphQL SDL</a>&nbsp;(schema definition language) having a pretty simple syntax for defining various components like types, queries, mutations etc. We’ll take a look at some examples later in this blog.</p>
<p id="50c9">A GraphQL schema is at the core of any GraphQL server implementation. It describes the functionality available to the client applications that connect to it. So having this schema file will serve as a key starting point for migrating your API to GraphQL. You can then easily generate server code, resolver signatures, etc. from it using various tools available out there.</p>
<h2 id="109f">Export GraphQL Schema Files with API Transformer</h2>
<p id="d41a" class="">Bring your API files and export them to GraphQL schema using&nbsp;<a href="https://www.apimatic.io/transformer">API Transformer</a>. All major input formats (e.g. OpenAPI, RAML, API Blueprint, etc.) are supported.</p>
<p id="5919">The following features of the schema are supported:</p>
<ul class="">
<li>Object types</li>
<li>Scalar and Enumeration types</li>
<li>Input types</li>
<li>Arguments</li>
<li>Queries</li>
<li>Mutations</li>
<li>Lists and Non-null fields</li>
</ul>
<p id="8a1e" class="">GraphQL itself does not impose any strict naming conventions other than a list of allowed characters mentioned in their&nbsp;<a href="https://graphql.github.io/graphql-spec/June2018/#sec-Names">spec</a>. However, keeping in mind some of the best practices highlighted for&nbsp;<a href="https://graphqlmastery.com/blog/graphql-best-practices-for-graphql-schema-design">GraphQL schema design</a>,&nbsp;<a href="https://blog.apollographql.com/designing-graphql-mutations-e09de826ed97">mutations</a>&nbsp;and&nbsp;<a href="https://graphqlmastery.com/blog/how-to-use-graphql-enum-type-and-its-best-practices">GraphQL enum types</a>, we follow some conventions to make the migration process for our users easier. These conventions aim to facilitate development and interoperability.</p>
<p id="2c5f"><strong>Conventions</strong></p>
<ul class="">
<li>The names of various components will obey the rules specified in the spec.</li>
<li>Object/Input and Enumeration type names will be&nbsp;<code>pascal</code>&nbsp;cased.</li>
<li>All field names will be&nbsp;<code>camel</code>&nbsp;cased.</li>
<li>Enumeration field names will be&nbsp;<code>upper</code>&nbsp;cased to represent their nature as constants.</li>
<li>HTTP verb will be prepended with query/mutation names to represent the action that will be performed upon calling it.</li>
</ul>
<h2 id="2593">For SOAP Users — Migrating to GraphQL</h2>
<p id="04e6" class="">With&nbsp; API Transformer, SOAP users can start migrating to GraphQL by obtaining a GraphQL schema file from their service WSDL file. This involves a conversion of all WSDL types to GraphQL schema types, operations to mutations and attributes to arguments. The example below illustrates this:</p>
<p id="7774" class="">WSDL example:</p>
<pre class=""><code class="language-xml">&lt;definitions name=&quot;HelloService&quot; targetNamespace=&quot;http://www.examples.com/wsdl/HelloService.wsdl&quot; xmlns=&quot;http://schemas.xmlsoap.org/wsdl/&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; xmlns:tns=&quot;http://www.examples.com/wsdl/HelloService.wsdl&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:s=&quot;http://www.examples.com/schema1&quot;&gt;
  &lt;types&gt;
      &lt;schema xmlns=&quot;http://www.w3.org/2001/XMLSchema&quot; targetNamespace=&quot;http://www.examples.com/schema1&quot; elementFormDefault=&quot;qualified&quot;&gt;
        &lt;element name=&quot;GreetingMessage&quot;&gt;
            &lt;complexType&gt;
                &lt;sequence&gt;
                    &lt;element name=&quot;senderName&quot; type=&quot;xsd:string&quot;/&gt;
                    &lt;element name=&quot;greeting&quot; type=&quot;xsd:string&quot;/&gt;
                &lt;/sequence&gt;                
            &lt;/complexType&gt;
        &lt;/element&gt;
      &lt;/schema&gt;
  &lt;/types&gt;
  &lt;message name=&quot;SendMessageRequest&quot;&gt;
      &lt;part name=&quot;message&quot; type=&quot;s:GreetingMessage&quot;/&gt;
  &lt;/message&gt;
  &lt;message name=&quot;SendMessageResponse&quot;&gt;
      &lt;part name=&quot;message&quot; type=&quot;s:GreetingMessage&quot;/&gt;
  &lt;/message&gt;
  &lt;portType name=&quot;Hello_PortType&quot;&gt;
      &lt;operation name=&quot;sendMessage&quot;&gt;
         &lt;input message=&quot;tns:SendMessageRequest&quot;/&gt;
         &lt;output message=&quot;tns:SendMessageResponse&quot;/&gt;
      &lt;/operation&gt;
  &lt;/portType&gt;
  &lt;binding name=&quot;Hello_Binding&quot; type=&quot;tns:Hello_PortType&quot;&gt;
      &lt;soap:binding style=&quot;rpc&quot;
         transport=&quot;http://schemas.xmlsoap.org/soap/http&quot;/&gt;
      &lt;operation name=&quot;sendMessage&quot;&gt;
         &lt;soap:operation soapAction=&quot;sendMessage&quot;/&gt;
         &lt;input&gt;
            &lt;soap:body encodingStyle=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;
               namespace=&quot;urn:examples:helloservice&quot;
               use=&quot;encoded&quot;/&gt;
         &lt;/input&gt;    
         &lt;output&gt;
            &lt;soap:body encodingStyle=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;
               namespace=&quot;urn:examples:helloservice&quot;
               use=&quot;encoded&quot;/&gt;
         &lt;/output&gt;
      &lt;/operation&gt;
   &lt;/binding&gt;
   &lt;service name=&quot;Hello_Service&quot;&gt;
      &lt;documentation&gt;WSDL File for HelloService&lt;/documentation&gt;
      &lt;port binding=&quot;tns:Hello_Binding&quot; name=&quot;Hello_Port&quot;&gt;
         &lt;soap:address location=&quot;http://www.examples.com/SayHello/&quot; /&gt;
      &lt;/port&gt;
   &lt;/service&gt;   
&lt;/definitions&gt;</code></pre>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:table -->
<figure class="wp-block-table"></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row" style="padding-top: 0px;">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="d1fc" class="">GraphQL schema obtained by converting above WSDL file using&nbsp; API Transformer:</p>
<pre class=""><code class="language-cs"># API Name: &quot;HelloService&quot;
# Host: http://www.examples.com/SayHello/
# WSDL File for HelloService

type GreetingMessage {
    senderName: String!
    greeting: String!
}

type SendMessageRequest {
    greetingMessage: GreetingMessage!
}

type SendMessageResponse {
    greetingMessage: GreetingMessage!
}

input GreetingMessageInput {
    senderName: String!
    greeting: String!
}

input SendMessageRequestInput {
    greetingMessage: GreetingMessageInput!
}

input CreateSendmessageInput {
    body: SendMessageRequestInput!
}

type Query {
    _: Boolean
}

type Mutation {
    createSendmessage(input: CreateSendmessageInput!): SendMessageResponse!
}

schema {
    mutation: Mutation
    query: Query
}</code></pre>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"></figure>
<!-- /wp:table -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="8674">For REST Users — Layering GraphQL on top</h2>
<p id="91f0" class="">Instead of completely migrating to GraphQL, users generally prefer to add a GraphQL layer on top of REST and enjoy benefits of both. The choice is yours depending on your service and system needs.</p>
<p id="841a" class="">You can convert your RESTful API defined in one of the popular formats like OpenAPI/Swagger, RAML, etc. to GraphQL schema with&nbsp; API Transformer. The conversion process will:</p>
<ul class="">
<li>Convert GET operations to GraphQL queries while other operations involving server-side changes to GraphQL mutations.</li>
<li>Convert complex types in the API to GraphQL object and enumeration types.</li>
<li>Wrap operation parameters in a GraphQL input type and link that input type to respective query/mutation arguments.</li>
</ul>
<p id="fce7">The example below shows the conversion:</p>
<p id="1f1d" class="">OpenAPI 3.0 example:</p>
<pre class=""><code class="language-yaml">openapi: 3.0.0
info:
  title: Calculator
  description: Simple Calculator API
  version: &#039;1.0&#039;
servers:
- url: https://examples.devapi.dream.press/apps/calculator  
paths:
  /{operation}:
    get:
      description: Calculates the expression based on the x and y operator
      operationId: Calculate
      parameters:
      - name: operation
        in: path
        required: true
        schema:
          $ref: &#039;#/components/schemas/OperationType&#039;
      - name: x
        in: query
        required: true
        schema:
          type: number
          format: double
      - name: y
        in: query
        required: true
        schema:
          type: number
          format: double
      responses:
        200:
          description: &#039;Returns the result of operation&#039;
          content:
            text/plain:
              schema:
                type: number
                format: double      
components:
  schemas:
    OperationType:
      enum:
      - SUM
      - SUBTRACT
      - MULTIPLY
      - DIVIDE
      type: string
      description: Possible operations are sum, subtract, multiply, divide</code></pre>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:table -->
<figure class="wp-block-table"></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="2920" class="">GraphQL schema obtained by converting above OpenAPI 3.0 file using&nbsp; API Transformer:</p>
<pre class=""><code class="language-cs"># API Name: &quot;Calculator&quot;
# Host: https://examples.devapi.dream.press/apps/calculator
# Simple Calculator API

&quot;Possible operations are sum, subtract, multiply, divide&quot;
enum OperationType {
    DIVIDE
    MULTIPLY
    SUBTRACT
    SUM
}

input GetCalculateInput {
    operation: OperationType!
    x: Float!
    y: Float!
}

type Query {
    &quot;Calculates the expression based on the x and y operator&quot;
    getCalculate(input: GetCalculateInput!): Float!
}

type Mutation {
    _: Boolean
}

schema {
    mutation: Mutation
    query: Query
}</code></pre>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"></figure>
<!-- /wp:table -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="5c1b">Conclusion</h2>
<p id="0841" class="">We hope you found our migration guide to GraphQL useful. If you have any feedback for our GraphQL schema export feature, feel free to reach out.</p>
<p id="28a8" class="">Continue reading more API Transformer Recipes:</p>
<ul class="">
<li><a href="https://apimatic.io/blog/2018/11/api-transformer-recipes-enabling-postmans-team-sharing-features-for-openapi-users" target="_blank" rel="noreferrer noopener">Enabling Postman’s Team Sharing Features for OpenAPI Users</a></li>
<li><a href="https://apimatic.io/blog/2018/12/api-transformer-recipes-facilitating-migration-from-soap-to-rest" target="_blank" rel="noreferrer noopener">Facilitating Migration from SOAP to REST</a></li>
<li><a href="https://apimatic.io/blog/2019/01/api-transformer-recipes-opening-ways-into-ibm-api-connect" target="_blank" rel="noreferrer noopener">Opening ways into IBM API Connect</a></li>
<li><a href="https://apimatic.io/blog/2020/06/the-whys-and-hows-of-exposing-a-soap-service-using-your-rest-api">The Whys and Hows of Exposing a SOAP Service Using Your REST API</a></li>
</ul>
<p class="">Thanks to&amp;nbsp;Adeel Ali.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/2019/07/moving-to-graphql-from-soap-or-rest/">Moving to GraphQL from SOAP or REST</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Phil Sturgeon, Transforming APIs @ WeWork</title>
		<link>/blog/2018/07/phil-sturgeon-transforming-apis-wework/</link>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Tue, 17 Jul 2018 12:07:33 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Phil Sturgeon]]></category>
		<category><![CDATA[Transforming APIs]]></category>
		<category><![CDATA[WeWork]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=1111</guid>

					<description><![CDATA[<p>Phil Sturgeon&#160;is a Platform Engineer @ WeWork&#160;. He loves talking about APIs and working with them. He is a big advocate for API Specifications and is an extensive user of APIMatic’s Transformer. We got an opportunity to talk to him and made the most out of it. Read on to find out more about our [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/2018/07/phil-sturgeon-transforming-apis-wework/">Phil Sturgeon, Transforming APIs @ WeWork</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1111" class="elementor elementor-1111">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-fc05871 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="fc05871" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-51c53c16" data-id="51c53c16" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-2a0c22ce elementor-widget elementor-widget-text-editor" data-id="2a0c22ce" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12"><section class="section section--body">
<div class="section-divider">
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12"></div>
</div>
</div>
<div class="section-content">
<div class="section-inner sectionLayout--insetColumn">
<figure class="graf graf--figure">
<p class="mod-reset"><img class="graf-image aligncenter bg-img bg-img-1" src="/wp-content/uploads/2021/12/16M5L0qBLh9aCZJ6c1HYifw.jpg" alt="" width="800" height="320" data-image-id="1*6M5L0qBLh9aCZJ6c1HYifw.jpeg" data-width="1000" data-height="400"></p>
</figure>
<p class="graf graf--p"><a class="markup--anchor markup--p-anchor" href="https://philsturgeon.uk/" target="_blank" rel="noopener" data-href="https://philsturgeon.uk/">Phil Sturgeon</a>&nbsp;is a Platform Engineer @ WeWork&nbsp;. He loves talking about APIs and working with them. He is a big advocate for API Specifications and is an extensive user of <a class="markup--anchor markup--p-anchor" href="https://www.apimatic.io/transformer" target="_blank" rel="noopener" data-href="https://devapi.dream.press/transformer">APIMatic’s Transformer</a>. We got an opportunity to talk to him and made the most out of it. Read on to find out more about our discussion.</p>

<ol class="postList">
 	<li class="graf graf--li"><strong class="markup--strong markup--li-strong">Tell us a bit about yourself. What do you do and what’s your job about?</strong></li>
</ol>
<p class="graf graf--p">I’m working at WeWork. Most of my job is shouting at people. *laughs*. I&#8217;ve spent a lot of time working with API Specifications. Trying to open a whole bunch of things along the lines of API specs, SDK generation, etc. So basically, all the stuff that you do, I’m trying to make it happen at WeWork. Just recently, people came up with the idea that we could onboard our engineers with the API documentation.</p>
<p class="graf graf--p"><strong class="markup--strong markup--p-strong">2. How long have you been working in the API space? And how did you decide to get into this space? And what are you working on currently?</strong></p>
<p class="graf graf--p">It happened fairly naturally. I think for almost 10 years now, I’ve been working with APIs. It just seems that most of the back-end development has moved away from admin panels, CRUD, and stuff like that. Like, let’s build a hotel booking system that can handle this. But we&#8217;ve moved from that now. I spend less time creating forms, and more time handling back-end requirements.</p>
<p class="graf graf--p">Staying in this space is not really a plan, it’s a necessity. Generally, people need APIs and I cannot imagine not working on them. At WeWork, we use APIs to create meetups at WeWork locations. WeWork has access to the Meetup API and Meetup has access to the WeWork API. That’s just how the API world works. There are roughly 50 different services in the company. The way it was described to me when I joined the company was… if you wanna start a hotel, you’ll need to install hotel software. You just buy one of these pre-built packages and shove it in there and it’ll tell you everything like, how many rolls of toilet paper do you need to store on a daily basis. It has every minute detail about everything that you need. There’s nothing like that for co-working spaces.</p>
<p class="graf graf--p"><strong class="markup--strong markup--p-strong">3. Since your work revolves around API Specifications, can you let us know which one do you prefer and why?</strong></p>
<p class="graf graf--p">That’s a great question. OpenAPI and JSON schema are both currently my favorite. The main reason for that is there are only the ones that actually exist in a useful way. There are a lot of specifications around, there have been many over the years, there’s WSDL, and people have used that so much, API Blueprint was a big favorite of mine for a long time, it was really simple, it was Markdown-based, so it was a lot cleaner to write. They had meaningful indentation but the tooling wasn’t very useful, there wasn’t much tooling around, like you wanted to generate documentation there was only Apiary.</p>
<p class="graf graf--p">So I started looking around, I wanted something JSON Schema-based, there’s so much you can do with JSON schema, you can do amazing contract testing, a number of validations, JSON schema is really really cool. RAML is also a great format, but they kinda gave up on the API Specification game and started moving towards API Management, and really the only option we are left with was OpenAPI specification.</p>
<p class="graf graf--p"><strong class="markup--strong markup--p-strong">4. What is the basic use case for API Transformer for you? How does it fit in your workflow?</strong></p>
<p class="graf graf--p">We use APIMatic’s Transformer in two different ways, the general workflow is that we ask people to write OpenAPI specifications, but many of us do not want to write out a bunch of specs by hand. Quite often we get Postman Collections, API Blueprints specs, and as we acquire more companies, they bring their own formats, whatever they bring, we have it go through the API Transformer to output OpenAPI Specification. APIMatic’s Transformer allows us the flexibility to improve and upgrade things at a very early stage. Also no other specification converter can handle as many formats.</p>
<p class="graf graf--p">The other use case for API Transformer is to convert OpenAPI Specs to Postman Collections. With the transformed file, we use Postman Pro API to push these changes to Postman, this really makes documenting our APIs really easy, all we have to do is click “Save Now”, and then that would be it. It helps us form an amazing pipeline.</p>
<p class="graf graf--p"><strong class="markup--strong markup--p-strong">5. We are curious about one more thing. Have you got the chance to check out other tools and services APIMatic has to offer like SDK Generation or API Documentation?</strong></p>
<p class="graf graf--p">My goal so far has been to get teams on board with API Specifications. Anything beyond that is months away. The API Specification world is amazing, there’s so much you can do, documentation is the lowest hanging fruit, there is continuous integration, you can contract test your code, you can make sure your documentation and code are saying the same thing, and that there are no inconsistencies. I really want to get to the point where we have automatically generated SDKs and so much more, but first, we want to have our bases covered and get done with the lowest hanging fruit i.e. documentation.</p>
<p class="graf graf--p"><strong class="markup--strong markup--p-strong">6. How do you think can we improve the Transformer? How should we go ahead with the product?</strong></p>

<blockquote class="graf graf--pullquote graf--startsWithDoubleQuote">“ I think you guys are in a really interesting position and are the only solution to a problem that’s very common. People need an API Transformer, they need it to convert from one specification to another. There are loads of tooling around which suck and there’s only yours which works.&nbsp;“</blockquote>
<p class="graf graf--p">Even though this is a niche area, this is the only one and only solution available, that’s rare, that’s unique and you are lucky to have that. It’s a public service out there for anyone to use, it’ll be a shame if you guys start charging, but only fair, especially with rate limiting and all. That’s how APIs work, you do this much for free, and for the rest, you pay up. That makes sense.</p>
<p class="graf graf--p">I think focusing on producing an even better Postman Collection can be very interesting. We have been using OpenAPI to Postman Collection as I mentioned, unfortunately, it does not do much with variables there’s a feature I know you have been working on, turning the servers away, people in Postman like to switch away with staging and production, and right now output from Transformer does not cover that and I am super excited to see what guys can come up with.</p>
<p class="graf graf--p"><strong class="markup--strong markup--p-strong">7. How has the support been so far for you?</strong></p>

<blockquote class="graf graf--pullquote graf--startsWithDoubleQuote">“It’s amazing, i have never seen such a quick and positive reaction to bug fixes, every time we have a bug, the support’s like we have fixed it, this one will be done today, that tomorrow, it has always been great you know.&nbsp;“</blockquote>
<p class="graf graf--p"><strong class="markup--strong markup--p-strong">8. Also with your great insight into the API space, what emerging trends do you see?</strong></p>
<p class="graf graf--p">I don’t spend too much time imagining what’s ahead, I am just consistently trying to get people to catch up with tooling that’s already been around for 10 years. I do think we are a really interesting point where GRPC and GraphQL have caught up, they are both making people talk about types, i think API Specs are gonna be more popular, people are gonna realize GRPC and GraphQL are not a silver bullet, a lot more REST API developers are gonna care about type and type strictness.</p>

</div>
</div>
</section><section class="section section--body">
<div class="section-divider">
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">

<hr class="section-divider">

</div>
</div>
</div>
<div class="section-content">
<div class="section-inner sectionLayout--insetColumn">
<p class="graf graf--p">We are really grateful to Phil for taking out the time to talk to us and for offering us his valuable feedback. Also, we are really glad he could drive such amazing value from our offering. See what you can do with <a class="markup--anchor markup--p-anchor" href="https://www.apimatic.io/transformer" target="_blank" rel="noopener" data-href="https://devapi.dream.press/transformer">API Transformer</a> to make your life easy.</p>

</div>
</div>
</section></div>
</div>
</div>
</div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/2018/07/phil-sturgeon-transforming-apis-wework/">Phil Sturgeon, Transforming APIs @ WeWork</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Startup Support Program on Our 4th Birthday</title>
		<link>/blog/2018/05/startup-support-program-on-our-4th-birthday/</link>
		
		<dc:creator><![CDATA[Adeel Ali]]></dc:creator>
		<pubDate>Thu, 17 May 2018 07:17:58 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Startup Support Program]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=1113</guid>

					<description><![CDATA[<p>APIMatic has turned 4 this month. Last year we began a tradition of introducing something new and contributing to the community at our anniversary every year. Carrying on with the tradition, I am pleased to make a couple of announcements today: Start-up Support&#160;Program Start-up life is amazing. Dreams, energy, passion, resilience — everything is on a high [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/2018/05/startup-support-program-on-our-4th-birthday/">Startup Support Program on Our 4th Birthday</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1113" class="elementor elementor-1113">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-133d8065 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="133d8065" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-a31b824" data-id="a31b824" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-7bf583c0 elementor-widget elementor-widget-text-editor" data-id="7bf583c0" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="graf graf--p graf--hasDropCapModel graf--hasDropCap"><span class="graf-dropCap">A</span>PIMatic has turned 4 this month. Last year <a class="markup--anchor markup--p-anchor" href="https://apimatic.io/blog/2017/05//apimatic-turns-3-announcing-support-of-oas-3-0" target="_blank" rel="noopener" data-href="https://blog.devapi.dream.press/apimatic-turns-3-announcing-support-of-oas-3-0-ac27a0e164bd">we began a tradition</a> of introducing something new and contributing to the community at our anniversary every year. Carrying on with the tradition, I am pleased to make a couple of announcements today:</p>

<h3 class="graf graf--h3">Start-up Support&nbsp;Program</h3>
<p class="graf graf--p">Start-up life is amazing. Dreams, energy, passion, resilience — everything is on a high except the cash situation in the early days of a company. We love start-ups, and in order to contribute to their exciting journey, we’re starting up a start-up support program. The details are simple: if you’re an early-stage company with an ARR of less than US$1 Million, we are happy to offer <strong class="markup--strong markup--p-strong">up to a 90% discount</strong> to use the APIMatic platform. We believe this will not only help start-ups in reducing their burn rates but will also equip them with a world-class developer experience to drive API adoption. Please <a class="markup--anchor markup--p-anchor" href="https://www.apimatic.io/contact/" target="_blank" rel="noopener" data-href="https://devapi.dream.press/contact">contact us</a> for more information.</p>

<h3 class="graf graf--h3">Launching Developer Experience Portal</h3>
<p class="graf graf--p">A few months back we <a class="markup--anchor markup--p-anchor" href="https://apimatic.io/blog/2018/01//developer-experience-beyond-api-docs" target="_blank" rel="noopener" data-href="https://blog.devapi.dream.press/introducing-portals-that-speak-your-devs-language-bac82a8c573f">introduced API docs</a> which enhance developer adoption by speaking their language. Those language-specific docs greatly simplify the developer experience, and thus we named the product as Developer Experience (or DX) Portal. The portal features, particularly the advanced API console with reactive code snippets, have received an overwhelming response. I am excited to inform you that the DX Portal has come out of the beta this month.</p>
<p class="graf graf--p">Do <a class="markup--anchor markup--p-anchor" href="https://www.apimatic.io/developer-experience-portal/" target="_blank" rel="noopener" data-href="https://www.producthunt.com/posts/developer-experience-portal">give it a try</a> while keeping in mind that we are all ears for feedback.</p>

</div>
</div>
</div>
</div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/2018/05/startup-support-program-on-our-4th-birthday/">Startup Support Program on Our 4th Birthday</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Common Mistakes Developers Make In Their RAML Files</title>
		<link>/blog/2018/04/common-mistakes-developers-make-in-their-raml-files/</link>
		
		<dc:creator><![CDATA[Faria Rehman]]></dc:creator>
		<pubDate>Fri, 27 Apr 2018 10:53:45 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[Mistakes]]></category>
		<category><![CDATA[Raml]]></category>
		<category><![CDATA[Transformer]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=550</guid>

					<description><![CDATA[<p>RESTful API Modeling Language more commonly known as&#160;RAML&#160;has been around for quite some time now (more than 4 years). As its name suggests, it is an API Modeling language used by plenty of developers to design their APIs from scratch. It offers features like reusable libraries, traits, etc. that are not yet available in other [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/2018/04/common-mistakes-developers-make-in-their-raml-files/">Common Mistakes Developers Make In Their RAML Files</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="550" class="elementor elementor-550">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-6cc6a963 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="6cc6a963" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-7f2ea21" data-id="7f2ea21" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-6a0ad729 elementor-widget elementor-widget-text-editor" data-id="6a0ad729" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<figure id="attachment_551" aria-describedby="caption-attachment-551" style="width: 1024px" class="wp-caption aligncenter"><img class="wp-image-551" src="/wp-content/uploads/2021/12/1_xbbRC6Sv2SPhl_EwAXoxJQ-1024x389.png" alt="Commonly Observed Mistakes Developers Make When Converting RAML Files on Transformer" width="1024" height="389"><figcaption id="caption-attachment-551" class="wp-caption-text">Commonly Observed Mistakes Developers Make When Converting RAML Files on Transformer</figcaption></figure>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="228c" class="">RESTful API Modeling Language more commonly known as&nbsp;<a href="http://raml.org/">RAML</a>&nbsp;has been around for quite some time now (more than 4 years). As its name suggests, it is an API Modeling language used by plenty of developers to design their APIs from scratch. It offers features like reusable libraries, traits, etc. that are not yet available in other popular API description formats.</p>
<p id="4d7a" class="">In this blog, I will highlight some of the frequently seen mistakes in RAML files (for both versions <code>0.8</code>&nbsp;and&nbsp;<code>1.0</code>). If you have read my previous blog about the <a href="https://apimatic.io/blog/2018/03/common-mistakes-developers-make-in-their-openapi-3-files">common mistakes developers make in their OpenAPI 3 files</a>, you may notice some similarities which is to do with the fact that these API description formats, although serving their own distinct purposes, have a lot in common.</p>
<h2 id="282f" class="">Trying to Reference Components That Don’t Exist</h2>
<p id="ebb0" class="">The biggest portion of the RAML failures associated with developer mistakes are ones in which certain components are referenced but these references fail to get resolved. Common causes are discussed below:</p>
<h3 id="ba79" class=""><strong>Externally referenced files not provided</strong></h3>
<p id="2fc1" class="">RAML allows developers to split their API description file into multiple files and reference the components across these files using the&nbsp;<code>!include</code>&nbsp;tag. Depending on the size of the API, a RAML file is usually split into a large number of files e.g. a main RAML file, schema files, schema JSON example files, etc.</p>
<p id="871c" class="">Plenty of developers upload only their main RAML file but do not provide the other referenced files. In general, a ZIP is required or a base URL from which relative files can be loaded. Sometimes even when these are provided, the failures can still occur if there are files referenced that are not present in the uploaded ZIP file or could not be loaded relatively from the URL. Our Transformer tool performs validation of URLs/ZIP files to help indicate any such missing files. Keep an eye out on the warnings when performing your conversion to avoid failures due to missing files.</p>
<h3 id="8c17" class="">Incorrect paths/Invalid file names</h3>
<p id="760b" class="">Some common scenarios observed where developers face conversion failures in such cases is when:</p>
<ul class="">
<li>The file they are trying to reference (e.g.&nbsp;<code>IAmAFile.raml</code>) exists with a different name (e.g.&nbsp;<code>IAmAFile_Version2.raml</code>).</li>
<li>The file exists in a different directory (e.g.&nbsp;<code>Directory1/IAmAFile.raml</code>) to the one in which they are trying to locate the file (e.g.&nbsp;<code>Directory2/IAmAFile.raml</code>).</li>
<li>The file path is a URL like&nbsp;<a href="http://example.com/files/IAmAFile.raml">http://example.com/files/IAmAFile.raml</a>&nbsp;but the URL is either broken/not publicly accessible.</li>
</ul>
<h3 id="ecd4" class=""><strong>RAML components (Types, Resource Types, Traits, etc.) referenced but not defined</strong></h3>
<p id="90a9" class="">As discussed previously, RAML processing generally involves plenty of files. Developers bring in files that reference a component (like a type definition, resource type or a trait) in another file (e.g. a library) but the component is not defined in that file. It is possible that the component exists with a slightly different name or is located in some other file. This issue can occur in a single-file RAML as well.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre><code class="language-yaml">#%RAML 1.0
title: Hello world
mediaType: application/json
/helloworld:
  post:
    body:
      type: HelloMessage</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="0cc6" class="">In the above example, the request body of the&nbsp;<code>POST</code>&nbsp;method references type&nbsp;<code>HelloMessage</code>&nbsp;but this type is not declared anywhere. Since it is not a RAML primitive type, it MUST be declared under the&nbsp;<code>types</code>&nbsp;section as follows:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-yaml">#%RAML 1.0
title: Hello world
mediaType: application/json
types:
  HelloMessage:
/helloworld:
  post:
    body:
      type: HelloMessage</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="bb94" class="">Similarly, if a library type is referenced the developer needs to ensure that the definition for the type resides in that library.</p>
<h3 id="7849">You can’t reference a RAML type in a JSON Schema</h3>
<p id="19a2" class="">A very interesting mistake noted in RAML&nbsp;<code>1.0</code>&nbsp;files was that several developers try referencing RAML types from within a JSON schema definition e.g. in the following example the body schema contains a property&nbsp;<code>input</code>&nbsp;that tries referencing a RAML type&nbsp;<code>HelloMessage</code>(defined using RAML&nbsp;<code>types</code>&nbsp;component).</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre class=""><code class="language-yaml">#%RAML 1.0
title: Hello world
mediaType: application/json
types:
  HelloMessage:
    properties:
      message: string
/helloworld:
  post:
    body:
      type: |
      {
        &quot;$schema&quot;: &quot;http://json-schema.org/draft-04/schema&quot;,
        &quot;properties&quot;: {
          &quot;input&quot;: {
            &quot;type&quot;: &quot;HelloMessage&quot;
           }
         },
        &quot;type&quot;: &quot;object&quot;
       }</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="86ae" class="">This is invalid as a JSON schema definition is completely independent of the RAML specification and any types that need to be used must be defined in the root <code>definitions</code>&nbsp;of the schema itself.</p>
<h2 id="3cda">Invalid YAML Means Invalid RAML</h2>
<p id="9a50">RAML uses YAML as its underlying format. So a RAML file has to abide by the rules set by both YAML and RAML specifications. A large number of developers upload files with invalid YAML content. Some of the common causes are discussed below.</p>
<h3 id="027c">Using tab spacing which is not allowed</h3>
<p id="30f4" class="">That is correct. YAML does not allow tabs but a lot of developers still use it for the indentation of their RAML files.</p>
<h3 id="0c3b" class="">Treating YAML as case-insensitive</h3>
<p id="4455" class="">YAML is case-sensitive. Developers try referencing types named like&nbsp;<code>IAmAType</code>&nbsp;as&nbsp;<code>iamatype</code>&nbsp;which is invalid as they both are different.</p>
<h3 id="2d6c">Missing space between property key and value</h3>
<p id="d200">When defining a property, YAML requires that there be a space between the property key and the value. Developers still try and define the property like:</p>
<p id="358b"><code>property1:propertyValue</code></p>
<p id="2685">This is invalid as the correct way is:</p>
<p id="0090"><code>property1: propertyValue</code></p>
<h3 id="4ebf">Improper nesting</h3>
<p id="3243">Every nested item must be indented with two spaces inside the parent one e.g. a property property2 nested inside property1 must be declared as follows:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"><code>property1:
  property2:</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="9042" class="">This is not followed by most of the developers.</p>
<h3 id="1efc">Unescaped strings</h3>
<p id="1be1">A lot of developers forget to escape strings that contain reserved characters e.g. the following is invalid as the description field containing the reserved character&nbsp;<code>:</code>&nbsp;is not escaped properly.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre><code class="language-yaml">/helloworld:
  post:
    body:
      description: Testing: 123</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="7771">The description must be escaped using quotes as follows:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-yaml">/helloworld:
  post:
    body:
      description: &#039;Testing: 123&#039;</code></pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="ddcd">Incorrect Usage of RAML Libraries</h2>
<p id="b07d" class="">RAML introduced its users to libraries in version&nbsp;<code>1.0</code>. Developers make certain mistakes when applying these libraries.</p>
<h3 id="9df1">Declaring library content inline</h3>
<p id="ffc2" class="">A library must be defined in a RAML fragment file which is separate from the files that will reference it. The file referencing it (a master RAML file or some other fragment file) must use the&nbsp;<code>uses</code>&nbsp;property to specify a name and path to the library as shown below:</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre><code class="language-yaml">uses:
  file-type: file-type.raml</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="674d" class="">However, it is seen that a lot of developers try and define the library inline where otherwise a library path is expected:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre><code class="language-yaml">uses:
  file-type:
    types:
      File:</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="af68">This is invalid and likely to cause failures.</p>
<h3 id="1cab" class="">Using !include to load the libraries</h3>
<p id="e90c" class="">Since all external files are referenced in RAML by adding the&nbsp;<code>!include</code>&nbsp;tag before the path, it is a common mistake to do the same for when loading external libraries. This is, therefore, invalid:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre><code class="language-yaml">uses:
  file-type: !include file-type.raml</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="6803" class="">The&nbsp;<code>!include</code>&nbsp;tag is not applicable for applying libraries. Instead the library path must be specified directly as follows:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-yaml">uses:
  file-type: file-type.raml</code></pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="9c4e">Composition of Library Namespaces</h3>
<p id="152d" class="">RAML does not allow the composition of namespaces using <code>.</code>&nbsp;across multiple libraries. Developers try to reference types across multiple libraries (files, file-type) as follows which is invalid:</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre><code class="language-yaml">type: files.file-type.File</code></pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="3294" class="">Trouble Caused by a Missing Colon ‘:’</h2>
<p id="4fa5">So small and insignificant it is and yet, surprisingly, one of the reasons behind so many failures that developers make. When defining response bodies plenty of developers specify it as follows:</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre class=""><code class="language-yaml">responses:
  200:
    body:
      application/json</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="1c4c" class="">Do you see the missing colon at the end of&nbsp;<code>application/json</code>? It is what changes the meaning of the whole definition because it implies that the response body is of type&nbsp;<code>application/json</code>&nbsp;i.e.&nbsp;<code>application/json</code>&nbsp;is treated as a string value. Since the types defined in your file will definitely not contain a type named&nbsp;<code>application/json</code>, the file throws an error and fails to convert. To give this value back its original role as a media type/content type name you need to restore the colon as follows:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre><code class="language-yaml">responses:
  200:
    body:
      application/json:</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="0fb8" class="">Now it’s a media type with an empty type declaration which is allowed and won’t cause errors.</p>
<h2 id="baf6">Missing/Invalid Required RAML Version Comment Line</h2>
<p id="cc1b" class="">Relatively less frequent but common, nevertheless, are the issues that developers face when trying to convert their RAML files that do not start with the YAML comment indicating the RAML version. RAML specifications declares them mandatory for both<a href="https://github.com/raml-org/raml-spec/blob/master/versions/raml-08/raml-08.md#markup-language">RAML 0.8</a>&nbsp;and<a href="https://github.com/raml-org/raml-spec/blob/master/versions/raml-10/raml-10.md/#markup-language">RAML 1.0</a>.</p>
<p id="36bc">For RAML&nbsp;<code>0.8</code>&nbsp;</p>
<p id="36bc">it is specified as:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"><code>#%RAML 0.8</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="4669">For RAML&nbsp;<code>1.0</code>&nbsp;</p>
<p id="4669">it is specified as:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"><code>#%RAML 1.0</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="8ee2" class="">These comment lines are important because they help us distinguish your RAML files from any other YAML files. Also, any other versions specified (like <code>2.0</code>,&nbsp;<code>3.0</code>) are invalid because the only available versions are&nbsp;<code>0.8</code>&nbsp;and&nbsp;<code>1.0</code>. This is, therefore, incorrect:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"><code>#%RAML 3.0</code></pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="f4c6">Need Array Parameters? Choose RAML 1.0 not 0.8</h2>
<p id="67db" class="">The support for array parameters is available for only request/response body definitions through JSON schema specification. For all other cases (query, header, form or URI parameters) the only available types are:&nbsp;<code>string</code>,&nbsp;<code>number</code>,&nbsp;<code>integer</code>,&nbsp;<code>file</code>,&nbsp;<code>date</code>&nbsp;and&nbsp;<code>boolean</code>. A lot of developers try to use&nbsp;<code>array</code>&nbsp;type for their query parameters which is not supported and in such cases it is recommended to use RAML&nbsp;<code>1.0</code>&nbsp;which has full support for array parameters.</p>
<h2 id="2d55">Incorrect Usage of Primitive Types Available</h2>
<ul class="">
<li>The&nbsp;<code>null</code>&nbsp;type is available as&nbsp;<code>nil</code>&nbsp;in RAML 1.0. A lot of developers still try to use&nbsp;<code>null</code>&nbsp;instead.</li>
<li>The primitive date type available in RAML 0.8 is&nbsp;<code>date</code>&nbsp;while RAML 1.0 offers multiple primitive date types:&nbsp;<code>date-only</code>,&nbsp;<code>time-only</code>,&nbsp;<code>datetime-only</code>,&nbsp;<code>datetime</code>. Developers tend to confuse both and try using&nbsp;<code>date</code>&nbsp;in RAML&nbsp;<code>1.0</code>&nbsp;and&nbsp;<code>date-only</code>&nbsp;in RAML 0.8.</li>
<li>Floating-point numbers are defined by setting <code>type</code>&nbsp;to&nbsp;<code>number</code>&nbsp;and&nbsp;<code>format</code>&nbsp;to&nbsp;<code>float</code>. Developers, however, sometimes try to set type as&nbsp;<code>float</code>&nbsp;directly which is invalid.</li>
</ul>
<h2 id="b66c" class="">Nonconformance to RAML Specification</h2>
<p id="ef8f">Failing to follow the RAML specification in any way may result in failures when using any tool. A property stated to be an object but declared as an array can cause failures. Common mistakes that fall in this category are listed below:</p>
<ul class="">
<li>The<a href="https://github.com/raml-org/raml-spec/blob/master/versions/raml-08/raml-08.md#protocols">specification for RAML 0.8</a>&nbsp;states that the&nbsp;<code>protocols</code>&nbsp;property MUST be an array of strings. A lot of developers still declare it as a simple string. Similarly, the<a href="https://github.com/raml-org/raml-spec/blob/master/versions/raml-10/raml-10.md/#oauth-20">specification for RAML 1.0</a>&nbsp;declares property&nbsp;<code>scopes</code>&nbsp;as a list of strings and yet plenty of developers declare it as a simple string.</li>
<li>RAML&nbsp;<code>0.8</code>&nbsp;allows named parameters to have multiple types that can be specified as follows:</li>
</ul>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:list /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"><code>file:
  - type: string
  - type: file</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="0a7e">Developers sometimes make the mistake of declaring property&nbsp;<code>type</code>&nbsp;as an array instead which is invalid e.g.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"><code>file:
  type:
    - string
    - file</code></pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="f747">Conclusion</h2>
<p id="a9c9" class="">RAML is a format that comes bundled with plenty of features and with a large feature set comes more complexity. It is very important that the specification documents are detailed, try to cover all cases, and are free from ambiguities. Given the number of mistakes seen above, perhaps there is a need to improve the specifications currently available or a need to increase the number of tooling available for RAML to facilitate users to validate their files and fix potential issues.</p>
<p id="1c15" class="">Have RAML files of your own that you want to convert? Please head over to&nbsp;<a href="https://www.apimatic.io/transformer">Transformer</a> and start converting for free!</p>
<p class="">Thanks to&nbsp;Adeel Ali.&nbsp;</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/2018/04/common-mistakes-developers-make-in-their-raml-files/">Common Mistakes Developers Make In Their RAML Files</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>A Year with API Transformer</title>
		<link>/blog/2018/04/a-year-with-api-transformer/</link>
		
		<dc:creator><![CDATA[Faria Rehman]]></dc:creator>
		<pubDate>Fri, 20 Apr 2018 10:53:46 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Api Specs]]></category>
		<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[Open Api]]></category>
		<category><![CDATA[Usage Trends]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=592</guid>

					<description><![CDATA[<p>Developers today are actively seeking relevant tools and frameworks in order to make their API design and consumption process as easy and efficient as possible. An important part of this process is describing the API in any of the available specification formats. And since each of the API description formats come with their own toolset, [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/2018/04/a-year-with-api-transformer/">A Year with API Transformer</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="592" class="elementor elementor-592">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-20b0caaf elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="20b0caaf" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-220cb7e" data-id="220cb7e" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-4c8a6d4e elementor-widget elementor-widget-text-editor" data-id="4c8a6d4e" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-593 aligncenter" src="/wp-content/uploads/2021/12/1_NUcBLHXepZNfgEswFi9UzA.jpg" alt="A Year with API Transformer 2017" width="1000" height="400"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="15dd" class="">Developers today are actively seeking relevant tools and frameworks in order to make their API design and consumption process as easy and efficient as possible. An important part of this process is describing the API in any of the available specification formats. And since each of the API description formats come with their own toolset, the need to be able to convert between different formats is growing rapidly. This is where <a href="https://www.apimatic.io/transformer">API Transformer</a> comes into play. It offers a tool called “<strong>Convertron</strong>” which has helped many users transform their API description files from one format to another. Many popular formats like&nbsp;<a href="https://swagger.io/specification/">OpenAPI</a>, <a href="https://raml.org/">RAML</a>, etc. are supported.</p>
<p id="3fb9" class="">Over the years, API Transformer has evolved quite a lot. In particular, the year 2017 saw some important additions to the tool like the <a href="https://apimatic.io/blog/2017/05/apimatic-turns-3-announcing-support-of-oas-3-0">newly added support for OpenAPI 3</a>&nbsp; and WSDL. Many improvements were also made to the existing format parsers in which, without any doubt, the valuable feedback from our amazing users played a vital role. The year has flown away but has left behind some interesting trends and patterns that we plan to share with you today in this blog.</p>
<h2 id="38fc" class="">Trends from 2017</h2>
<p id="076a" class="">For each aspect, two kinds of data will be analyzed. One will take into account all events that occurred irrespective of the users performing these events. However, we have a handful of users who perform thousands of conversions every month. The first data gets largely skewed because of these conversions. So in the second data, to get a better picture, we try to remove this skewed behavior of the data by considering only unique events per user.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<figure id="attachment_594" aria-describedby="caption-attachment-594" style="width: 1024px" class="wp-caption aligncenter"><img class="wp-image-594" src="/wp-content/uploads/2021/12/1_nPsR6Mra5k2662q79wtUKA-1024x268.png" alt="Transformer Usage 2017" width="1024" height="268"><figcaption id="caption-attachment-594" class="wp-caption-text">Transformer Usage 2017</figcaption></figure>
<figcaption></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="has-text-align-center"><strong>Most Common Formats Brought In By Developers</strong></p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<figure id="attachment_597" aria-describedby="caption-attachment-597" style="width: 1024px" class="wp-caption aligncenter"><img class="wp-image-597" src="/wp-content/uploads/2021/12/1_hgXyTyoyGGuFaIdl79_UsA-2-1024x498.png" alt="Total vs Unique Analysis of Most Common Formats Imported" width="1024" height="498"><figcaption id="caption-attachment-597" class="wp-caption-text">Total vs Unique Analysis of Most Common Formats Imported</figcaption></figure>
<figcaption></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="3b19" class="">Out of the total imported files on Transformer (approximately 94,000), 50% were Postman 1.0 files, 25% were Postman 2.X while only 6% were OpenAPI 2.0. The second graph does not consider redundant format conversions per user e.g. if a user converted fifty Postman 1.0 and ten OpenAPI 2.0 files, he converted two unique format files (one Postman and one OpenAPI). Elimination of this redundancy shows that 24% of the imported files were defined using OpenAPI 2.0, 20% were using Postman 2.X while 10% were using WSDL. The rest falls in the smaller chunks. So the most common formats brought in by developers were&nbsp;<strong>OpenAPI</strong>&nbsp;and&nbsp;<strong>Postman</strong>.</p>
<h2 id="239f" class=""><strong>Most Common Formats Developers Loved Exporting To</strong></h2>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<figure id="attachment_598" aria-describedby="caption-attachment-598" style="width: 1024px" class="wp-caption aligncenter"><img class="wp-image-598" src="/wp-content/uploads/2021/12/1_ZxiFUSv6zuu6dZbmD4xGWQ-1024x511.png" alt="Total vs Unique Anaylsis of Most Common Formats Exported" width="1024" height="511"><figcaption id="caption-attachment-598" class="wp-caption-text">Total vs Unique Analysis of Most Common Formats Exported</figcaption></figure>
</figure>
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="49b5" class="">52% of the API description files were exported to API Blueprint while 35% to OpenAPI 2.0. Eliminating multiple exports to the same format per user, we observed that 55.5% of the files were exported to OpenAPI 2.0 while 9% to RAML 1.0. API Blueprint was not very dominant in this second case. Overall,&nbsp;<strong>OpenAPI 2.0</strong>&nbsp;seemed to take the lead for the format that developers wanted to play around with.</p>
<p id="49b5" class="">The choice of the format when exporting could have been related to several factors like size of the community, tools, and frameworks available, strong documentation, and availability of a newer and stable version with more features, to name a few. OpenAPI 2.0 and Postman 2.0/2.1 are a natural preference over their older versions (OpenAPI 1.2, Postman 1.0). Very few users prefer to export to WADL or WSDL because of limited usage and tooling.</p>
<h2 id="8dfa">Most Common Format Conversions</h2>
</div>
</div>
</div>
</div>
<!-- /wp:image -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<figure id="attachment_600" aria-describedby="caption-attachment-600" style="width: 1024px" class="wp-caption aligncenter"><img class="wp-image-600" src="/wp-content/uploads/2021/12/1_ZQQsPA96_vXC2uzHXHdzUA-1-1024x383.png" alt="Total vs Unique Analysis of Top Ten Format Conversions" width="1024" height="383"><figcaption id="caption-attachment-600" class="wp-caption-text">Total vs Unique Analysis of Top Ten Format Conversions</figcaption></figure>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="fe70" class="">We also looked at the top ten import-export mappings to understand which conversions are most popular. For the total conversions performed, the most common conversion seen was from Postman 1.0 to API Blueprint (approx 45,000 conversions) whereas if we eliminate non-unique mappings per user, import from&nbsp;<strong><em>Postman 2.X to OpenAPI 2.0</em></strong>&nbsp;was found to be the most common (approx 530). This shows that a lot of developers prefer Transformer for converting&nbsp;<strong>from Postman to other API description formats</strong>.</p>
<h2 id="4312">Geographical Usage of Formats</h2>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<figure id="attachment_601" aria-describedby="caption-attachment-601" style="width: 1024px" class="wp-caption aligncenter"><img class="wp-image-601" src="/wp-content/uploads/2021/12/1_WP6Umd8XIusdVoxazoqtQw-1024x352.png" alt="Total vs Unique Analysis of Geographical Usage of Formats" width="1024" height="352"><figcaption id="caption-attachment-601" class="wp-caption-text">Total vs Unique Analysis of Geographical Usage of Formats</figcaption></figure>
<figcaption></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="e7b3" class="">From the above graphs, you can see that users of Transformer are distributed far and wide into various geographical regions of the world. We had some users performing thousands of conversions every month from India and they constitute 52% of the total conversions represented in the first case. If multiple conversions from the same location per user are ignored, we see that 24% of the conversions occurred from the US while only 10% were performed from India. Hence, the majority of our users using Transformer in 2017 were based in the <strong>US and India.</strong></p>
<p id="019a">Note that for these graphs we eliminated data of conversions in which the locations were unknown.</p>
<h2 id="5dee" class="">Most Common Formats That Failed To Transform</h2>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<figure id="attachment_602" aria-describedby="caption-attachment-602" style="width: 1024px" class="wp-caption aligncenter"><img class="wp-image-602" src="/wp-content/uploads/2021/12/1_KOksY86ZTLjamtrzlxjHrw-1024x515.png" alt="Total vs Unique Analysis of Most Common Format Failures" width="1024" height="515"><figcaption id="caption-attachment-602" class="wp-caption-text">Total vs Unique Analysis of Most Common Format Failures</figcaption></figure>
<figcaption></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="d223" class="">Some of the users failed to transform their files (approx 8,000 which is roughly 8% of the total conversions performed). 35% of the total failed conversions were invalid/unsupported (more on this later) while 30% were RAML files (0.8/1.0) and 18% were OpenAPI files (1.X/2.0). By removing redundant failures of the same format per user, a big 44% of the chunk of failures belonged to the invalid/unsupported, 20% belonged to RAML(0.8/1.0) while 17% were OpenAPI files (1.X/2.0).</p>
<p id="2370" class="">As you can see, a large portion of failures constitutes of the&nbsp;<strong>invalid/unsupported files</strong>. These were the files which were either:</p>
<ul class="">
<li id="4bfe">Not valid API description files e.g. HTML files, JSON response data, XML schema files OR</li>
<li id="3c2a">Supported by Transformer but lacked necessary metadata that prevented proper identification e.g. API Blueprint files without “Format” and “Host” information. Some common mistakes also prevented proper identification of the files (invalid JSON, incomplete file, etc.) OR</li>
<li id="3663">Not supported by Transformer in 2017 e.g. Insomnia</li>
</ul>
<p id="aba8" class="">The rest of the conversions are largely attributed to&nbsp;<strong>RAML or OpenAPI</strong>&nbsp;files. A common cause for these is uploading a file containing external references without providing these references within the specification file.</p>
<h2 id="8308">Transformations via Web vs Transformations via API</h2>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<figure id="attachment_603" aria-describedby="caption-attachment-603" style="width: 1024px" class="wp-caption aligncenter"><img class="wp-image-603" src="/wp-content/uploads/2021/12/1_WpsbcgB_75hO87-D9AXkMA-1024x438.png" alt="Total vs Unique Comparison of Transformer Web and API Conversions" width="1024" height="438"><figcaption id="caption-attachment-603" class="wp-caption-text">Total vs Unique Comparison of Transformer Web and API Conversions</figcaption></figure>
<figcaption></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="9192" class="">API Transformer not only provides a web UI to users for performing conversions but also facilitates them by providing a simple API that offers the same functionality as the UI. In 2017, 76% of the total conversions were made using the API. However, by considering only unique web/API conversions per user shows that&nbsp;<strong>96% of the conversions were made using the web interface</strong>.</p>
<h2 id="99c8">Size of the APIs</h2>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<figure id="attachment_604" aria-describedby="caption-attachment-604" style="width: 718px" class="wp-caption aligncenter"><img class="wp-image-604" src="/wp-content/uploads/2021/12/1_TiawMyqOHqW0zjam3qmnfQ.png" alt="Analysis of Size of API for Total Conversions" width="718" height="445"><figcaption id="caption-attachment-604" class="wp-caption-text">Analysis of Size of API for Total Conversions</figcaption></figure>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="e1ee" class="">For measuring the size of an API, we considered the number of endpoints in an API. Pretty much all the APIs had less than 300 endpoints. However, a very small portion (0.39% of the total conversions and 2.61% of the unique conversions per user) of large APIs also existed that had endpoints ranging above 300.</p>
<h2 id="e9bd">Conclusion</h2>
<p id="5fe9" class="">2017 was no doubt an exciting year offering intriguing insights into<a href="https://www.apimatic.io/transformer"> API Transformer</a>. This year we plan to make Transformer even better by adding other commonly used formats like&nbsp;&nbsp;Insomnia and by improving other areas of it as well. So, stay tuned!</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/2018/04/a-year-with-api-transformer/">A Year with API Transformer</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Evolution of Developer Experience Portal UI: Case Study</title>
		<link>/blog/2018/03/evolution-of-developer-experience-portal-ui-case-study/</link>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Thu, 29 Mar 2018 11:02:52 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Case Study]]></category>
		<category><![CDATA[Design]]></category>
		<category><![CDATA[Developer Experience]]></category>
		<category><![CDATA[UI]]></category>
		<category><![CDATA[UX]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=606</guid>

					<description><![CDATA[<p>Developer Experience (DX) is the equivalent of User Experience (UX) when it comes to a developer. It’s essentially the experience, a developer goes through when making use of software products like APIs, SDKs, Client libraries, and other such tools and services. At APIMatic, we wanted to streamline the API consumption process and put all our [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/2018/03/evolution-of-developer-experience-portal-ui-case-study/">Evolution of Developer Experience Portal UI: Case Study</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="606" class="elementor elementor-606">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-7edabedc elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="7edabedc" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-3d479293" data-id="3d479293" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-97f2514 elementor-widget elementor-widget-text-editor" data-id="97f2514" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-607 aligncenter" src="/wp-content/uploads/2021/12/1_4wuljh250HKrgRLOl5MTEA-1024x576.png" alt="Evolution of Developer Experience Portal UI: Case Study" width="1024" height="576"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="3fde" class=""><strong>Developer Experience (DX) is the equivalent of User Experience (UX) when it comes to a developer.</strong></p>
<p id="dbc8" class="">It’s essentially the experience, a developer goes through when making use of software products like APIs, SDKs, Client libraries, and other such tools and services. At APIMatic, we wanted to streamline the API consumption process and put all our efforts into the <a href="https://www.apimatic.io/developer-experience-portal/"> Developer Experience Portal</a>to achieve that.</p>
<p id="91bc" class="">There are a number of services that can generate either SDKs, Documentation, or some other sort of help material to make APIs easy to work with. But none that consolidates it all on a single platform like our Developer Experience Portal. It’s a one-stop all solution for all your API needs, including SDKs in multiple languages, Language Specific Documentation, Reactive Code Samples, Test Cases, CI/CD integrations, Package publishing, and on top of that a beautiful, navigable 3 column UI, which is a pleasure to work with.</p>
<p id="e5f8" class="">Design and usability are not something people talk about when building products for developers, but the design is more than just aesthetics, it’s about effectively delivering your functionality to the end-users.</p>
<p id="baa1" class="">In this blog, we’ll discuss the thought process behind the design of our Developer Experience Portal, what we built and how we put it into existence.</p>
<h2 id="11f8" class=""><strong>Adding Developer Experience Portal into Existing Information Architecture&nbsp;</strong>(IA)</h2>
<p id="b400" class="">Adding the developer experience portal into our existing information architecture was the first step. Information architecture helps bring everyone in the team on the same page — from the stakeholders giving requirements to the design team, the dev guys, and the ones who are testing everything.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<figure id="attachment_608" aria-describedby="caption-attachment-608" style="width: 700px" class="wp-caption aligncenter"><img class="wp-image-608" src="/wp-content/uploads/2021/12/1_AnH56mPLKQmg9L8myI5Usw.jpg" alt="DX Portal Information Architecture" width="700" height="631"><figcaption id="caption-attachment-608" class="wp-caption-text">DX Portal Information Architecture</figcaption></figure>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="9c33" class=""><strong>Making a Basic Wireframe</strong></h2>
<p id="38b4" class="">After the information structure was updated, wireframes for the DX portal had to be made. A couple of brainstorming sessions and paper mock-up iterations helped in making basic wireframes for the portal — thanks to the dev team.</p>
<p id="0652">In this case study, my focus is going to be only on the documentation page. This is the wireframe that we came up with for the said page.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<figure id="attachment_609" aria-describedby="caption-attachment-609" style="width: 700px" class="wp-caption aligncenter"><img class="wp-image-609" src="/wp-content/uploads/2021/12/1_4ZUiP2bes34tucmPsnp0jA.jpg" alt="Basic Wireframe" width="700" height="616"><figcaption id="caption-attachment-609" class="wp-caption-text">Basic Wireframe</figcaption></figure>
<figcaption></figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="1c71" class="">Converting Wireframes to Mock-ups</h2>
<p id="4f8f">Based on ground level information, we got the wireframes. Beauty of a good UX process is that it is incremental in nature. So, you get really excited at every iteration but still keep iterating till you get the most stable form.</p>
<p id="bead">Wireframes are there to get you started. Don’t put extra effort to get the perfect information/requirements in the beginning. Specially in a fast paced company where you need to rapidly prototype and ship features as early as possible.</p>
<p id="01e2" class="">Moving on…we converted the wireframe into a mock-up without bothering too much about the design at this stage. The first step is to place all the elements pointed out in the wireframe and add some basic colors to it.</p>
<p id="7baa" class="">Since product design is an iterative process, we toned down the wireframe to implement a basic version of the mock-up — stripping out some of the items visible in the wireframe. Like the search bar, the navigation bar with API Name and other information, the navigation bar with the breadcrumbs and version information. All this was planned to be added in a later iteration.</p>
<p id="fa53" class="">So, this is the initial mock-up that we ended up with after wireframe conversion.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-610 aligncenter" src="/wp-content/uploads/2021/12/1_6W1S3Mp3Mop8OgArADVKUA-1024x542.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="1756" class="">Mock-up<strong>&nbsp;Testing is a Thing</strong></h2>
<p id="84b8" class="">Testing is usually referred to a running software. However, it’s a pretty important step in the design process. Testing mock-ups saves a lot of time and cost. A visually beautiful but functionally disastrous mock-up can get initial approval in no time but can become a serious bottleneck during development.</p>
<p id="024c" class="">So we just propagated the first mock-up within the team to get feedback — not about the design, but about the features it included.</p>
<p id="45fb" class="">Based on feedback and secondary brainstorming, we got rid of some unnecessary elements and took care of some other requirements. A better cleaner version was achieved.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-611 aligncenter" src="/wp-content/uploads/2021/12/1_jXA2SpWL9dKlrH7gG8Dx5g-1024x953.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="dd13" class="">Few basic UI tricks pretty much worked but we came across other few functionalities that our mock-up lacked. For example, Transformer is another feature that allows users to convert and export their API specifications into a number of formats. We needed to somehow add that into the mock-up too.</p>
<p id="6f44" class="">We also noticed that all languages listed were competing against each other visually. The increasing weight of the selected element does the work but it’s better to lower down the opacity of the remaining elements. This not only makes the selected element prominent but also lowers down the overall weight.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-612 aligncenter" src="/wp-content/uploads/2021/12/1_tzlc2gJ4Hud-ZcK30yG7Gg-1024x245.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">While we were still in the process of testing the mock-ups, we came across the requirement that there were templates against every language that was to be available for selection. Therefore, we needed to add a selection hierarchy to the mock-up as well. So, we added templates and a secondary selection stripe and removed the space above the languages listing, which wasn’t being utilized.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<figure id="attachment_613" aria-describedby="caption-attachment-613" style="width: 1024px" class="wp-caption aligncenter"><img class="wp-image-613" src="/wp-content/uploads/2021/12/1_hpDekSqcTkMKN4p4i46vWQ-1024x245.jpg" alt="Templates added" width="1024" height="245"><figcaption id="caption-attachment-613" class="wp-caption-text">Templates added</figcaption></figure>
</figure>
<!-- /wp:image -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<figure id="attachment_614" aria-describedby="caption-attachment-614" style="width: 1024px" class="wp-caption aligncenter"><img class="wp-image-614" src="/wp-content/uploads/2021/12/1_IXZobuxTyQBXi0T-IqICMA-1024x314.jpg" alt="Top Navbar added" width="1024" height="314"><figcaption id="caption-attachment-614" class="wp-caption-text">Top Navbar added</figcaption></figure>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="1ed7" class=""><strong>Reiterations and Design Improvements</strong></h2>
<p id="1ff1" class="">We, at APIMatic, believe in constantly improving our products. Soon the team took the decision to add some additional features to the portal and that required some massive changes to the UI. An all-new API console and Reactive Code Samples were the biggest reason behind that massive overhaul. We didn’t waste any time and to accommodate the new requirements, we moved from the fixed-width design we already had and decided to go with the full width one. We also improved the left navigation and the overall typography of the portal.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-615 aligncenter" src="/wp-content/uploads/2021/12/1_qr_fV2S7odipEfAM-lWq_A.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-616 aligncenter" src="/wp-content/uploads/2021/12/1_jsgpiwdAP_6mFkktSeLFBA.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="8b1a">At this point, we were quite satisfied with the results but kept on questioning our design like how to make it sleeker as well as more functional.</p>
<p id="9367" class="">Eventually, we realized that we were using too many navigation bars on top. Four navigation bars sound even more ridiculous than it seems. We tried to minimize that in our next iteration by putting languages into a drop-down and listing templates next to the drop-down.</p>
<p id="00d4" class="">We decided to get rid of the language icons again as they were taking a lot of space.</p>
<p id="42e1" class="">Furthermore, the Download SDK and Export buttons were placed on the same bar. The breadcrumb bar was also taking space and it wasn’t very useful as there was only one navigable page before it.</p>
<p id="d998" class="">So, to tackle that we converted that into a home button and put it on top. Version selection was also shifted to the top bar.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-617 aligncenter" src="/wp-content/uploads/2021/12/1_XH_oE_6jPJJC6bDlgSvyRg-1024x233.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">Another thing that was bothering the users and us as well, was the console and the code samples being in the same column. On smaller screens, both appeared very congested and using the console with such a small height was really a bad experience.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<figure id="attachment_618" aria-describedby="caption-attachment-618" style="width: 680px" class="wp-caption aligncenter"><img class="wp-image-618" src="/wp-content/uploads/2021/12/1_5Xhq5UhbYeMAd-4LIACuWA.jpg" alt="Scrolling through console and code with such limited space was a hassle" width="680" height="675"><figcaption id="caption-attachment-618" class="wp-caption-text">Scrolling through console and code with such limited space was a hassle</figcaption></figure>
<figcaption></figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p>We decided to place the console in the center column which gave a lot of breathing space for both.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-619 aligncenter" src="/wp-content/uploads/2021/12/1_rAtQQHHlkuzhyX8e4aJ2XQ.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-621 aligncenter" src="/wp-content/uploads/2021/12/1_31zYlt0J8kx29z1vjS0Dlw-1-1024x630.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p>Following is the form we got after putting the console in the middle column. We also gave a makeover to the “TRY IT OUT” and “COPY” buttons on the bottom right.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-622 aligncenter" src="/wp-content/uploads/2021/12/1_SDcZ4fTeCx0eSsD5RHPThw-1024x576.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="f141"><strong>Conclusion</strong></h2>
<p id="ac9c" class="">Once you’ve released a feature, you make design and flow decisions based on how people are using it. We use a tool that provides us with real-time user interactions. It enables us to see how people are interacting with our product. It is really helpful in making design and flow decisions and helped us improve upon the design of our product.</p>
<p id="7830" class="">We are glad to be moving in the right direction with our UI and intend to keep on improving the UX and the DX of our products. We believe in the concept of making things easier for developers and always design our products accordingly.</p>
<p id="d043" class="">&nbsp;</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/2018/03/evolution-of-developer-experience-portal-ui-case-study/">Evolution of Developer Experience Portal UI: Case Study</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>How Automation Leveled Up Idfy&#8217;s Digital Identity Game</title>
		<link>/blog/2018/03/how-automation-leveled-up-idfys-digital-identity-game/</link>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Thu, 22 Mar 2018 11:56:02 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[API adoption]]></category>
		<category><![CDATA[Idfy]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=1117</guid>

					<description><![CDATA[<p>Automation was the tool that ended up giving Idfy a competitive advantage. It helped them expand their services to multiple developer platforms, and improve their API’s adoption as well as developer experience — all without substantial effort from their end. Idfy is a Norwegian API provider which helps businesses integrate services such as authentication, electronic seals, and [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/2018/03/how-automation-leveled-up-idfys-digital-identity-game/">How Automation Leveled Up Idfy&#8217;s Digital Identity Game</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1117" class="elementor elementor-1117">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-cad84ba elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="cad84ba" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-39115125" data-id="39115125" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-541ee79d elementor-widget elementor-widget-text-editor" data-id="541ee79d" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<figure class="graf graf--figure">
<p class="mod-reset"><img class="graf-image aligncenter" src="/wp-content/uploads/2021/12/1P_qbdTgvQotE2aYwYg1MZA.jpg" data-image-id="1*P_qbdTgvQotE2aYwYg1MZA.jpeg" data-width="800" data-height="280"></p>
</figure>
<p class="graf graf--p graf--hasDropCapModel graf--hasDropCap"><span class="graf-dropCap">A</span>utomation was the tool that ended up giving Idfy a competitive advantage. It helped them expand their services to multiple developer platforms, and improve their API’s adoption as well as developer experience — all without substantial effort from their end.</p>
<p class="graf graf--p"><a class="markup--anchor markup--p-anchor" href="https://www.idfy.io/" target="_blank" rel="noopener" data-href="https://www.idfy.io/">Idfy</a> is a Norwegian API provider which helps businesses integrate services such as authentication, electronic seals, and signing for applications in their products. They have customers in the real estate business, banking, and financial sector.</p>
<p class="graf graf--p">We had the opportunity of talking to <a class="markup--anchor markup--p-anchor" href="https://www.linkedin.com/in/runesy/" target="_blank" rel="noopener" data-href="https://www.linkedin.com/in/runesy/">Rune</a>, the CTO of Idfy to discuss how they utilize APIMatic to target different developer platforms.</p>

<blockquote class="graf graf--pullquote"><em class="markup--em markup--pullquote-em">APIMatic enables us to deliver on platforms that we wouldn’t be able to do so otherwise. And allows us to offer a complete developer experience without having all these resources in-house — Rune</em></blockquote>
<ul class="postList">
 	<li class="graf graf--li"><strong class="markup--strong markup--li-strong">So Rune, tell me a little about yourself. What do you basically do for Idfy, and how did you get here?</strong>
In 2008 I started working in a company that dealt with real estate software. And Idfy is a spin-off from that company. We founded Idfy in 2012 and had this as a side-business until 2015. Eventually, we hired more people and got the company moving. And from November 2017, I joined Idfy as the full-time CTO.</li>
</ul>
&nbsp;
<ul class="postList">
 	<li class="graf graf--li"><strong class="markup--strong markup--li-strong">What is Idfy’s mission? What does Idfy essentially work on?
</strong>We are working on providing a trust service platform for integrating PKI-based eIDs and other products related to trust services and digital transaction management. This can be used for many purposes, particularly in Europe. Digital identities have mostly been used in banking, but now the usage is increasing to a wide range of applications and sectors. For instance, today you can use eIDs to apply for loans, for buying homes, for bidding in real estate, for doing your taxes, signing your rental agreement, or even when you are starting a company. So, we provide APIs to ease the implementation and also provide a common API between different eIDs in Europe. We also create custom APIs for some of our customers. But mainly we are a SaaS company delivering APIs with short time-to-market and an excellent developer experience.</li>
</ul>
&nbsp;
<ul class="postList">
 	<li class="graf graf--li"><strong class="markup--strong markup--li-strong">Why is it important for Idfy to make life easy for developers?
</strong>Providing an excellent developer experience is a core part of our strategy and a way for us to differentiate Idfy from other providers of similar services. We want our customers to be able to get up and running with our APIs quickly and hassle-free. We want to be a developer-centric company and a preferred provider of trust services to developers. We strive to make our APIs the easiest to work with and with the shortest time-to-market compared to our competitors.</li>
</ul>
<p class="">&nbsp;</p>

<ul class="postList">
 	<li class="graf graf--li"><strong class="markup--strong markup--li-strong">How many APIs do you work with? And how do you deal with API changes — as in, keeping SDKs, API definitions &amp; documentation updated?</strong>
We have mainly one API and a lot of microservices built around it. Then there is a Swagger definition that is used for generating the SDKs. And there are multiple other APIs in the pipeline as well.</li>
</ul>
&nbsp;
<ul class="postList">
 	<li class="graf graf--li"><strong class="markup--strong markup--li-strong">Can you tell me how you actually came across APIMatic?</strong>
I read a blog on it. I was investigating multiple SDK companies and I read an article from the API Evangelist. He had a <a class="markup--anchor markup--li-anchor" href="https://apievangelist.com/2015/06/06/comparison-of-automatic-api-code-generation-tools-for-swagger/" target="_blank" rel="noopener" data-href="https://apievangelist.com/2015/06/06/comparison-of-automatic-api-code-generation-tools-for-swagger/">list of all services that created SDKs</a> and in that list he said that he tried multiple tools for SDK creation but no other tool matched the <a class="markup--anchor markup--li-anchor" href="https://docs.apimatic.io/generate-sdks/overview-sdks" target="_blank" rel="noopener" data-href="https://blog.devapi.dream.press/introducing-code-standard-compliant-sdks-ee05f5c59ed4">quality of APIMatic’s generated SDK </a>. So, I tried it out and it worked!</li>
</ul>
&nbsp;
<ul class="postList">
 	<li class="graf graf--li"><strong class="markup--strong markup--li-strong">Before using APIMatic, how were you managing SDK generation? Did you consider doing SDKs manually?</strong>
Yes. We created&nbsp;.NET SDKs manually — for a long time. But we wanted SDKs in PHP, Node etc. And that was a little bit outside of scope for us, so we started to look at ways of generating SDKs from Swagger files.</li>
</ul>
&nbsp;
<ul class="postList">
 	<li class="graf graf--li"><strong class="markup--strong markup--li-strong">Why did you switch to automatic SDK generation then?</strong>
Through our internal process, we found out that it took 5–10 hours to create SDKs for an API in 1 language. But then we also had to maintain it. And we did not want any manual maintenance because that is always something that could easily be forgotten. We wanted to automate everything. So that when we changed our API, that would automatically generate an updated Swagger file, and then automatically call the <a class="markup--anchor markup--li-anchor" href="https://www.apimatic.io/apidocs/apimatic/" target="_blank" rel="noopener" data-href="https://devapi.dream.press/apidocs/cgaas-api/">APIMatic API</a> to update the SDKs. So, we wanted all that to be done automatically.</li>
</ul>
<blockquote class="">Now, we can deploy SDKs in 8 languages in the same time as it took to deploy SDKs in 1 language before. That would never be possible before we used APIMatic — Rune</blockquote>
<ul class="postList">
 	<li class="graf graf--li"><strong class="markup--strong markup--li-strong">What is the main use case that you use APIMatic for? And how has your experience been with it so far?
</strong>It is the SDK generation and the part where you can automatically test the SDKs in real-time. Our experience has been great. We had some small issues with our own Swagger definitions in the beginning, but we quickly got this ironed out, and then everything worked fine.</li>
</ul>
&nbsp;
<ul class="postList">
 	<li class="graf graf--li"><strong class="markup--strong markup--li-strong">How long did it take for you to publish updated SDKs &amp; docs after API changes before using APIMatic and how long does it take now?
</strong>Now, we can deploy SDKs in 8 languages in the same time as it took to deploy SDKs in 1 language before. That would never have been possible before we used APIMatic.</li>
</ul>
&nbsp;
<ul class="postList">
 	<li class="graf graf--li"><strong class="markup--strong markup--li-strong">How has your experience been with APIMatic so far? I’m talking specifically about the quality of the SDK, the code, and the developer portal.
</strong>The quality is very good. However, the SDK creation process should be revamped, so that SDKs would look more like they are human created. I would also suggest making the code look cleaner.</li>
</ul>
&nbsp;
<ul class="postList">
 	<li class="graf graf--li"><strong class="markup--strong markup--li-strong">Would you say that APIMatic has helped you save development costs? If so, tell me a little more about it?
</strong>APIMatic enables us to supply our customers with SDKs in eight different languages at the same cost as for a manually created SDK in one language before.</li>
</ul>
&nbsp;
<ul class="postList">
 	<li class="graf graf--li"><strong class="markup--strong markup--li-strong">Taking that a little further, would you say that APIMatic has helped you improve your Developer Experience?
</strong>Yes, it definitely has! Because, as I said, now we have <a class="markup--anchor markup--li-anchor" href="https://developer.idfy.io/sdk#/" target="_blank" rel="noopener" data-href="https://developer.idfy.io/sdk#/">SDKs in multiple languages</a> and we have a developer portal with live testing of code. So, we are able to help even more developers reduce time-to-market by using your product.</li>
</ul>
&nbsp;
<ul class="postList">
 	<li class="graf graf--li"><strong class="markup--strong markup--li-strong">So tell me a little about Idfy’s future plans. And how does APIMatic fit in with these plans?
</strong>We have plans to create more APIs. So we will have great use of APIMatic to deliver our APIs to more customers. And we are also looking at new products that would require us to create APIs for customers who do not have the knowledge or experience of creating APIs. And SDK components will be very useful because it will enable our customers to reach a wider developer audience as well.</li>
</ul>
<p class="">&nbsp;</p>

<ul class="postList">
 	<li class="graf graf--li"><strong class="markup--strong markup--li-strong">What will you take away as the highlight from using APIMatic?
</strong>That APIMatic enables us to deliver on platforms that we would not be able to support ourselves. For instance, we do not have any people that could create a Go SDK.</li>
</ul>
<blockquote class="graf graf--pullquote">APIMatic allows us to be a complete API company without having language-specific knowledge on all platforms in-house. — Rune</blockquote>
<ul class="postList">
 	<li class="graf graf--li"><strong class="markup--strong markup--li-strong">What would you say is your most favorite feature of APIMatic?
</strong>The <a class="markup--anchor markup--li-anchor" href="https://www.apimatic.io/continuous-code-generation/" target="_blank" rel="noopener" data-href="https://devapi.dream.press/code-generation-as-a-service">SDK Generation</a> — the fact that it enables us to concentrate on creating the APIs and not the SDKs. Because we want to focus on our core products. And it is nice to have a company that can do this for us.</li>
</ul>
<p class="">&nbsp;</p>

<ul class="postList">
 	<li class="graf graf--li"><strong class="markup--strong markup--li-strong">How has our support been, with regards to ironing out issues that you came across?</strong>
Initially, we communicated through emails and that was frustrating. But when we got access to the &nbsp;Slack channel and established a relationship, everything was much smoother. We had some issues that needed to be taken care of and were able to get those fixed quickly. That was a huge improvement. Now we are able to communicate on Slack and get our issues fixed very quickly.</li>
</ul>
<p class="graf graf--p">We really appreciate Rune for taking out the time to talk to us.</p>

</div>
</div>
</div>
</div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/2018/03/how-automation-leveled-up-idfys-digital-identity-game/">How Automation Leveled Up Idfy&#8217;s Digital Identity Game</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Revamped HTTP docs on API Portal </title>
		<link>/blog/2018/03/revamped-http-docs-on-api-portal/</link>
		
		<dc:creator><![CDATA[Mehdi Raza Jaffery]]></dc:creator>
		<pubDate>Thu, 22 Mar 2018 07:29:54 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[API portal]]></category>
		<category><![CDATA[HTTP docs]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=1115</guid>

					<description><![CDATA[<p>The fight for improving the Developer Experience in API portals is not over yet! In fact, we have just released a major revamp of HTTP documentation to all our customers. ? Let’s see the new features in detail. ?‍? New Curl&#160;Examples Our HTTP docs now show an API console with Curl commands for each endpoint. [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/2018/03/revamped-http-docs-on-api-portal/">Revamped HTTP docs on API Portal </a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1115" class="elementor elementor-1115">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-40634189 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="40634189" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-3aeecd17" data-id="3aeecd17" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-f4ed760 elementor-widget elementor-widget-text-editor" data-id="f4ed760" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<figure class="graf graf--figure graf--layoutOutsetCenter">
<p class="mod-reset"><img class="graf-image aligncenter" src="/wp-content/uploads/2021/12/1SQYPnI16EpWWMQt-5eC0lQ.png" data-image-id="1*SQYPnI16EpWWMQt-5eC0lQ.png" data-width="1346" data-height="630"></p>
</figure>
<p class="graf graf--p">The fight for improving the <a class="markup--anchor markup--p-anchor" href="https://apimatic.io/blog/2018/01//developer-experience-beyond-api-docs" target="_blank" rel="noopener" data-href="https://blog.devapi.dream.press/introducing-portals-that-speak-your-devs-language-bac82a8c573f">Developer Experience in API portals</a> is not over yet!</p>
<p class="graf graf--p"><strong class="markup--strong markup--p-strong">In fact, we have just released a major revamp of HTTP documentation to all our customers. ?</strong></p>
<p class="graf graf--p">Let’s see the new features in detail.</p>

<h2 class="graf graf--h3">?&#x200d;? New Curl&nbsp;Examples</h2>
<p class="graf graf--p">Our HTTP docs now show an API console with <em class="markup--em markup--p-em">Curl </em>commands for each endpoint.</p>

<h3 class="graf graf--h4">What is Curl, you&nbsp;say?</h3>
<p class="graf graf--p">It is a nifty tool for making HTTP calls from the terminal, popular with developers. <a class="markup--anchor markup--p-anchor" href="https://curl.haxx.se/" target="_blank" rel="noopener" data-href="https://curl.haxx.se/">Curl</a> can be installed on Linux, MacOS and Windows.</p>
<p class="graf graf--p">Here’s what a simple Curl command looks like that sends a GET request along with an Accept header:</p>

<pre><code class="language-bash">curl &#039;https://demo.api-platform.com/books&#039; \
  -H  &#039;accept: application/json&#039;</code></pre>
<h2 class="graf graf--h4">What’s in our Curl Examples?</h2>
<p class="graf graf--p">Our API portal uses examples from the API description file to create Curl commands which are then shown in the endpoint documentation.</p>

<figure class="graf graf--figure graf--layoutOutsetCenter">

<figure style="width: 1200px" class="wp-caption aligncenter"><img class="graf-image" src="/wp-content/uploads/2021/12/1lpAoe9714CxWsQiEVP3ceg.png" alt="Curl example for sending an API call via Telstra’s API" width="1200" height="591" data-image-id="1*lpAoe9714CxWsQiEVP3ceg.png" data-width="1214" data-height="598"><figcaption class="wp-caption-text">Curl example for sending an API call via Telstra’s API</figcaption></figure>

<figcaption class="imageCaption"></figcaption></figure>
<p class="graf graf--p">Check out how the Curl command contains all the right headers; it even caters to API authentication and the body format of the request.</p>
<p class="graf graf--p">In fact, the Curl examples fully integrate with the <strong class="markup--strong markup--p-strong">API Console letting the user change the endpoint parameters while those changes are reflected in the example live.</strong></p>

<figure class="graf graf--figure graf--layoutOutsetCenter">
<p class="mod-reset"><img class="graf-image aligncenter" src="/wp-content/uploads/2021/12/1Mm9lrSK4xZh__Ysy_TJ6pg.gif" data-image-id="1*Mm9lrSK4xZh__Ysy_TJ6pg.gif" data-width="1110" data-height="356"></p>
</figure>
<p class="graf graf--p">The user can just copy and paste the Curl command in their favorite terminal to run it.</p>

<h2 class="graf graf--h3">? Improved Authentication docs</h2>
<p class="graf graf--p">Our Authentication section now shows detailed docs for common authentication types such as HTTP basic, OAuth 2, and custom API keys.</p>
<p class="graf graf--p"><strong class="markup--strong markup--p-strong">These docs include Curl examples so that the users can try them out in the terminal.</strong> Check out this example for an API that uses OAuth 2 Client Credentials grant:</p>

<figure class="graf graf--figure">

<figure style="width: 800px" class="wp-caption aligncenter"><img class="graf-image" src="/wp-content/uploads/2021/12/12BiQXttPHNRGiD8cKuvahg.png" alt="Example of auto-generated Auth&nbsp;docs" width="800" height="421" data-image-id="1*2BiQXttPHNRGiD8cKuvahg.png" data-width="969" data-height="510"><figcaption class="wp-caption-text">Example of auto-generated Auth&nbsp;docs</figcaption></figure></figure>
<p class="graf graf--p">All of this is auto-generated from the API definition file!</p>

<h2 class="graf graf--h3"><img src="https://s.w.org/images/core/emoji/13.1.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /> Can your Portal do&nbsp;this?</h2>
<p class="graf graf--p">Our API portals have:</p>

<ul class="postList">
 	<li class="graf graf--li"><a class="markup--anchor markup--li-anchor" href="https://docs.apimatic.io/publish-apis/api-console" target="_blank" rel="noopener" data-href="https://docs.devapi.dream.press/developer-experience-portal/api-console/">API console with Reactive Code Samples</a></li>
 	<li class="graf graf--li">Language-specific documentation (for 10 languages)</li>
 	<li class="graf graf--li">Lots of other goodies&nbsp;<img src="https://s.w.org/images/core/emoji/13.1.0/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></li>
</ul>
<p class="graf graf--p"><a class="markup--anchor markup--p-anchor" href="https://www.apimatic.io/developer-experience-portal/" target="_blank" rel="noopener" data-href="https://devapi.dream.press/developer-experience-portal">Give our portal generator</a>&nbsp;a try!</p>

</div>
</div>
</div>
</div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/2018/03/revamped-http-docs-on-api-portal/">Revamped HTTP docs on API Portal </a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Building REST APIs the Right Way</title>
		<link>/blog/2018/03/building-rest-apis-the-right-way/</link>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Thu, 15 Mar 2018 11:02:51 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Api Lifecycle]]></category>
		<category><![CDATA[Software Development]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=576</guid>

					<description><![CDATA[<p>Let’s be honest, if you want developers to make use of your APIs, you need to make sure they deliver. And despite the incredible functionality and value your API brings to the table, if it is not designed or implemented well, it may never become a cult favorite or something developers are going to recommend [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/2018/03/building-rest-apis-the-right-way/">Building REST APIs the Right Way</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="576" class="elementor elementor-576">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-11ed5981 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="11ed5981" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-54793eb0" data-id="54793eb0" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-553bcc0f elementor-widget elementor-widget-text-editor" data-id="553bcc0f" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter wp-image-577 size-large" src="/wp-content/uploads/2021/12/1_N-9YGz-Hv6J6IvZ3yeelFg-1024x546.jpg" alt="Building REST APIs the Right Way" width="1024" height="546"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="8ae5" class="">Let’s be honest, if you want developers to make use of your APIs, you need to make sure they deliver. And despite the incredible functionality and value your API brings to the table, if it is not designed or implemented well, it may never become a cult favorite or something developers are going to recommend to their peers.</p>
<p id="472a" class="">Just like any interface, the goal with an API should be to provide a seamless experience that gets users (developers) building fast and easy. And this is not something that happens by mere chance or luck, instead, this is something API teams need to force into existence.</p>
<p id="44ac" class="">While there is no certain formula to build APIs developers love, there are a few practices and patterns you can follow to ensure you put out the best for your users, something that is familiar yet comfortable and gets them to complete their desired actions without any sort of hassle.</p>
<p id="53ad" class="">In the blog, we will discuss some of the steps you can take — from design to consumption — to ensure you end up with APIs that see both developer popularity and adoption.</p>
<h2 id="c8f3" class="">1. Think, Plan, Strategize</h2>
<blockquote class="wp-block-quote">
<p><em>“Give me six hours to chop down a tree and I will spend the first four sharpening the axe.“ ~Abraham Lincoln</em></p>
</blockquote>
<p id="d6fb" class="">Every good thing starts with a plan, and that’s how you should start with your API. You cannot simply come up with an API just because you want to, you need to put solid research into it. You should know what kind of users are you targeting, why would they want an API from you, how are they going to make use of that API and what value are they going to get out of it. Understanding the market is also crucial, do you have competition already offering what you have? How are you going to top them? Can you even compete in your niche? If not then is it even worth working on it?</p>
<p id="f618">Once you have answers to these questions, work on your Business Model. Decide if you want to go for an External or Internal API? In the case of External API, would you like to open it to the Public or your Partners only? Plan how would you monetize it. You could start from the freemium model but then again can you really afford to do that? Always remember the strategy you chose to address these concerns should be well aligned with your needs and objectives.</p>
<p id="f724" class="">When planning, it’s also important to list what your API needs to do. List in detail, the features you intend to implement, at this stage you don’t need to worry about “Hows”, just focus on the “Whats”. Involve your potential consumers if you can, take their feedback, and prioritize your efforts accordingly. Build user stories and personas based on that feedback and make sure your use cases qualify for that.</p>
<h2 id="8e2e" class="">2. Design is Everything</h2>
<p id="4620" class="">Once you are done with the initial planning, you need to translate that to design. Many API teams will miss out on the step and jump straight into development, and then go through several iterations over and over again to perfect the initial architecture. But with changing times and practices the&nbsp;<strong>Design First</strong>&nbsp;approach is becoming more of a hit rather than a miss.</p>
<p id="7afa" class="">With the approach, your plan is converted into a human and machine-readable contract called the API Description. The description exposes all of your resources and methods and helps you identify bugs and fixes in the early stages of your API. To execute this you can make use of design tools such as Stoplight or Mulesoft, or APIMatic’s own specification editor.</p>
<p id="c3bd" class="">Designing your API before implementing also allows you to take user feedback with the help of API mockups. You can incorporate this feedback into your work to make sure you end up with a flawless product. A well-composed API Description can also be effectively used by your developers to understand how to best work with your API.</p>
<p id="0021" class="">It’s really important to adhere to your Design throughout your API Lifecycle and if any flaws are recognized during the implementation phase, you should go back to ground zero to alter your design instead of making amends on the go.</p>
<h2 id="05e0" class="">3. Code For a Developer</h2>
<blockquote class="wp-block-quote">
<p><em>“Any fool can write code that a computer can understand. Good programmers write code that humans can understand.” ~Martin Fowler</em></p>
</blockquote>
<p id="ec65" class="">Always remember when working with APIs, you are essentially producing code for developers, and for that reason your code should be fairly simple and self-explanatory. Not every developer in the world works with the same tools hence your code should not be tied to a certain technology stack and should be consumable in any environment. There are certain norms and conventions you can follow when implementing your API and although not the word of law, can really help with API adoption.</p>
<h2 id="e7c7" class="">4. Taxonomy Runs the Show</h2>
<p id="8e09">Your API should require as little Documentation as possible to get running. Conforming to the correct taxonomy and naming conventions is the key to that.</p>
<p id="5cf0" class="">Starting with Resources, always use nouns and in the plural form to name them. This keeps your resources flexible and decoupled from your methods and actions. Avoid naming Endpoints as such:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre class=""><code class="language-bash">/createaccount
/deleteaccount
/listaccount
/editaccount</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="7ee2" class="">Verbs as you can see, are tightly coupled to a specific action and limit your resource. But by using nouns and then taking advantage of HTTP Action Verbs such as (GET, POST, PUT) you get the freedom to reuse resources, which enables you to accomplish multiple tasks.</p>
<p id="3056">Ideal endpoints should look like this:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre><code class="language-bash">/accounts
/accounts/1/names
/customers</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="c79d" class="">It’s very important that you never deviate from the norms and conventions to not mislead developers. For instance, when working with HTTP Action Verbs, use the standardized commands for each action. To create a new record, always use “POST”, to read a record, use “GET” and similarly “PUT” and “PATCH” when making updates, and “DELETE” to delete a record. Mixing these up or not using any of these verbs for their intended action such as passing the data as query string when telling developers to use the “POST” command could cause utter confusion.</p>
<p id="8539" class="">Another case where following the correct taxonomy is very important is with error messages, always effectively communicate with the developers about what’s going wrong, for example: in the case of REST APIs, use the standard HTTP Error codes to avoid any confusion. Other popular error message formats include Google Errors, vnd. error, and JSON API’s error format.</p>
<h2 id="0736" class="">5. Multiple Data Formats Will Keep Your API Alive</h2>
<p id="9c0e" class="">When working with APIs, JSON has been the format of choice for many, but often your consumers may find themselves working with a different data format. For this purpose, always use a Content-Type Header which decouples your API’s dependency from a certain format. A Content-Type Header can easily determine what format of data are users requesting so your API could respond to them accordingly. Also, technology keeps on changing and evolving, and just like JSON replaced XML, we may (or may not) see YAML replacing JSON in the future and to avoid your API from going obsolete it’s only logical to support as many data formats as you can.</p>
<p id="a10b">A sample query with a content-type header in HTTP looks like this:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre class=""><code class="language-http">POST /sample HTTP/2.1
Content-Length: 74567
Content-Type:multipart/form-data; boundary= — — — — — — — — — — — — — -974767299852498929531610575
Content-Disposition: form-data; name=”description” </code></pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="93c6" class="">6. Hypermedia: A Dilemma</h2>
<p id="f3ee" class="">(HATEOAS) or Hypermedia as the Engine of Application State is another great practice to assist developers to consume your API. With the hypertext links, you can easily guide developers to discover paths and features right when they are implementing your API.</p>
<p id="881e">For Example:</p>
<ul>
<li>The following code contains an Account Object:</li>
</ul>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:preformatted -->
<pre class=""><code class="language-java">class Account {
    String name;
    String id;
}</code></pre>
<!-- /wp:preformatted -->

<!-- wp:list -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<ul>
<li>A normal JSON response is normally rendered as:</li>
</ul>
</div>
</div>
</div>
</div>
<!-- /wp:list -->

<!-- wp:preformatted -->
<pre><code class="language-json">{
    “name”: “John”,
    “id”: “1”
}</code></pre>
<!-- /wp:preformatted -->

<!-- wp:list -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<ul>
<li>HATEOAS response will look like this:</li>
</ul>
</div>
</div>
</div>
</div>
<!-- /wp:list -->

<!-- wp:preformatted -->
<pre><code class="language-json">{
    &quot;name&quot;: &quot;John&quot;,
    &quot;links&quot;: [{
        &quot;rel&quot;: &quot;self&quot;,
        &quot;href&quot;: &quot;http://localhost:8080/account/1&quot;
    }]
}</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="3034" class="">Here, “rel” means relationship, and “self” means a self-referencing hyperlink. The “href” is the URL address that uniquely defines the resource. Concise instructions as such make it really easy for developers to navigate and make calls.</p>
<p id="3f23">HATEOAS is also a great way to introduce new features. Instead of making developers go through release notes, you can just direct them to new paths and actions using these hypertext links. Although not completely killing the need for documentation, HATEOAS has greatly reduced the reliance of developers on API documentation for every other call.</p>
<p id="bb44" class="">Where many people believe in hypermedia as the means of defining user experience, there are some that consider it as unnecessary bloatware. The common thought is, you are developing an API for a completely unknown consumer and it’s impossible to provide valuable information to direct the user or client to the next possible action. Some even argue that by adding additional links to your responses, you are increasing the load on your servers, marginally slowing down your response time.</p>
<p id="3c7f" class="">However, despite skeptics, many API frameworks now include hypermedia specs and it’s something that is being widely adopted. When done well enough and supported with thorough documentation, hypermedia will always help with the consumption of your API, that’s what we believe in.</p>
<h2 id="c388" class="">7. Test Everything</h2>
<p id="492b" class="">Your API should be thoroughly tested before every new release. Create test cases for all possible API inputs combination, test for failure, and invalid parameters. Test how your API deals with unforeseen circumstances and make sure they are dealt away with proper response codes. Stress-test your API as well, see how it handles the additional load. Run “Data Type Validation” tests, to confirm the data connected to objects is accurate and that all URLs are properly formed. All routes should be tested as well to verify that they invoke the correct operation. Ensure that there is no mismatches between routes. Also, verify that routes are protected properly with suitable authentication methods.</p>
<p id="9484">Test all possible combinations of request headers that a client can specify and make sure that your API responds to them accordingly. In case objects demand parameters, test query strings as well to see if they produce the desired outcome.</p>
<p id="c966" class="">There is no GUI available when working with APIs which makes it really hard to test them but there are certain tools such as&nbsp;&nbsp;Postman and Request Bin that can be used to make API testing easier. You can specify test cases when designing your API as well in the API Description, and there are services that will generate test cases for you in languages of your choice.</p>
<p id="cc86" class="">Again, at end of the day, an API is a software product and like all software products should be completely bug-free and should work as described and expected and you should make sure of that.</p>
<h2 id="40de" class="">8. Version When Necessary</h2>
<p id="4572">Even perfectly designed APIs may require updates to keep up with changing needs and requirements. It’s really important to version and document these changes with every new release.</p>
<p id="c5c5" class="">Ideally, your API should be decoupled enough that any change you make in the background is a seamless transition but in case of major changes it’s important to ensure that your latest releases are compatible with previous versions. It’s also important to ensure that your system does not come to a halt while you are updating it. Even momentary pauses may cause a loss of quality when it comes to API Calls and functionality. Releasing too many versions can also confuse your consumers, versioning may not be the best approach for every situation, like adding new endpoints, supporting newer data types, etc. do not warrant a new version. Only version your APIs when:</p>
<ol class="">
<li>You had to completely overhaul your API because your functionality is completely deviating from the evolving needs of your consumers.</li>
<li>You made some extensive changes to your API like renaming operations, removing operations, made changes to operation parameters, or made changes to the primary data types.</li>
<li>You introduced new technology at the backend which makes it impossible to make your API backward compatible.</li>
</ol>
<p id="274a">How you version your APIs is also important, many API Providers put the version number in the header, some put it in the query parameter but the most popular and consistent approach has been to add the version notation to the URI/URL Parameter.</p>
<h2 id="57be" class="">9. Authenticate, Limit, Throttle</h2>
<p id="8c29" class="">It’s really important to authenticate the access to your API and limit usage where applicable. This can be done by providing your API users with a unique token or a key. Using the token/key you can monitor usage and set permissions/SLAs for your consumers depending on their needs. You can restrict usage as well, for example setting the limit to 5, 50, 500 calls per second to prevent abuse of your resources, ensuring all users get the same performance out of your system. This also helps you filter out power users, who you can pitch enterprise solutions to according to their need.</p>
<p id="33c4" class="">The industry standard when it comes to authentication is OAuth 2.0. Along with helping API providers with control access and limitations, OAuth 2.0 also helps consumers with improved security and better end-to-end experiences with web and mobile apps. Security is really important for consumers and when done right could be the sole reason for developers to opt for you over a competitor API.</p>
<h2 id="7379" class="">10. Consumption is Success</h2>
<blockquote class="wp-block-quote">
<p><em>“You’ve got to start with the customer experience and work back toward the technology, not the other way around.” — Steve Jobs</em></p>
</blockquote>
<p id="475a" class="">You can put in all the hours in the world to research, plan, and develop your API and still not see success when the Customer Experience, in this case, Developer Experience is poor. Just making an API is never enough and should never be the goal. You have to maintain and operate it in a way that consumption stays as smooth and seamless as possible. Your API cannot be truly successful when it’s not easy to consume.</p>
<h2 id="53e2" class="">11. An API is as Good as its Documentation &#8211; and SDKs!</h2>
<p id="5ccb" class="">Unless your API is open-source, Documentation is the only medium of communication between you and your developers and when it’s not clear or well presented, developers will always have problems using your API.</p>
<p id="34c3" class="">Ideally, a developer should get up and running with your API in minutes and your documentation is the key to that. Your documentation should be able to put developers in a position where they can start making calls instantly. Complete API documentation requires more than just your API reference in HTML or PDF form. It requires having a developer portal that pulls together everything that they will need to be successful. You can also offer an API Console on your Portal to let developers experiment with your code.</p>
<p id="c07e" class="">Put out SDKs (Client Libraries) in as many languages as possible to maximize your adoption rates. With your SDK, provide a complete guideline with tutorials and sample code snippets so developers can use them to communicate with your API with the minimum of effort. SDK generation however is not that simple and requires a lot of man-hours and effort to put together.</p>
<p id="35a2" class="">In fact, both Documentation and SDKs aren’t something you can easily produce from scratch, also with constant updates and new releases, it may become impossible to maintain them, especially if you deal with different languages. However, there are certain tools that you can use to generate SDKs and Documentation in real-time without having to write a single line of code. Our own in-house <a href="https://www.apimatic.io/developer-experience-portal/">Developer Experience Portal</a>&nbsp;is a great way to get developers started with your API. Just give us your API descriptions (we accept over 15 different formats) and we’ll generate a whole API Portal for you, complete with SDKs, Documentation, User Guides, and Live Code Samples. The portals are completely customizable and can be integrated with your current systems and will and take just minutes to set up.</p>
<p id="c044">Since Documentation is the face of your API, it should be one of the most important things on your agenda. When considering an API, the very first thing developers look for is documentation and when done nicely, it can easily drive them to test your API, which ultimately leads them to adopt it.</p>
<h2 id="14c4" class="">12. Ensure Responsiveness and Scalability</h2>
<p id="865b" class="">Another important aspect of API consumption is your infrastructure underlying it. It’s really important to ensure that developers are facing no problems when actually accessing or making use of your API. Your API may be utilized by many at the same time and it’s important that it stays responsive under heavy load. To make sure your API stays scalable enough to support a highly varying workload, it’s essential to make use of an API Gateway. The API Gateway integrates with your backend services and acts as an orchestration layer governing everything that interacts with your API. Ideally, an API Gateway should provide the following services:</p>
<ol class="">
<li>Control and automate the connection between an API and the client applications making use of it.</li>
<li>Monitor traffic from individual applications. APIs can’t handle unlimited calls and it’s really important to throttle requests.</li>
<li>Provide caching mechanism to improve response rates.</li>
<li>Secure API using various procedures to prevent misuse.</li>
</ol>
<p id="917c" class="">Concluding this all, we’ll always advise API Developers to keep their APIs as simple as possible. It’s important to think like an API User instead of an API Designer, most API users are looking to make their lives easy and if your API is not helping them achieve that objective, it’s probably not a very good one. When it comes to API development it’s never about what your API does, it always about how it does it, and the easier, the better.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/2018/03/building-rest-apis-the-right-way/">Building REST APIs the Right Way</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
