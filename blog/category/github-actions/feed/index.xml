
<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>GitHub Actions Archives - APIMatic</title>
	<atom:link href="/blog/category/github-actions/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>APIMatic is an API documentation tool that provides a complete set of DX components such as autogenerated SDKs, API portal, API docs, live code samples, and more.</description>
	<lastBuildDate>Fri, 22 Apr 2022 17:30:12 +0000</lastBuildDate>
	<language>en</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.9.3</generator>

<image>
	<url>/wp-content/uploads/2021/10/cropped-cropped-apimaticio-favicon-1-32x32.png</url>
	<title>GitHub Actions Archives - APIMatic</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>A GitHub Action for Transforming APIs</title>
		<link>/blog/a-github-action-for-transforming-apis/</link>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Mon, 30 Nov 2020 09:42:40 +0000</pubDate>
				<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[GitHub Actions]]></category>
		<category><![CDATA[Apimatic Features]]></category>
		<category><![CDATA[automation]]></category>
		<category><![CDATA[Github]]></category>
		<category><![CDATA[github actions]]></category>
		<guid isPermaLink="false">https://apimatic-blog.000webhostapp.com/?p=128</guid>

					<description><![CDATA[<p>How does it work? This Github Action uploads and converts any API Specification into one of the supported formats listed here, The user just need to use the GitHub action in their repository on GitHub and provide the API Specification URL and export format as the arguments to the action. It provides the URL to [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/a-github-action-for-transforming-apis/">A GitHub Action for Transforming APIs</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="128" class="elementor elementor-128">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-fe52aa3 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="fe52aa3" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-458ce4a4" data-id="458ce4a4" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-63d0add elementor-widget elementor-widget-text-editor" data-id="63d0add" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
			<style>/*! elementor - v3.6.4 - 13-04-2022 */
.elementor-widget-text-editor.elementor-drop-cap-view-stacked .elementor-drop-cap{background-color:#818a91;color:#fff}.elementor-widget-text-editor.elementor-drop-cap-view-framed .elementor-drop-cap{color:#818a91;border:3px solid;background-color:transparent}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap{margin-top:8px}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap-letter{width:1em;height:1em}.elementor-widget-text-editor .elementor-drop-cap{float:left;text-align:center;line-height:1;font-size:50px}.elementor-widget-text-editor .elementor-drop-cap-letter{display:inline-block}</style>				<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter wp-image-129" src="/wp-content/uploads/2021/12/1_1tkLbPa_i4tXkimSG-PrUA.png" alt="A GitHub Action for Transforming APIs" width="800" height="320"></p>
</figure>
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">Recently, there has been a lot of talk around <a href="https://github.com/features/actions" target="_blank" rel="noreferrer noopener">GitHub Actions</a>, and the wide range of features it can offer with just a simple YAML based workflow file!</p>
<h2 class=""><strong>What are GitHub Actions?</strong></h2>
<p class="">GitHub Actions connect all of your tools to automate every step of your development workflow. Easily deploy to any cloud, create tickets in Jira, or publish a package to npm. If you want to understand how GitHub actions work and how to set up existing actions from the <a href="https://github.com/marketplace?type=actions" target="_blank" rel="noreferrer noopener">GitHub marketplace</a> then you should look at this <a href="https://gabrieltanner.org/blog/an-introduction-to-github-actions" target="_blank" rel="noreferrer noopener">guide</a>.</p>
<p class="">In this article, we will use a&nbsp;<a href="https://github.com/marketplace/actions/apimatic-transformer" target="_blank" rel="noreferrer noopener">GitHub Action for API Transformer</a> for transforming API’s to the <a href="https://www.apimatic.io/transformer/#supported-formats" target="_blank" rel="noreferrer noopener">supported formats</a> by APIMatic.</p>
<h2 class=""><strong>What is APIMatic Transformer?</strong></h2>
<p class="">APIMatic Transformer allows its users to convert between different API description formats e.g. Swagger, RAML, etc. This enables the user to benefit from a wide range of tools available associated with any format, not just one.</p>
<h2 class=""><strong>APIMatic Transformer GitHub Action</strong></h2>
<p class="">We at APIMatic have created a GitHub action for our users that lets them use APIMatic Transformer through a GitHub action available on the GitHub marketplace to help them establish CI/CD pipelines and automating their workflows.</p>
</div>
</div>
</div>
</div>
<!-- /wp:image -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1zfsvPTFhptMO64pIVBLO-g.png" alt=""></p>
<figcaption>Workflow file using APIMatic Transformer GitHub&nbsp;action</figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2><strong>How does it work?</strong></h2>
<p class="">This <a href="https://github.com/actions" target="_blank" rel="noreferrer noopener">Github Action</a> uploads and converts any API Specification into one of the supported formats listed <a href="https://www.apimatic.io/transformer/#supported-formats" target="_blank" rel="noreferrer noopener">here</a>, The user just need to use the GitHub action in their repository on GitHub and provide the API Specification URL and export format as the arguments to the action. It provides the URL to the converted API specification in the format specified by the user.</p>
<p>Here is an example workflow file that explains how you can use it with your GitHub repository:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:prismatic/blocks -->
<pre class=""><code class="language-yaml">steps:
      # you must check out the repository
      - name: Checkout
        uses: actions/checkout@v2
      - name: APIMatic Transformer
        uses: apimatic/apimatic-transformer-action@v0.1
        id: transform
        with:
         auth: ${{ secrets.Test }}
         inputURL: &#039;https://petstore.swagger.io/v2/swagger.json&#039;
         exportFormat: &#039;raml&#039;
     # Use the Transformed API Spec as output from our action (id:transform)
      - name: Get the API Spec URL
        run: echo &quot;${{ steps.transform.outputs.specurl }}&quot;</code></pre>
<!-- /wp:prismatic/blocks -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p>Now let me explain how this is working by directing each of the above-mentioned steps.</p>
<p class="">We are using <code>steps:</code> to let actions know that we are creating a step below with the name <code>Checkout</code></p>
<p>We are using <code>uses: actionscheckout@v2</code> which means that our step <code>Checkout</code> is using another action called <code>checkout</code> that checks out the current repository and use it.</p>
<p class="">Then we have the Transform API Spec step which is actually transforming the API Spec, Here <code>apimatic-transformer-action</code> is the name of the action, and <code>id:transform</code> is just a unique id assigned to this step so we can use output generated through this step in later steps. We are passing <code>auth: ${{ secrets.Test }}</code> that actually uses the secret Test stored in the current repository’s secrets, It is recommended to create an <a href="https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets" target="_blank" rel="noreferrer noopener">encrypted secret</a> for the APIMatic API token (<code>auth</code>).</p>
<h3 class=""><strong>How to create a Basic Authorization token using your APIMatic account?</strong></h3>
<ul class="">
<li>You need to sign up for APIMatic <a href="https://www.apimatic.io/account/register" target="_blank" rel="noreferrer noopener">here</a> using your company email address.</li>
<li>Purchase subscription for APIMatic as per your relevant requirement, details of pricing mentioned <a href="https://www.apimatic.io/pricing" target="_blank" rel="noreferrer noopener">here</a>.</li>
<li>Visit <a href="https://www.blitter.se/utils/basic-authentication-header-generator/" target="_blank" rel="noreferrer noopener">Basic AUTH generator</a>, Enter your email and password to generate the Basic Authorization token which will look like this: Authorization: Basic dGVzdEB0ZXN0LmNvbTpyYW5kb20=</li>
<li>Now visit the repository on GitHub where you want to use this GitHub action, Select settings &gt; secrets and Add a new secret and fill in the details as shown below:</li>
</ul>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:image -->
<figure class="wp-block-image">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1KGipCwDXL7ZHhU3qBvWhaQ.png" alt=""></p>
<figcaption>Adding a secret to the GitHub repository</figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">We are also passing inputURL and exportFormatas the other arguments for this step and they are corresponding to the API Specification URL and the required format by the user.</p>
<p>In the last step, we are just getting the URL for the generated API Spec in the required format so we can download it and use it as required.</p>
<p>Here is a complete workflow file with multiple steps generating different formats of API using the same APIMatic Transformer GitHub action:</p>
</div>
</div>
</div>
</div>
<pre class=""><code class="language-yaml">name: APITransformer
on: [push]
jobs:
  Test_Transformer:
    runs-on: ubuntu-latest
    name: Testing API Transformer Action
    steps:
      # you must check out the repository
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: APIMatic Transformer
        uses: apimatic/apimatic-transformer-action@v0.1
        id: raml
        with:
         auth: ${{ secrets.Test }}
         inputURL: &#039;https://github.com/mujjazi/apimatic-transformer-action/blob/master/bookingpal.json&#039;
         exportFormat: &#039;raml&#039;
     # Use the Transformed API Spec as output from our action (id:raml)
      - name: Get the API Spec URL
        run: echo &quot;${{ steps.raml.outputs.specurl }}&quot;
        
      - name: APIMatic Transformer
        uses: apimatic/apimatic-transformer-action@v0.1
        id: wsdl
        with:
         auth: ${{ secrets.Test }}
         inputURL: &#039;https://github.com/mujjazi/apimatic-transformer-action/blob/master/bookingpal.json&#039;
         exportFormat: &#039;wsdl&#039;
     # Use the Transformed API Spec as output from our action (id:wsdl)
      - name: Get the API Spec URL
        run: echo &quot;${{ steps.wsdl.outputs.specurl }}&quot;</code><code></code></pre>
<!-- /wp:paragraph -->

<!-- wp:preformatted /-->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">After adding all these details, save the main.yml file and commit the changes to the repository.</p>
<p class="">Now we will make some changes to our API Specification and commit those changes to the repository so that this action is triggered and generate the URL to download the updated API Specification in the required format as shown below:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1quKQkSlhXp_MiRw6RpVvjA.gif" alt=""></p>
<figcaption>Downloading the latest API Specification in the required&nbsp;format</figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 class=""><strong>Summary</strong></h2>
<p class="">The GitHub actions are definitely going to be useful in the long term specifically with respect to the CI/CD benefits they offer and it can be really helpful for those maintaining API Specifications on GitHub. With the advancements in technology, you have to make sure that you are equipped with the latest tools for automation and CI/CD so that you can keep up with the market competition and ensure faster release times with excellent quality.</p>
<p class="">We have created this action as per the requests from the customers that they need to use APIMatic Transformer with GitHub actions, Stay tuned and we will be offering more features through GitHub actions in the future.</p>
<p class="">Feel free to use this action and share your feedback, You can always <a href="https://www.apimatic.io/contact" target="_blank" rel="noreferrer noopener">reach out to our team</a> to discuss further regarding APIMatic and its products.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/a-github-action-for-transforming-apis/">A GitHub Action for Transforming APIs</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
