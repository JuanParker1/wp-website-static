
<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>API Documentation Archives - APIMatic</title>
	<atom:link href="/blog/category/api-documentation/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>APIMatic is an API documentation tool that provides a complete set of DX components such as autogenerated SDKs, API portal, API docs, live code samples, and more.</description>
	<lastBuildDate>Sun, 24 Apr 2022 01:10:47 +0000</lastBuildDate>
	<language>en</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.9.3</generator>

<image>
	<url>/wp-content/uploads/2021/10/cropped-cropped-apimaticio-favicon-1-32x32.png</url>
	<title>API Documentation Archives - APIMatic</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>How Are SDKs and API Documentation Helping API Industries?</title>
		<link>/blog/2022/02/the-customers-pov-how-do-sdks-and-api-documentation-help-business/</link>
		
		<dc:creator><![CDATA[Nida I Zamir]]></dc:creator>
		<pubDate>Fri, 25 Feb 2022 08:34:38 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Portal]]></category>
		<category><![CDATA[APIMATIC]]></category>
		<category><![CDATA[Automation]]></category>
		<category><![CDATA[Case Studies]]></category>
		<category><![CDATA[CodeGen]]></category>
		<category><![CDATA[Communication APIs]]></category>
		<category><![CDATA[FinTech APIs]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[Api documentation]]></category>
		<category><![CDATA[auto-generated SDKs]]></category>
		<category><![CDATA[Case Study]]></category>
		<category><![CDATA[customer]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1693</guid>

					<description><![CDATA[<p>The API community seems to have settled upon one ground rule: give the developers what they want, and then some more. Yay for the external developers (the API users), nay for the internal developers (the API developers).&#160; The exponential growth in APIs and the consequent competition between the API providers warrant the need for maximum [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/2022/02/the-customers-pov-how-do-sdks-and-api-documentation-help-business/">How Are SDKs and API Documentation Helping API Industries?</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class=""><img class="aligncenter wp-image-1697 " src="/wp-content/uploads/2022/04/CustomrPoV3-02-1024x619.png" alt="SDKs and API documentation by APIMatic" width="744" height="450"></p>
<p class=""><span style="font-weight: 400;">The API community seems to have settled upon one ground rule: give the developers what they want, and then some more. Yay for the external developers (the API users), nay for the internal developers (the API developers).&nbsp; </span></p>
<p class=""><span style="font-weight: 400;">The exponential growth in APIs and the consequent competition between the API providers warrant the need for maximum developer experience with the least onboarding problems.</span></p>
<p class=""><span style="font-weight: 400;">Automated SDK and API documentation generations are a sure way to boost API adoption while lifting the strain of repetitive tasks off developers. API provider companies from various industries like communication, fintech, and travel enjoy better team productivity and faster time to market as the time-consuming monotony of maintaining SDKs and API documentation is handled by APIMatic.</span></p>
<h2 class=""><span style="font-weight: 400;">Communication APIs: Increased Developer Productivity for MessageMedia</span></h2>
<p class=""><a href="https://messagemedia.com/us/"><span style="font-weight: 400;">MessageMedia</span></a><span style="font-weight: 400;"> is Australia’s leading global business messaging platform that offers communication services between its customers’ workforce.</span></p>
<p class=""><span style="font-weight: 400;">Sending over a billion messages per year and servicing thousands of global customers required a streamlined developer experience to integrate their various messaging APIs, and manually updating SDKs on each update was not optimal.</span></p>
<p class=""><span style="color: #999999;"><i><span style="font-weight: 400;">“One of the problems we had with our SDKs was if a new feature was added to the API, we would have to manually make the code changes to the SDKs itself. Given we have 6 SDKs for each of our APIs, it was a long and inefficient process to update.” — Ibrahim Tareq, Developer Evangelist</span></i></span></p>
<p class=""><span style="font-weight: 400;">With APIMatic’s CodeGen Engine, MessageMedia was able to auto-generate SDKs in all of the required languages, and the SDKs could reflect changes in the API on the go, which had been a pain point for the team.</span></p>
<p class=""><span style="color: #999999;"><i><span style="font-weight: 400;">“It has helped reduce the barrier of entry… you can hand out SDKs to your customers and make it easier and simpler for them to code their way to the first ‘hello world’.”</span></i></span></p>
<p class="">Case Study: <a href="https://blog.apimatic.io/messagemedia-speaking-the-language-of-developers-with-apimatic-codegen-5a3a7ad17d8e"><span style="font-weight: 400;">MessageMedia Increases Developer Productivity with Autogenerated SDKs</span></a></p>
<h2 class=""><span style="font-weight: 400;">Fintech APIs: Revenue Generator for Fortune 500 Fintech</span></h2>
<p class=""><span style="font-weight: 400;">This leading financial services giant provides access to the world’s largest independent payment network to almost any country in the world through API integrations.&nbsp;</span></p>
<p class=""><span style="font-weight: 400;">Hence, this company was quick to realize that in order to obtain partnerships and integrations with third parties, they needed to reach out to a larger developer community and ensure that their APIs were adopted faster. They began offering .NET and Java SDKs for their APIs, which were built in-house, but maintaining them took the time that could instead be spent on expanding their API landscape with the growing demand.</span></p>
<p class=""><span style="color: #999999;"><i><span style="font-weight: 400;">“Writing SDKs for just two languages was a pretty time consuming and expensive </span></i><i><span style="font-weight: 400;">process, every time we had a release that affected those services, it would increase </span></i><i><span style="font-weight: 400;">our sprints and dev timelines” &#8211; Head of Innovation</span></i></span></p>
<p class=""><span style="font-weight: 400;">APIMatic’s CodeGen Engine streamlined their process in the form of automatically generated SDKs and API documentation for six languages instead of two, directly from their API definition files. This resulted in cost savings of hundreds of thousands of dollars compared to building SDKs and docs in-house while reducing their time to market the APIs.</span></p>
<p class=""><span style="color: #999999;"><i><span style="font-weight: 400;">“Fast go-to-market time for documentation, and then the ability to generate SDKs in </span></i><i><span style="font-weight: 400;">multiple languages; those were the things that attracted us to APIMatic.”</span></i></span></p>
<p class="">Case Study: <a href="https://www.apimatic.io/success-stories/fintech/a-fortune-500-fintech-company/"><span style="font-weight: 400;">How APIMatic Became a Revenue Generator for a Fortune 500 Fintech</span></a></p>
<h2 class=""><span style="font-weight: 400;">Operation Management APIs: From 1 Week to 18 Seconds with Dude Solutions</span></h2>
<p class=""><a href="https://www.dudesolutions.com/"><span style="font-weight: 400;">Dude Solutions</span></a><span style="font-weight: 400;"> is a leading software-as-a-service (SaaS) provider of operations management solutions for education, government, healthcare, and many industries.</span></p>
<p class=""><span style="font-weight: 400;">They have two front-facing REST APIs that drive their platform and are supported by a set of micro-services that specialize in different areas.&nbsp;</span></p>
<p class=""><span style="font-weight: 400;">Dude Solutions realized early on that with SDKs, they would have sharable software that could be used across the entire platform. It would reduce the amount of code in each API stack and understand the security protocols. However, they started by creating the SDKs from scratch and soon enough found out that it was just as long a process as API development.</span></p>
<p class=""><span style="color: #999999;"><i><span style="font-weight: 400;">“We learned that it takes almost as long to do the API implementation as it did the SDK development. In fact, it took one week to develop the SDK for a single language.” &#8211; Brian Hyder, Engineering Manager</span></i></span></p>
<p class=""><span style="font-weight: 400;">When they began designing their next micro-service, Dude Solutions started looking for alternate ways for SDK development and came across APIMatic. The autogeneration of SDKs in multiple languages helped drastically cut down SDK development and maintenance costs.</span></p>
<p class=""><span style="color: #999999;"><i><span style="font-weight: 400;">“Development time for SDKs for each language went from 1 week to 18 seconds thanks to APIMatic.”</span></i></span></p>
<p class="">&nbsp;</p>
<p class=""><span style="font-weight: 400;"><img class="aligncenter wp-image-1695 size-full" src="/wp-content/uploads/2022/04/dude-solutions.png" alt="" width="603" height="393"></span></p>
<p class=""><span style="font-weight: 400;">While they had initially planned to provide SDKs in 3 languages, the significant time and cost reduction enabled them to provide SDKs for 7 languages with APIMatic’s autogenerated SDKs.</span></p>
<p class="">Read More: <a href="https://blog.apimatic.io/automate-all-the-things-how-dude-solutions-saved-20-000-in-development-costs-using-apimatic-f9c05118f041"><span style="font-weight: 400;">How Dude Solutions Cut Down Time to Release from 1 Week to 18 Seconds</span></a></p>
<h2 class=""><span style="font-weight: 400;">Travel APIs: Client Onboarding Time Reduced by 20% for Didgigo</span></h2>
<p class=""><a href="https://www.didgigo.com/"><span style="font-weight: 400;">Didgigo</span></a><span style="font-weight: 400;"> is a digital media platform that assists travel agents in organizing and maintaining data, as well as creating detailed itinerary proposals that save time and boost sales opportunities for clients.</span></p>
<p class=""><span style="font-weight: 400;">Didgigo offers APIs that allow travel experts to create travel documents for their clients automatically and publish both digital and print versions at the same time. However, for a firm that excels at offering automated tailor-made solutions to its clients, it became critical to find a solution that could shorten the API onboarding time for customers, without the engineering team having to context switch on each release.</span></p>
<p class=""><span style="color: #999999;"><i><span style="font-weight: 400;">“Our process was extremely manual and required a lot of back and forth” &#8211; Keanu Ashwell, Development Operations Engineer</span></i></span></p>
<p class=""><span style="font-weight: 400;">With APIMatic’s autogenerated documentation in multiple languages, Didgigo is able to shift its focus on building robust APIs, without having to devote time and resources to maintain the documentation. The customer onboarding process has become more streamlined, with tickets raised during onboarding being <strong>reduced by 11-20%</strong>, and customer onboarding meetings going down by more than 7 meetings per quarter.</span></p>
<p class=""><span style="color: #999999;"><i><span style="font-weight: 400;">“Our experience with APIMatic and its provisions has been exceptional. We haven&#8217;t had </span></i><i><span style="font-weight: 400;">much time to maintain everything as we&#8217;re still strapped for resources due to COVID-19, </span></i><i><span style="font-weight: 400;">but we&#8217;ve still been able to rely on APIMatic to give our API users an understanding of </span></i><i><span style="font-weight: 400;">what functionality we expose via our APIs. The ability to test [the APIs] is also a feature I </span></i><i><span style="font-weight: 400;">love and something that drew me to the service when we migrated from our in-house Swagger solution.”</span></i></span></p>
<p class="">Case Study: <a href="https://www.apimatic.io/success-stories/api-portal/didgigo/"><span style="font-weight: 400;">How Didgigo Reduces Client Onboarding Time with Autogenerated Documentation</span></a></p>
<h2 class=""><span style="font-weight: 400;">Healthcare/Senior Living APIs: Time to Release Down by 30% for Caremerge</span></h2>
<p class=""><a href="https://caremerge.com/"><span style="font-weight: 400;">Caremerge</span></a> <span style="font-weight: 400;">is an </span><span style="font-weight: 400;">all-in-one platform that empowers families, residents, and staff of senior citizens by </span><span style="font-weight: 400;">providing tools for modern elder care including family engagement, community engagement, chronic care management, and more.</span></p>
<p class=""><span style="font-weight: 400;">Caremerge also uses various pre-existing services to make them more accessible for these senior citizens, for example with voice commands. However, managing all these services in a single platform requires multiple internal microservices and a public API.</span></p>
<p class=""><span style="font-weight: 400;">The Caremerge API powers communication between the services they offer and allows them to build integrations with various third-party vendors and services. Building those integrations requires the documentation for the API to be always updated, so developers spend less time figuring out how to integrate.</span></p>
<p class=""><span style="font-weight: 400;">Using APIMatic’s autogenerated API documentation with the API playground allows developers to test inputs and outputs within the docs, resulting in quicker integration of the API, and helps Caremerge cut down on time spent on maintenance.</span></p>
<p class=""><span style="color: #999999;"><em><span style="font-weight: 400;">“APIMatic helps us save 20–30% of the time it took us to manage documentation for our API” &#8211; </span><span style="font-weight: 400;">Fahad Aziz, Co-Founder, and CTO</span></em></span></p>
<p class="">Read More: <a href="https://blog.apimatic.io/serving-the-senior-living-industry-with-caremerge-api-734da95b2d9b"><span style="font-weight: 400;">Serving The Senior Living Industry with Caremerge</span></a></p>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">
<hr>
</div>
</div>
<p class=""><span style="font-weight: 400;">Quicker synchronization of documentation and SDKs with APIs leads to shorter sprints and faster time to market. With a mission to make API consumption as simple as possible, APIMatic considers it a victory when our</span><a href="https://www.apimatic.io/success-stories/"><span style="font-weight: 400;"> customers’ APIs are consumed</span></a><span style="font-weight: 400;"> more readily with our autogenerated SDKs and documentation.</span></p>
</div>
</div>
</div>
</div>
<p>The post <a rel="nofollow" href="/blog/2022/02/the-customers-pov-how-do-sdks-and-api-documentation-help-business/">How Are SDKs and API Documentation Helping API Industries?</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Automating Developer Experience with APIMatic CLI</title>
		<link>/blog/2022/01/automate-dx-with-apimatic-cli/</link>
		
		<dc:creator><![CDATA[Nida I Zamir]]></dc:creator>
		<pubDate>Fri, 21 Jan 2022 11:15:14 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Portal]]></category>
		<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[Automation]]></category>
		<category><![CDATA[CLI]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[API portal]]></category>
		<category><![CDATA[APIMatic CLI]]></category>
		<category><![CDATA[automation]]></category>
		<category><![CDATA[Sdks]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1627</guid>

					<description><![CDATA[<p>APIs act as a bridge to multiple tiers in distributed software systems. However, reflecting the changes of fast-evolving APIs among these connected tiers is a huge drain in productivity, and increases the time to market. This means that your software tiers must always remain in sync, and in an ideal world also minimize the redundancy [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/2022/01/automate-dx-with-apimatic-cli/">Automating Developer Experience with APIMatic CLI</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p><img class=" wp-image-9666 aligncenter" src="/wp-content/uploads/2022/01/Dev-Cycle-1024x690-1.png" alt="" width="549" height="370" srcset="/wp-content/uploads/2022/01/Dev-Cycle-1024x690-1.png 1024w, /wp-content/uploads/2022/01/Dev-Cycle-1024x690-1-300x202.png 300w, /wp-content/uploads/2022/01/Dev-Cycle-1024x690-1-768x518.png 768w" sizes="(max-width: 549px) 100vw, 549px" /></p>
<div class="boldgrid-section">
<div class="container">
<p class=""><span style="font-weight: 400;">APIs act as a bridge to multiple tiers in distributed software systems. However, reflecting the changes of fast-evolving APIs among these connected tiers is a huge drain in productivity, and increases the time to market. </span><span style="font-weight: 400;">This means that your software tiers must always remain in sync, and in an ideal world also minimize the redundancy of generating documentation and SDKs on each update.&nbsp;</span></p>
<p class=""><span style="font-weight: 400;">The <a href="https://docs.apimatic.io/apimatic-cli/intro-and-install/">APIMatic CLI</a> ensures that your developer experience checklist is in check at all times by automating the redundant, time and resource-consuming tasks of API validation, documentation, and SDK maintenance. The APIMatic CLI offers feature parity by providing automation in the form of:&nbsp;</span></p>
<ul class="">
<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">API Validator</span></li>
<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">API Transformer&nbsp;</span></li>
<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">SDK Generator</span></li>
<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">API Portal Generator</span></li>
</ul>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">
<hr>
</div>
</div>
</div>
</div>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">
<div><span style="font-weight: 400;">You can integrate the APIMatic CLI into your CI/CD pipelines for a seamless and automated experience. For example, every time your pipeline detects a change in the API, it can trigger </span><a href="https://www.apimatic.io/continuous-code-generation/"><span style="font-weight: 400;">automatic code generation</span></a><span style="font-weight: 400;"> for the API without any human intervention and you can ship updated SDKs as soon as the API is updated. </span></div>
</div>
</div>
</div>
</div>
<p class=""><span style="font-weight: 400;">For a quick walkthrough of the newly introduced CLI, we’ll be using the Uber API specification.</span></p>
<h2 class=""><span style="font-weight: 400;">Installing the APIMatic CLI</span></h2>
<p class=""><span style="font-weight: 400;">Installing the CLI is quick and painless. You only need </span><b>Node.JS</b><span style="font-weight: 400;"> and </span><b>npm </b><span style="font-weight: 400;">as a pre-requisite to execute the following command, and you’re good to go:</span></p>
<pre class=""><code class="language-bash">npm install -g @apimatic/cli</code></pre>
<h2 class=""><span style="font-weight: 400;">Validating the API for Unforeseen Errors</span></h2>
<p class=""><span style="font-weight: 400;">Validating the API definition against robust internal checks ensures you have a smooth experience using APIMatic’s services. Fixing these validation issues before proceeding to generate portals or SDKs helps save debugging time. The </span><a href="https://docs.apimatic.io/rulesets/overview/"><span style="font-weight: 400;">validation output</span></a><span style="font-weight: 400;"> is categorized into three categories defined below:</span></p>
<ul class="">
<li style="font-weight: 400;" aria-level="1"><b>Errors</b><span style="font-weight: 400;">: Any syntax/semantic issues found in the API definition.</span></li>
<li style="font-weight: 400;" aria-level="1"><b>Warnings</b><span style="font-weight: 400;">: Any unexpected behavior that may affect the output.</span></li>
<li style="font-weight: 400;" aria-level="1"><b>Info</b><span style="font-weight: 400;">: Recommendations or suggestions that can help enhance your API definition and its completeness.</span></li>
</ul>
<p>&nbsp;</p>
<p class=""><span style="font-weight: 400;">To validate your API definition, run the </span><b>apimatic api:validate</b><span style="font-weight: 400;"> command by providing the path to the file:</span></p>
<p class=""><img class="aligncenter wp-image-1634 size-full" src="https://devapi.dream.press/wp-content/uploads/2022/01/validation.png" alt="validate using CLI" width="637" height="91"></p>
<p class=""><span style="font-weight: 400;">The API definition validated here does not seem to have any critical errors and warnings that need fixing, so we can move forward to either generate SDKs and API Portals or transform the API specification into another format.</span></p>
<h2 class=""><span style="font-weight: 400;">Generating SDKs to Speak in the Language of Developers</span></h2>
<p class=""><span style="font-weight: 400;">Once the API is validated, you can proceed to generate multi-language SDKs from the API definition, directly via the command line. The </span><b>apimatic sdk:generate</b><span style="font-weight: 400;"> command generates an SDK in a specified language and downloads it to the specified destination folder.</span></p>
<p class=""><span style="font-weight: 400;">For example, I generated a Python SDK from the Uber API using the APIMatic CLI:&nbsp;</span></p>
<p class=""><span style="font-weight: 400;"><img class="aligncenter wp-image-1631 size-full" src="https://devapi.dream.press/wp-content/uploads/2022/01/sdk.png" alt="" width="742" height="102"></span></p>
<p class=""><span style="font-weight: 400;">Now check the destination folder, where the SDK has been downloaded in .zip form. Extracting the .zip file shows the complete SDK files, including a comprehensive README to use the SDK:</span></p>
<p class=""><img class="aligncenter wp-image-1632 size-full" src="https://devapi.dream.press/wp-content/uploads/2022/01/sdk-downloaded.png" alt="sdk generation using cli" width="661" height="323"></p>
<p class=""><span style="font-weight: 400;">You can use your favorite IDE to start building applications using the Uber API SDK straightaway. To read more about APIMatic SDKs, please refer to the </span><a href="https://docs.apimatic.io/generate-sdks/overview-sdks/"><span style="font-weight: 400;">APIMatic SDK documentation</span></a><span style="font-weight: 400;">.</span></p>
<h2 class=""><span style="font-weight: 400;">Generating API Portal for Higher Adoption</span></h2>
<p class=""><span style="font-weight: 400;">APIMatic embraces the ‘documentation as code’ philosophy, allowing you to specify all aspects of the API documentation as code. The </span><a href="https://www.apimatic.io/developer-experience-portal/"><span style="font-weight: 400;">API Portal</span></a><span style="font-weight: 400;"> bundles API documentation, SDKs, and code samples into a static website. Just like with all products of APIMatic, the API Portal can be generated right from the terminal as well, letting the entire process be made part of the release pipeline.</span></p>
<p class=""><span style="font-weight: 400;">In order to generate an API Portal, the CLI expects inputs to be provided in a specific format:</span></p>
<ul class="">
<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">A </span><i><span style="font-weight: 400;">content </span></i><span style="font-weight: 400;">directory containing Markdown guides.</span></li>
<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">A </span><i><span style="font-weight: 400;">spec </span></i><span style="font-weight: 400;">directory containing API specifications.</span></li>
<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">A </span><i><span style="font-weight: 400;">static </span></i><span style="font-weight: 400;">directory containing images or any other static content referenced in the documentation.</span></li>
<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">A configuration file called </span><i><span style="font-weight: 400;">APIMATIC-BUILD.json</span></i><span style="font-weight: 400;">.</span></li>
</ul>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">
<hr>
</div>
</div>
</div>
</div>
<p class=""><span style="font-weight: 400;">Place all the artifacts in a directory, including the Uber API under the </span><i><span style="font-weight: 400;">spec </span></i><span style="font-weight: 400;">directory:</span></p>
<p class=""><img class="aligncenter size-full wp-image-1629" src="https://devapi.dream.press/wp-content/uploads/2022/01/portal-directory.png" alt="" width="281" height="194"></p>
<p class=""><span style="font-weight: 400;">The </span><b>apimatic portal:generate</b><span style="font-weight: 400;"> command takes the contents of this directory to convert it into a static portal’s components.</span></p>
<p class=""><img class="aligncenter wp-image-1630 size-full" src="https://devapi.dream.press/wp-content/uploads/2022/01/portal-generated.png" alt="portal generation using cli" width="624" height="80"></p>
<p class=""><span style="font-weight: 400;">The static website can now be hosted on a hosting service of your choice, let’s say by creating a website on Netlify, and the Uber API portal is live:</span></p>
<p class=""><img class="aligncenter wp-image-1628 size-full" src="https://devapi.dream.press/wp-content/uploads/2022/01/cli-portal.gif" alt="APIMatic CLI Portal" width="1346" height="634"></p>
<h2 class=""><span style="font-weight: 400;">Transforming the API into Multiple API Formats</span></h2>
<p class=""><span style="font-weight: 400;">You can also automatically transform your API into more than </span><a href="https://www.apimatic.io/transformer/"><span style="font-weight: 400;">10 popular API specification formats</span></a><span style="font-weight: 400;"> including OpenAPI, RAML, API Blueprint, WSDL, Postman, and more. Many APIMatic users integrate automated transformations into their CI/CD pipelines via the Transformer API, which helps them take away the pain of having to manually rewrite the APIs. The same process can be replicated with a script that executes the CLI command for Transformer as well.</span></p>
<p class=""><span style="font-weight: 400;">The following example shows how the </span><b>apimatic api:transform</b><span style="font-weight: 400;"> command converts the Uber API (in OpenAPI 3.0 format) to RAML, and saves it to a specific directory:&nbsp;</span></p>
<p class=""><img class="aligncenter wp-image-1633 size-full" src="https://devapi.dream.press/wp-content/uploads/2022/01/transformed.png" alt="transform using cli" width="682" height="130"></p>
<h2 class=""><span style="font-weight: 400;">Conclusion</span></h2>
<p><span style="font-weight: 400;">Automation lets developers concentrate on business objectives and innovative solutions instead of diverting their time and efforts towards redundant tasks like maintaining documentation and building SDKs for each API update. Hence, the APIMatic CLI has been introduced as yet another automation option </span><a href="http://apimatic.io/"><span style="font-weight: 400;">among our growing toolset</span></a><span style="font-weight: 400;"> so you only need to focus on your API, while we take care of the rest.</span></p>
</div>
</div>
<p>The post <a rel="nofollow" href="/blog/2022/01/automate-dx-with-apimatic-cli/">Automating Developer Experience with APIMatic CLI</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Million Mile Views via a NASA API  (no coding required)</title>
		<link>/blog/2021/12/million-mile-views-via-a-nasa-api/</link>
		
		<dc:creator><![CDATA[Adeel Ali]]></dc:creator>
		<pubDate>Fri, 03 Dec 2021 04:51:29 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Portal]]></category>
		<category><![CDATA[NASA]]></category>
		<category><![CDATA[NASA API]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1568</guid>

					<description><![CDATA[<p>APIs are meant to be used by developers, which means non-developers typically don’t get a chance to “directly access” the wealth of information provided by APIs. I faced a similar situation last week when I tried using a NASA API to observe our Earth via a satellite sitting a million miles far. The outcome: I [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/2021/12/million-mile-views-via-a-nasa-api/">Million Mile Views via a NASA API  (no coding required)</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="5825" class="elementor elementor-5825">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-2caa2cfc elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="2caa2cfc" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-1dac51b2" data-id="1dac51b2" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-13d7e0e6 elementor-widget elementor-widget-text-editor" data-id="13d7e0e6" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
			<style>/*! elementor - v3.6.4 - 13-04-2022 */
.elementor-widget-text-editor.elementor-drop-cap-view-stacked .elementor-drop-cap{background-color:#818a91;color:#fff}.elementor-widget-text-editor.elementor-drop-cap-view-framed .elementor-drop-cap{color:#818a91;border:3px solid;background-color:transparent}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap{margin-top:8px}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap-letter{width:1em;height:1em}.elementor-widget-text-editor .elementor-drop-cap{float:left;text-align:center;line-height:1;font-size:50px}.elementor-widget-text-editor .elementor-drop-cap-letter{display:inline-block}</style>				<div class="boldgrid-section"><div class="container"><div class="row"><div class="col-md-12 col-xs-12 col-sm-12"><figure id="attachment_1570" aria-describedby="caption-attachment-1570" style="width: 3000px" class="wp-caption alignnone"><img class="wp-image-1570 size-full" src="/wp-content/uploads/2021/12/download-6.png" alt="Million Mile View via NASA API | APIMatic Blog" width="3000" height="1200" /><figcaption id="caption-attachment-1570" class="wp-caption-text">Moon transition caught by EPIC in Feb 2021</figcaption></figure><p class="" style="text-align: justify;"><span style="font-weight: 400;">APIs are meant to be used by developers, which means non-developers typically don’t get a chance to “directly access” the wealth of information provided by APIs. I faced a similar situation last week when I tried using a NASA API to observe our Earth via a satellite sitting a million miles far. The outcome: I did write some code, but ended up creating API docs for non-developers to see those gorgeous views without having to write any code.</span></p><h2 class=""><strong>Background</strong></h2><p class="" style="text-align: justify;"><span style="font-weight: 400;">On November 20th, I was observing </span><a href="https://www.facebook.com/groups/ExploreNewZealand/permalink/1525141897862733/"><span style="font-weight: 400;">the recent lunar eclipse</span></a><span style="font-weight: 400;"> with my 9 years old via a telescope. That reminded me of another telescope at DSCOVR (Deep Space Climate Observatory) which captures our Earth from a million miles (details are coming below). These images are available via an </span><a href="https://epic.gsfc.nasa.gov/about/api"><span style="font-weight: 400;">API</span></a><span style="font-weight: 400;">, but getting an image on a particular date required multiple API calls, and combining the images of a single day was not an option. Combined images help see a time-lapsed view of a whole day as well as give a side-by-side view of some rare occurrences such as the moving shadow of a solar eclipse, or the back-side of our moon in transition. Therefore, I wrote a small API on top of NASA’s API and published the relevant </span><a href="https://www.apimatic.io/apidocs/nasa-epic-demo"><span style="font-weight: 400;">documentation</span></a><span style="font-weight: 400;"> of both the APIs.</span></p><h2 class=""><strong>Fasten Your Seat Belts, We’re Going Deep in Space</strong></h2><p class="" style="text-align: justify;"><span style="font-weight: 400;">Hold tight as we’re going to see our beloved planet from some distance. You can start straight away by </span><a style="font-size: 16px;" href="https://www.apimatic.io/apidocs/nasa-epic-demo/v/1_0#/http/api-endpoints/natural-color/get-solar-eclipse-days"><span style="font-weight: 400;">watching a past solar eclipse</span></a><span style="font-weight: 400;"> (hit the Try It Out button, and change the date for different eclipses). Since the telescope stays at a </span><a style="font-size: 16px;" href="https://en.wikipedia.org/wiki/Lagrange_point"><span style="font-weight: 400;">Lagrange point</span></a><span style="font-weight: 400;"> (L1), it can see the sun-lit part of the Earth 24/7. Therefore, in the case of a solar eclipse, it captures the shadow of the moon passing through different parts of our planet. The following picture depicts this scenario and became my motivation for doing this exercise.</span></p><figure id="attachment_1579" aria-describedby="caption-attachment-1579" style="width: 699px" class="wp-caption aligncenter"><img class=" wp-image-1579" src="/wp-content/uploads/2021/12/Pasted-Graphic-1-1024x686.png" alt="" width="699" height="468" /><figcaption id="caption-attachment-1579" class="wp-caption-text">August 21st, 2017, a total solar eclipse over North America</figcaption></figure><div class="mceTemp"> </div><h3 class="">A Lunar Transit</h3><p class="" style="text-align: justify;"><span style="font-weight: 400;">As you might have guessed, at a million miles away, we go well past the moon, so it gives us a chance to see the rear or dark side of the moon. Since the moon is phase-locked with Earth, we never see this side of the moon from Earth. However, thanks to DSCOVR, we can now see this spectacular view of the moon when it transits between the telescope and Earth. <a href="https://www.apimatic.io/apidocs/nasa-epic-demo/v/1_0#/java/api-endpoints/natural-color/get-lunar-transit-days">Try It Out via an API call</a>.</span><span style="font-weight: 400;"> </span></p><h2 class=""><strong>Non-Developers – How’s Been The API Experience?</strong></h2><p class="" style="text-align: justify;"><span style="font-weight: 400;">If you’re not a developer and have clicked the “Try It Out” button in either of the above links, then congratulations! You successfully called an API </span><i><span style="font-weight: 400;">without writing any code</span></i><span style="font-weight: 400;">. The left column of the </span><a href="https://www.apimatic.io/developer-experience-portal/"><span style="font-weight: 400;">API Portal</span></a><span style="font-weight: 400;"> acts as a menu to select getting started guides, API functions (also known as endpoints), and API models’ information. In the middle column (the API Code Playground) there are multiple settings to configure the output image including </span><code><b>gridColumns</b></code><span style="font-weight: 400;">(to change the image grid) and </span><code><b>imageQuality</b></code><span style="font-weight: 400;">. Any change in these settings is also reflected in the code on the right-most column. That’s how developers build sample application code based on their own input. If the code seems overwhelming, you may safely ignore it and hit the “Try It Out” button on the bottom right to immediately get the output.</span></p><figure id="attachment_1584" aria-describedby="caption-attachment-1584" style="width: 1522px" class="wp-caption alignnone"><img class="wp-image-1584 size-full" src="/wp-content/uploads/2021/12/image-5.png" alt="APIMatic Developer Experience Portal showcasing NASA API" width="1522" height="908" /><figcaption id="caption-attachment-1584" class="wp-caption-text">APIMatic&#8217;s Developer Experience Portal showcasing NASA API</figcaption></figure><h2 class="">Developers – It’s Simple yet Effective</h2><p class="" style="text-align: justify;"><span style="font-weight: 400;">You might have guessed already that the combined images are being generated via chaining a few endpoint requests to NASA’s EPIC API. The top 3 endpoints are from EPIC API, while I added the bottom 3 endpoints. Interestingly, all 3 of my endpoints are hitting the same function at the server, while I am tweaking the input at the API level using APIMatic’s editor. I could have made an app to display the combined images but opted for an API because the use case was simple enough to be directly used from the API docs. Moreover, there are <a href="https://www.apimatic.io/blog/2021/09/the-great-sdk-battle-build-vs-buy/">SDKs and Code Samples</a> available for all the endpoints, so that the API could be used in different applications.</span></p><h2 class="" style="text-align: justify;"><strong>EPIC “Blue Marble” API &#8211; What’s So Special? </strong></h2><p class="" style="text-align: justify;"><span style="font-weight: 400;">The science behind Lagrange points is quite fascinating. Parking a space station right there, and continuously capturing the Earth&#8217;s atmosphere makes EPIC API quite special. According to </span><a href="https://solarsystem.nasa.gov/missions/DSCOVR/in-depth/"><span style="font-weight: 400;">NASA </span></a><span style="font-weight: 400;">:</span></p><ul class=""><li style="text-align: justify;"><span style="font-weight: 400;">DSCOVR orbits about a million miles from Earth in a unique location called Lagrange point 1, which basically allows it to hover between the Sun and our planet.</span></li><li style="font-weight: 400; text-align: justify;"><span style="font-weight: 400;">The EPIC API provides information on the daily imagery collected by DSCOVR&#8217;s Earth Polychromatic Imaging Camera (EPIC) instrument. Uniquely positioned at the Earth-Sun Lagrange point, EPIC provides full disc imagery of the Earth and captures unique perspectives of certain astronomical events such as lunar transits using a 2048&#215;2048 pixel CCD (Charge Coupled Device) detector coupled to a 30-cm aperture Cassegrain telescope. </span></li></ul><figure id="attachment_1573" aria-describedby="caption-attachment-1573" style="width: 939px" class="wp-caption aligncenter"><img class=" wp-image-1573" src="/wp-content/uploads/2021/12/dscovr.jpg" alt="" width="939" height="725" /><figcaption id="caption-attachment-1573" class="wp-caption-text">DSCOVR orbits about 1 million miles (1.5 million kilometers) from Earth. Positioned between the Sun and Earth, this location is called Lagrange point 1. (Illustration not to scale.) Credit: NOAA</figcaption></figure><h2 class=""><strong>Conclusions</strong></h2><p class="" style="text-align: justify;"><span style="font-weight: 400;">APIs have opened up new doorways to exciting information. That information is not available to common people until developers build “apps” using the APIs. However, some of the APIs, especially the ones providing data, can be accessed by both developers and non-developers via purpose-built API docs. And if the API is as exciting as NASA’s EPIC API, then we should not keep the non-coders away from such a nice experience, especially in the booming no-code and low-code times.</span></p><p class=""><span style="font-weight: 400;">Thanks for reading. Please feel free to reach out for any suggestions and feedback at adeel@apimatic.io.</span></p><h4 class=""> </h4></div></div></div></div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/2021/12/million-mile-views-via-a-nasa-api/">Million Mile Views via a NASA API  (no coding required)</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Introducing API Developer Experience Analytics</title>
		<link>/blog/2021/10/introducing-api-developer-experience-analytics/</link>
		
		<dc:creator><![CDATA[Adeel Ali]]></dc:creator>
		<pubDate>Thu, 28 Oct 2021 11:26:43 +0000</pubDate>
				<category><![CDATA[Analytics]]></category>
		<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Portal]]></category>
		<category><![CDATA[APIMATIC]]></category>
		<category><![CDATA[API analytics]]></category>
		<category><![CDATA[Api documentation]]></category>
		<category><![CDATA[API portal]]></category>
		<category><![CDATA[Apimatic Features]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1543</guid>

					<description><![CDATA[<p>&#160; How do you define the success of an API? Is it the number of developers using the API, the number of apps built using the API, the revenue stream it has created, or perhaps some other KPI? Whatever the criteria, the important bit is to constantly generate demand among the target audience, and keep [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/2021/10/introducing-api-developer-experience-analytics/">Introducing API Developer Experience Analytics</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1543" class="elementor elementor-1543">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-5dad33c5 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="5dad33c5" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-6d6d6af3" data-id="6d6d6af3" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-5ec4bf46 elementor-widget elementor-widget-text-editor" data-id="5ec4bf46" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class=""><img class="wp-image-1560 aligncenter" src="/wp-content/uploads/2021/12/DX-Analytics-2_Facebook-copy-08-300x157.png" alt="" width="450" height="235"></p>
<p class="">&nbsp;</p>
<p class=""><span style="font-weight: 400;">How do you define the success of an API? Is it the number of developers using the API, the number of apps built using the API, the revenue stream it has created, or perhaps some other KPI? Whatever the criteria, the important bit is to constantly generate demand among the target audience, and keep measuring and aligning their activities towards the desired success criteria.</span></p>

<h2 class=""><strong>Knowing your Audience</strong></h2>
<p class=""><span style="font-weight: 400;">Defining an ideal customer profile is the first step of any demand generation strategy. Imagine after publishing a well-crafted API, you want to go out and start marketing it, but do you actually know what your ideal consumer/developer profile is? Do you want to target consumers of mobile or web or both? What developer community and platforms are important to you?&nbsp;</span></p>
<p class=""><img class="aligncenter wp-image-1545 size-full" src="/wp-content/uploads/2021/12/audience.png" alt="" width="810" height="323"></p>
<p class=""><span style="font-weight: 400;">Remember, your API is language-agnostic, but your targeted platforms and developers are not. Therefore, understanding the needs of a large diverse audience is as important as speaking their language. </span><a href="https://www.youtube.com/watch?v=WNeZxbc4dtI"><span style="font-weight: 400;">Here is a talk</span></a><span style="font-weight: 400;"> elucidating how Twilio has created a phenomenal API experience by supporting a variety of languages.</span></p>

<h2 class="">How are Developers Interacting with Your API?</h2>
<p class=""><span style="font-weight: 400;">After identifying the success criteria for your API, and knowing who your audience is, it’s time to measure how they perform once they have landed on your </span><a href="https://www.apimatic.io/developer-experience-portal/"><span style="font-weight: 400;">API portal</span></a><span style="font-weight: 400;">. For this purpose, we are introducing a novel kind of metrics at APIMatic.io, which we call “Developer Experience Analytics”.&nbsp;</span></p>
<p class=""><img class="aligncenter wp-image-1548 size-large" src="/wp-content/uploads/2021/12/overview-1024x285.png" alt="Performance Overview in API Developer Experience Analytics " width="1024" height="285"></p>
<p class=""><span style="font-weight: 400;">While there exist a bunch of solutions to analyze API traffic, APIMatic’s analytics are focused on the developer experience with respect to developers and programming platforms. For example, it can help in knowing </span><span style="font-weight: 400;">how many users get to make a successful call with your API before they even start coding. Or how many developers are running into problems while trying out an API, and the nature of their problems.</span><span style="font-weight: 400;">
</span></p>
<p class=""><span style="font-weight: 400;">There is a variety of metrics available, such as:</span><span style="font-weight: 400;">
</span></p>

<ul class="">
 	<li style="font-weight: 400;" aria-level="1"><b>Time to First API Call (TTFC):</b><span style="font-weight: 400;"> shows the average time taken by different users to the first API call with the 2XX status code. Reaching the first successful API call means a developer has figured out the API communication setup and authentication requirements etcetera and is now ready to start integrating the API in production code. The time taken to reach the first call can help measure how intuitive and straightforward your&nbsp; API’s onboarding process is.</span>&nbsp;</li>
 	<li style="font-weight: 400;" aria-level="1"><b>API Portal Visits</b><span style="font-weight: 400;">: represents the traffic on your API portal, but at a more granular level based on the languages/platform documentation visited.&nbsp; The language distribution can help measure the popularity of a particular language or gauge the results of a demand generation effort being made to attract a particular developer community.</span></li>
</ul>
&nbsp;
<p class=""><img class="aligncenter wp-image-1544 size-large" src="/wp-content/uploads/2021/12/api-portal-visits-1024x417.png" alt="API Portal Visits in API Analytics" width="1024" height="417"></p>

<ul>
 	<li><b>Portal Page Views</b><span style="font-weight: 400;">: portrays the most popular pages visited by the developers of different languages. This could be a great indicator of the importance of a particular language, endpoint, use case, or a custom guide.</span><span style="font-weight: 400;">
</span></li>
</ul>
<p class=""><img class="aligncenter wp-image-1547 size-large" src="/wp-content/uploads/2021/12/image3-1024x415.png" alt="Portal Page Views in API Analytics" width="1024" height="415"></p>

<ul>
 	<li><b>API Code Playground calls:</b><span style="font-weight: 400;"> depicts the actual API calls made by users using their own data, right from the docs. The result of those calls, in terms of returned HTTP status codes, is quite insightful to fix any potential issues in the docs or in the developers’ understanding.</span><span style="font-weight: 400;">
</span></li>
</ul>
<p class=""><img class="aligncenter wp-image-1546 size-large" src="/wp-content/uploads/2021/12/direct-api-calls-1024x425.png" alt="Direct API Calls in API Analytics" width="1024" height="425"></p>
<p class=""><span style="font-weight: 400;">Moreover, the API code playground also generates dynamic code samples, so analyzing the calls with respect to languages would also help identify the efforts and struggles of the developers of different languages.</span><span style="font-weight: 400;">
</span></p>
<p class=""><img class="aligncenter wp-image-1549 size-large" src="/wp-content/uploads/2021/12/trends-api-calls-1024x336.png" alt="Developer Experience Analytics " width="1024" height="336"></p>
<p class=""><span style="font-weight: 400;">For further details and a complete list of available metrics, please visit our detailed documentation on the </span><a href="https://docs.apimatic.io/publish-apis/analytics-dashboard/"><span style="font-weight: 400;">Developer Experience Analytics</span></a><span style="font-weight: 400;">.</span><span style="font-weight: 400;"> We aim to add more metrics in the future, including a few from the SDKs usage on the client-side. Please feel free to </span><a href="https://www.apimatic.io/contact/"><span style="font-weight: 400;">reach out</span></a><span style="font-weight: 400;"> for any feedback and suggestions.</span></p>
<p class="">&nbsp;</p>

</div>
</div>
</div>
</div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/2021/10/introducing-api-developer-experience-analytics/">Introducing API Developer Experience Analytics</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>DX of SDKs vs Direct API Calls</title>
		<link>/blog/2021/10/dx-of-sdks-vs-direct-api-calls/</link>
		
		<dc:creator><![CDATA[Adam DuVander]]></dc:creator>
		<pubDate>Mon, 11 Oct 2021 10:32:19 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Portal]]></category>
		<category><![CDATA[Code Samples]]></category>
		<category><![CDATA[Developer Experience]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[API Calls]]></category>
		<category><![CDATA[auto-generated SDKs]]></category>
		<category><![CDATA[Direct API Calls]]></category>
		<category><![CDATA[Sdks]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1519</guid>

					<description><![CDATA[<p>What&#8217;s it like to call your API? Developers want to use your API to accomplish something, and you want to make it as easy as possible for them to incorporate your service. To allow developers to call your API directly from any technology, your docs provide DIY instructions. To go a step further and give [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/2021/10/dx-of-sdks-vs-direct-api-calls/">DX of SDKs vs Direct API Calls</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1519" class="elementor elementor-1519">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-7825289e elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="7825289e" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-5ad04015" data-id="5ad04015" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-687f92af elementor-widget elementor-widget-text-editor" data-id="687f92af" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class=""><img class="aligncenter wp-image-1552 " src="/wp-content/uploads/2021/12/dx-of-sdks-vs-api-calls-1024x459.png" alt="" width="771" height="346"></p>
<p class=""><span style="font-weight: 400;">What&#8217;s it like to call your API? Developers want to use your API to accomplish something, and you want to make it as easy as possible for them to incorporate your service. To allow developers to call your API directly from any technology, your docs provide DIY instructions. To go a step further and give developers additional conveniences and tooling, you can provide Software Development Kits (SDKs). SDKs include code to call your API so that developers don&#8217;t have to write it themselves from scratch.</span></p>
<p class=""><span style="font-weight: 400;">While calling an API directly vs. using an SDK does not change the ultimate functionality of the API, it can dramatically affect the developer experience. In most cases, one method will be preferred over the other, varying according to each developer’s needs, preferences, and skills. An SDK offers simplicity and speedier development but applies only to a particular development framework. SDKs require resources to develop and maintain. Direct calls offer platform flexibility and are available to all developers, but are harder to use without expertise.</span></p>
<p class=""><span style="font-weight: 400;">In this article, we&#8217;ll be looking at why your developer experience may focus on direct API calls, SDKs, or both.</span></p>

<h2 class=""><span style="font-weight: 400;">Direct API Calls: The Basics</span></h2>
<span style="font-weight: 400;">For communicating with a service, sending API calls directly to URL endpoints is the simplest way. Of course, when we say </span><i><span style="font-weight: 400;">simplest</span></i><span style="font-weight: 400;">, we mean in terms of program complexity, not ease of use.</span>
<p class=""><span style="font-weight: 400;">When using an API without an SDK, you make calls to its URL endpoints directly using standard internet protocol commands for transferring packets of information over the network. There&#8217;s no abstraction between you and the service, so every parameter must be written into the call. It must also conform to a standard format.</span></p>
<p class=""><span style="font-weight: 400;">An example of how to construct a direct API call using Python is shown in the code snippet below. Notice the URL for the API endpoint is specified explicitly, alongside required header parameters that describe the request. This information is bundled and transmitted using the <code>requests</code> library, which then receives any response data returned by the API and stores it in the <code>resp</code> variable. Note that the cost of deserialization is added here for the API call.</span></p>

<pre class=""><code class="language-python">import requests
from requests.structures import CaseInsensitiveDict

url = &quot;https://connect.squareup.com/v2/payments&quot;

headers = CaseInsensitiveDict()
headers[&quot;Square-Version&quot;] = &quot;2021-06-16&quot;
headers[&quot;Authorization&quot;] = &quot;Bearer ACCESS TOKEN&quot;
headers[&quot;Content-Type&quot;] = &quot;application/json&quot;

resp = requests.get(url, headers=headers)
print(resp.status_code)

decoded = jsonpickle.decode(resp.text)
</code></pre>
<p class=""><span style="font-weight: 400;">Another example of a non-trivial API call can be seen here, pulled from the User Authentication documentation for the</span> <a href="https://www.dropbox.com/developers/documentation"><span style="font-weight: 400;">Dropbox API</span></a><span style="font-weight: 400;">:</span></p>


<figure id="attachment_1520" aria-describedby="caption-attachment-1520" style="width: 790px" class="wp-caption aligncenter"><img class="wp-image-1520 " src="/wp-content/uploads/2021/12/dropbox-1024x677.png" alt="dropbox user authentication" width="790" height="523"><figcaption id="caption-attachment-1520" class="wp-caption-text">Dropbox User Authentication Docs</figcaption></figure>

<span style="font-weight: 400;">For many developers, the need to specify every parameter is exactly what they want: the full power of the service at their fingertips.</span>
<p class=""><span style="font-weight: 400;">Low-level control can be unnecessary and overwhelming, though, especially for new developers. With just the basic building blocks, it can become a challenge for developers to perform more complicated tasks.</span></p>
<p class=""><span style="font-weight: 400;">Not only can direct API calls be complicated to do correctly, but they can also be frustrating to try to troubleshoot. API response codes aren&#8217;t particularly specific when providing error messages; Many developers may give up after countless generic 404 errors.</span></p>
<p class=""><span style="font-weight: 400;">Ultimately, many developers will wish they could have something a little more prepared for them. For those developers, you can please them by offering SDKs in their language.</span></p>

<h2 class=""><span style="font-weight: 400;">SDKs: What Are They?</span></h2>
<p class=""><span style="font-weight: 400;">SDKs are a compilation of environment-specific developer tools designed to access your API. SDKs make it more straightforward for developers to use your API using a programming language framework they prefer. For the developer who wants a little more guidance, SDKs will be the most appealing way for them to access your service.</span></p>
<p class=""><span style="font-weight: 400;">SDKs abstract away the minutiae of the API that often bog down implementation for developers. They can be thought of as an API wrapper that makes accessing that API more friendly to a particular type of developer. A developer has to download and install an SDK that matches the language of their development environment, where it will then provide a host of streamlined functionalities for interacting with your API. If the developer is using Python, for instance, they’ll most likely download an SDK through pip, such as this example from </span><a href="https://www.algolia.com/doc/guides/getting-started/quick-start/tutorials/quick-start-with-the-api-client/python/?client=python"><span style="font-weight: 400;">Algolia’s documentation</span></a><span style="font-weight: 400;">:</span></p>


<figure id="attachment_1521" aria-describedby="caption-attachment-1521" style="width: 721px" class="wp-caption aligncenter"><img class="wp-image-1521 " src="/wp-content/uploads/2021/12/algolia-1024x350.png" alt="Algolia Documentation" width="721" height="247"><figcaption id="caption-attachment-1521" class="wp-caption-text">Algolia SDK download through pip</figcaption></figure>
<p class=""><span style="font-weight: 400;">The example call to Dropbox&#8217;s API, shown earlier, constructed with their Python SDK is shown below. In contrast to a direct API call, it does not require the developer to hard code a URL and headers. Instead, the API token is passed to a provided client object that handles those details.</span></p>

<pre class=""><code class="language-python">import dropbox
token = &#039;My-API-Token&#039;
dbx = dropbox.Dropbox(token)

My_Field = dropbox.file_properties.PropertyField(&#039;Security Policy&#039;,&#039;Confidential&#039;)
My_Template_ID = &#039;ptid:1...&#039;
My_Property_Group = dropbox.file_properties.PropertyGroup(template_id=My_Template_ID, fields=[My_Field])

dbx.file_properties_properties_add(&quot;/my_awesome/word.docx&quot;, My_Property_Group)
</code></pre>
<span style="font-weight: 400;">While APIs aren&#8217;t language-specific, SDKs are. A developer will download the SDK for the specific language they want to work with. API providers that intend to offer SDKs have to research what languages most appeal to their core user base. Developers who have the use of an SDK will be incredibly satisfied by the bevy of tools made available for them, including, but not limited to:</span>
<ul class="">
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Autocomplete SDK commands inline</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Code samples for commands</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Example applications</span></li>
</ul>
<span style="font-weight: 400;">A beneficial everyday use case where SDKs are much easier to use than direct API calls is when developers need to perform complicated authentication procedures. Doing this correctly and securely with only direct API calls can be tricky, but most SDKs take these steps and make them easily implementable with just a few commands. The low-level API call parameters and structure are abstracted away from the developer and handled by the SDK.</span>

<span style="font-weight: 400;">In many ways, SDKs are the epitome of one of the main purposes of APIs: to give the developer the ability to build off existing technology as easily and quickly as possible.</span>
<p class=""><span style="font-weight: 400;">For many developers, SDKs are the preferred method of interacting with APIs. For others, there are cases for making direct API calls without an SDK. Now that we&#8217;ve looked at both options let&#8217;s see why developers would lean towards one or the other.</span></p>

<h2><span style="font-weight: 400;">Choosing Between SDKs and Direct API Calls</span></h2>
<p class=""><span style="font-weight: 400;">In an ideal world, there will be an SDK available to meet the developer’s exact needs. SDKs cost resources to produce and maintain, however. And even when SDKs are available, there are quite a few situations where the available SDKs might not work for what a developer wants to do. Just to list a few:</span></p>

<ul>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">An SDK may not be available in their desired language</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">The SDK may not be updated to incorporate new API features yet</span></li>
</ul>
<p class=""><span style="font-weight: 400;">In both of these situations, directly using the API might be the only option. After all, it takes time and effort for an API provider to build SDKs. If there&#8217;s only one Julia developer using your API who wants a Julia SDK, it might not justify the use of resources.</span></p>
<p class=""><span style="font-weight: 400;">Even for the SDKs of languages you deem popular enough to support, it takes time and effort to update those SDKs. Functionality added to an API yesterday may not be supported in the SDK by today.</span></p>
<p class=""><span style="font-weight: 400;">For the vast majority of use cases, developers will appreciate having SDKs available and will eagerly use them. This is especially true for those who are making use of multiple APIs in their applications. For that reason, SDKs are worth the time and effort to develop for your primary user groups. The effort it takes to provide up-to-date SDKs will save them effort as they can seamlessly incorporate API calls into their app code.</span></p>
<p class=""><span style="font-weight: 400;">And for those edge case developers, those who code in esoteric languages, those who need maximum security control over what the API is doing, and those who want to be on the cutting edge no matter what, direct API calls are most useful.</span></p>
<p class=""><span style="font-weight: 400;">A great example of a company showing both direct API and SDK calls in their documentation is </span><a href="https://stripe.com/docs/api/"><span style="font-weight: 400;">Stripe</span></a><span style="font-weight: 400;">:</span></p>


<figure id="attachment_1522" aria-describedby="caption-attachment-1522" style="width: 576px" class="wp-caption aligncenter"><img class="wp-image-1522 size-full" src="/wp-content/uploads/2021/12/stripe.gif" alt="Stripe API documentation showing both SDKs and API calls" width="576" height="296"><figcaption id="caption-attachment-1522" class="wp-caption-text">Stripe API documentation showing both SDKs and API calls</figcaption></figure>

<span style="font-weight: 400;">Both direct API calls and SDKs are tools that you should make available in your developers&#8217; toolboxes. And the more tools at their disposal, the more effective your developers will be.</span>
<p class=""><span style="font-weight: 400;">At the end of the day, the goal of your developer experience should be improving the accessibility of your product to developers of all backgrounds. Providing SDKs is the best way to make your API a little more manageable for them to implement.</span></p>
<p class=""><span style="font-weight: 400;">
</span>Have a look at how <a href="https://www.apimatic.io/developer-experience-portal">APIMatic enhances the developer experience</a> of your API with robust SDKs auto-generated in all popular languages from a single API definition file.</p>

</div>
</div>
</div>
</div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/2021/10/dx-of-sdks-vs-direct-api-calls/">DX of SDKs vs Direct API Calls</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Using Optional and Nullable Properties in API Requests</title>
		<link>/blog/2021/09/using-optional-and-nullable-properties-in-api-requests/</link>
		
		<dc:creator><![CDATA[Maryam Adnan]]></dc:creator>
		<pubDate>Thu, 16 Sep 2021 09:00:51 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[APIMATIC]]></category>
		<category><![CDATA[CodeGen]]></category>
		<category><![CDATA[OpenAPI]]></category>
		<category><![CDATA[REST APIs]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[nullable]]></category>
		<category><![CDATA[OpenApi]]></category>
		<category><![CDATA[optional]]></category>
		<category><![CDATA[optional/nullable]]></category>
		<category><![CDATA[Sdks]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1436</guid>

					<description><![CDATA[<p>An essential part of an API endpoint is its parameters. While certain parameters must be included in each request, there may be some parameters that may or not may not be included in the request. The optional property was introduced to create unique combinations of such parameters in API requests. In other cases, some parameters [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/2021/09/using-optional-and-nullable-properties-in-api-requests/">Using Optional and Nullable Properties in API Requests</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1436" class="elementor elementor-1436">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-4ea2926a elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="4ea2926a" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-1c6630db" data-id="1c6630db" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-274d9c90 elementor-widget elementor-widget-text-editor" data-id="274d9c90" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class=""><img class="aligncenter wp-image-1451" src="/wp-content/uploads/2021/12/Using-OptionalNullable-Properties-in-API-Requests_Blog_Facebook-1-e1631787822746-1024x436.png" alt="Using Optional and Nullable Properties in API Requests | APIMatic Blog" width="623" height="265" /></p>
<p class=""><span style="font-weight: 400;">An essential part of an API endpoint is its parameters. While certain parameters must be included in each request, there may be some parameters that may or not may not be included in the request. The </span><span style="font-weight: 400;"><code>optional</code> </span><span style="font-weight: 400;">property was introduced to create unique combinations of such parameters in API requests. In other cases, some parameters may be allowed to hold a null value, which is catered via <code>nullable</code> properties that help in coping with the errors if null is not handled correctly. </span></p>
<p class=""><span style="font-weight: 400;">While all endpoint parameter types (query, body, form, and path) can have optional nullable properties, we’ll be focusing on the optional nullable properties of a model’s fields being passed as request parameters in a </span><b>client SDK</b><span style="font-weight: 400;">. </span></p>
<p class=""><i><span style="font-weight: 400;">This blog is the first part of a series on how optional and nullable properties can be used flexibly and in multiple combinations to cater to each parameter of your API requests. </span></i></p>

<h2 class=""><strong>Required, Optional, and Nullable Properties in OpenAPI</strong></h2>
<p class=""><span style="font-weight: 400;">The </span><a href="https://github.com/OAI/OpenAPI-Specification"><span style="font-weight: 400;">OpenAPI Specification</span></a> <span style="font-weight: 400;">is a simple yet powerful way of describing RESTful APIs, in a machine and human-readable format, using JSON or YAML.</span><span style="font-weight: 400;"> OpenAPI has some examples of Uber’s API listed down </span><a href="https://github.com/OAI/OpenAPI-Specification/blob/main/examples/v2.0/json/uber.json"><span style="font-weight: 400;">in their repository</span></a> <span style="font-weight: 400;">to help understand how the endpoint is specified with OpenAPI. </span></p>
<p class=""><span style="font-weight: 400;">The OpenAPI specification allows defining parameters for an operation or path. Parameters can be of different types i.e header, query, cookies, path parameters.</span></p>

<h3 class=""><b>Required Parameters</b></h3>
<p class=""><span style="font-weight: 400;">One of the attributes that can be defined for these parameters is</span><b> “required”</b><span style="font-weight: 400;"> which simply means whether it is a </span><i><span style="font-weight: 400;">required </span></i><span style="font-weight: 400;">parameter or an </span><i><span style="font-weight: 400;">optional </span></i><span style="font-weight: 400;">one. Let&#8217;s take a look at an example of Uber’s </span><a href="https://developer.uber.com/docs/riders/references/api/v1.2/products-get"><span style="font-weight: 400;">Get Products</span></a><span style="font-weight: 400;"> endpoint specification:</span></p>

<pre class=""><code class="language-json">"paths": {
	"/products": {
  	"get": {
        ...
        "parameters": [
            {
                "name": "latitude",
                "in": "query",
                "description": "Latitude component of location.",
                "required": true,
                "style": "form",
                ...
            },
            {
                "name": "longitude",
                "in": "query",
                "description": "Longitude component of location.",
                "required": true,
                "style": "form",
                ...
            }
    	]
  	    }
      }
  }</code></pre>
<p class=""><span style="font-weight: 400;">You can get more details </span><span style="font-weight: 400;">regarding </span><a href="https://swagger.io/docs/specification/describing-parameters/"><span style="font-weight: 400;">Required and Optional Parameters</span></a> <span style="font-weight: 400;">in the official OAS document.</span></p>

<h3 class=""><b>Nullable Parameters</b></h3>
<p class=""><span style="font-weight: 400;">OpenAPI supports values of data types to be null. To specify, one can use the </span><b>“</b><span style="font-weight: 400;">nullable: true</span><b>” </b><span style="font-weight: 400;">property while defining a data type in OAS version 3.0.0. Let&#8217;s look at the definition of the </span><code>Profile</code> <span style="font-weight: 400;">schema that is defined for the response that we receive for the endpoint </span><a href="https://developer.uber.com/docs/riders/references/api/v1.2/me-get#resource"><span style="font-weight: 400;">User Profile</span></a>. <span style="font-weight: 400;">The attribute </span><code>promo_code</code><span style="font-weight: 400;"> is nullable here:</span></p>

<pre class=""><code class="language-json">"Profile": {
	"title": "Profile",
	"required": [
  	"middle_name",
  	"rider-id"
	],
	"type": "object",
	"properties": {
        "first_name": {
            "type": "string",
            "description": "First name of the Uber user."
        },
        ...
        "promo_code": {
            "type": "string",
            "nullable": "true",
            "description": "Promo code of the Uber user."
        }
    }
}</code></pre>
<p class=""><span style="font-weight: 400;">For more detail, please refer to the </span><a href="https://swagger.io/docs/specification/data-models/data-types/"><span style="font-weight: 400;">Null Property</span></a> <span style="font-weight: 400;">section in the OAS document.</span></p>

<h2 class=""><strong>Optional and Nullable Properties in APIMatic&#8217;s Client SDKs</strong></h2>
<p class=""><span style="font-weight: 400;"><a href="https://apimatic.io/">APIMatic</a> is a developer experience platform that focuses on increasing your API’s adoption with comprehensive documentation, multi-language SDKs, and much more. The SDKs are autogenerated for your API and contain support for optional and nullable properties, that are translated from your OpenAPI specification file. </span></p>
<p class=""><span style="font-weight: 400;">The client SDK is built up of a multitude of endpoints sending data from client to server with the help of parameters. Those parameters can be sent in different parts of a request and hence they are distinguished on the location in which they are sent. Endpoint parameters can be of four types:</span></p>

<ol class="">
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Query parameters</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Path parameters </span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Body parameters</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Form parameters</span></li>
</ol>
<p class=""><span style="font-weight: 400;">These parameters can have multiple properties associated with them like their schema, description, summary, and more. </span><b>Required </b><span style="font-weight: 400;">and </span><b>nullable </b><span style="font-weight: 400;">are two of those properties that can be set for these parameters. </span></p>
<p class=""><span style="font-weight: 400;">During client and server communication, data is serialized from object to JSON string and gets deserialized from JSON string to an object. The data being passed in the parameters can be a simple field, or a model containing multiple fields. Model fields can have </span><em>required</em> <span style="font-weight: 400;">and </span><em>nullable</em> <span style="font-weight: 400;">properties in the same way as a request parameter itself. Regardless of the type of data being passed, </span><em>optional</em> <span style="font-weight: 400;">and </span><em>nullable</em> <span style="font-weight: 400;">is in context to the representation of that data in JSON string during serialization.</span></p>
<p class=""><span style="font-weight: 400;">An</span><strong> o</strong><span style="font-weight: 400;"><strong>ptional</strong> </span><span style="font-weight: 400;">property means that it may or may not be present in the resultant JSON string, while a </span><span style="font-weight: 400;"><strong>required</strong> </span><span style="font-weight: 400;">property means that it will always be present in the JSON string. </span><span style="font-weight: 400;"><strong>Nullable</strong> </span><span style="font-weight: 400;">means that if the property is present in JSON, it can hold a null value, and </span><strong>non-nullable</strong><span style="font-weight: 400;"> means that the value of that property cannot be null in the JSON string. Therefore, we can formulate a total of four combinations for this:</span></p>

<h3><b>1. Optional Nullable</b></h3>
<p class=""><span style="font-weight: 400;">If a field (whether it is a parameter or a part of a model) is uninitialized, i.e., not specified, then </span><span style="font-weight: 400;">it should be ignored in the JSON string during serialization. If it is initialized and assigned a null value explicitly, then it should be represented in the JSON string. </span></p>
<p class=""><span style="font-weight: 400;">Let&#8217;s consider the example of a model/definition </span><code>Profile</code><span style="font-weight: 400;"> which consists of the following fields:</span></p>

<pre class=""><code class="language-c">Profile
{
   string picture;
   string first_name;
   string middle_name;
   string last_name;
   string uuid;
   string rider_id;
   string email;
   bool mobile_verified;
   string promo_code;
}</code></pre>
<p class=""><span style="font-weight: 400;">Its OpenAPI specification looks like this:</span></p>

<pre class=""><code class="language-json">"Profile": {
	"title": "Profile",
	"required": ["middle_name", "rider-id"],
	"type": "object",
	"properties": {
  	"first_name": {
    	"type": "string",
    	"description": "First name of the Uber user."
  	},
  	"last_name": {
    	"type": "string",
    	"description": "Last name of the Uber user."
  	},
  	"middle_name": {
    	"type": "string",
    	"nullable": "true",
    	"description": "Last name of the Uber user."
  	},
  	"email": {
    	"type": "string",
    	"description": "Email address of the Uber user"
  	},
        "mobile_verified": {
    	"type": "boolean",
    	"description": "Mobile verification of Uber user"
  	},
  	"rider-id": {
    	"type": "string",
    	"description": "Rider id of the Uber user"
  	},
  	"picture": {
    	"type": "string",
    	"description": "Image URL of the Uber user."
  	},
  	"promo_code": {
    	"type": "string",
    	"nullable": "true",
    	"description": "Promo code of the Uber user."
  	}
    }
}</code></pre>
<p class=""><span style="font-weight: 400;">During the instantiation of <code>Profile</code>, if  </span><code>promo_code</code><b> </b><span style="font-weight: 400;">is initialized with a null value in the client SDK and sent in the request, the resultant JSON string after serialization will hold its null value as its nullable property:</span></p>

<pre class=""><code class="language-json">{
    "picture": "https://d1w2poirtb3as9.cloudfront.net/f3be498cb0bbf570aa3d.jpeg",
    "first_name": "Uber",
    ...
    "mobile_verified": true,
    "promo_code": "null"
}</code></pre>
<p class=""><span style="font-weight: 400;">If </span><code>promo_code</code><b> </b><span style="font-weight: 400;">is uninitialized during the <code>Profile</code> instantiation for the request, the resultant JSON will ignore <code>promo_code</code>, as it was an </span><b>optional </b><span style="font-weight: 400;">field.</span></p>

<pre class=""><code class="language-json">{
    "picture": "https://d1w2poirtb3as9.cloudfront.net/f3be498cb0bbf570aa3d.jpeg",
    "first_name": "Uber",
    ...
    "mobile_verified": true,
}</code></pre>
<p class=""><span style="font-weight: 400;">If  </span><code>promo_code</code><b> </b><span style="font-weight: 400;">is initialized with a proper value during the <code>Profile</code> instantiation for sending it in the request, the resultant JSON will include the field as specified:</span></p>

<pre class=""><code class="language-json">{
    "picture": "https://d1w2poirtb3as9.cloudfront.net/f3be498cb0bbf570aa3d.jpeg",
    "first_name": "Uber",
    ...
    "mobile_verified": true,
    "promo_code": "uberd340ue"
}</code></pre>
<h3><b>2. Optional Non-Nullable</b></h3>
<p class=""><span style="font-weight: 400;">If a field (whether it’s a parameter or a part of the model) is uninitialized, i.e., not specified, then </span><span style="font-weight: 400;">it should be ignored in JSON string during serialization but as it can not be initialized with a null value, hence we should ignore it JSON. Let’s look at the </span><code>Profile</code> <span style="font-weight: 400;">JSON schema again, where the attribute </span><code>picture</code><b> </b><span style="font-weight: 400;">is optional non-nullable as specified in the OAS of Profile. </span></p>
<p class=""><span style="font-weight: 400;">If </span><code>picture</code><span style="font-weight: 400;"> is initialized with a non-null value when sending it in a request, the resultant JSON string will look like this:</span></p>

<pre class=""><code class="language-json">{
    "picture": "https://d1w2poirtb3as9.cloudfront.net/f3be498cb0bbf570aa3d.jpeg",
    "first_name": "Uber",
    "middle_name": "null",
    "last_name": "Developer",
    "uuid": "f4a416e3-6016-4623-8ec9-d5ee105a6e27",
     ...
}</code></pre>
<p class=""><span style="font-weight: 400;">If </span><b><code>picture</code> </b><span style="font-weight: 400;">is initialized with a <strong>null</strong> value, it can be ignored in the resultant JSON as it is an optional attribute.</span></p>

<pre class=""><code class="language-json">{
    "first_name": "Uber",
    "middle_name": "null",
    "last_name": "Developer",
    "uuid": "f4a416e3-6016-4623-8ec9-d5ee105a6e27",
     ...
}</code></pre>
<h3 class=""><b>3. Required Nullable</b></h3>
<p class=""><span style="font-weight: 400;">Required Nullable attributes will always become part of the resultant JSON string as they are required. It will always be included in the JSON, whether it has a null or non-null value. </span><span style="font-weight: 400;">Let&#8217;s consider the </span><code>middle_name</code><b> </b><span style="font-weight: 400;">as a </span><strong>required nullable </strong><span style="font-weight: 400;">attribute.</span></p>
<p class=""><span style="font-weight: 400;">If </span><code>middle_name</code><b> </b><span style="font-weight: 400;">is initialized with a null value or uninitialized in the request, its JSON output will be:</span></p>

<pre class=""><code class="language-">{
   ...
    "middle_name": "Software",
    "last_name": "Developer",
    "uuid": "f4a416e3-6016-4623-8ec9-d5ee105a6e27",
   ...
}</code></pre>
<p class=""><span style="font-weight: 400;">If </span><code>middle_name</code><b> </b><span style="font-weight: 400;">is initialized with a proper value, the resultant JSON will be:</span></p>

<pre class=""><code class="language-json">{
    ...
    "middle_name": "faloola",
    "last_name": "Developer",
    "uuid": "f4a416e3-6016-4623-8ec9-d5ee105a6e27",
    ...
}</code></pre>
<h3><b>4. Required Non-Nullable</b></h3>
<p class=""><span style="font-weight: 400;">Required Non-Nullable attributes are also a </span><b>must </b><span style="font-weight: 400;">in JSON string during serialization. A null value is not allowed to be specified as <em>required</em> so it cannot be ignored. </span></p>
<p class=""><span style="font-weight: 400;">The </span><code>rider_id</code><b> </b><span style="font-weight: 400;">is a non-nullable attribute in the </span><span style="font-weight: 400;">Profile </span><span style="font-weight: 400;">schema. The null value cannot be specified in this case, and with a non-null value its resultant JSON will be:</span></p>

<pre class=""><code class="language-json">{
    "picture": "https://d1w2poirtb3as9.cloudfront.net/f3be498cb0bbf570aa3d.jpeg",
    "first_name": "Uber",
    "middle_name": "null",
    "last_name": "Developer",
    "uuid": "f4a416e3-6016-4623-8ec9-d5ee105a6e27",
    "rider_id": "8OlTlUG1TyeAQf1JiBZZdkKxuSSOUwu2IkO0Hf9d2HV52Pm25A0NvsbmbnZr85tLVi-s8CckpBK8Eq0Nke4X-no3AcSHfeVh6J5O6LiQt5LsBZDSi4qyVUdSLeYDnTtirw==",
    "email": "uberdevelopers@gmail.com",
    "mobile_verified": true,
    "promo_code": "uberd340ue"
}</code></pre>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">

<hr />

</div>
</div>
<h2 class=""><strong>Conclusion</strong></h2>
<p class=""><span style="font-weight: 400;">It is entirely up to you how you incorporate the optional and nullable properties in your API calls. It is essential to handle null reference exceptions being thrown to the end-user, to avoid any unpleasant experience with your API. Learn more about what APIMatic offers for a comprehensive <a href="https://www.apimatic.io/features/">developer experience</a> and how you can generate feature-packed <a href="https://www.apimatic.io/account/register">SDKs with your API</a> in just a few clicks. Stay tuned for more blogs that go into detail on how optional and nullable properties can be implemented in Java, C#, Python, Ruby, PHP, and TypeScript.</span></p>

</div>
</div>
</div>
</div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/2021/09/using-optional-and-nullable-properties-in-api-requests/">Using Optional and Nullable Properties in API Requests</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Curating Postman Collections To Generate Quality API Documentation &#038; SDKs</title>
		<link>/blog/2021/04/curating-postman-collections-to-generate-quality-api-documentation-sdks/</link>
		
		<dc:creator><![CDATA[Faria Rehman]]></dc:creator>
		<pubDate>Thu, 08 Apr 2021 10:00:45 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[Postman]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[Api Description]]></category>
		<category><![CDATA[Api documentation]]></category>
		<category><![CDATA[postman collections]]></category>
		<category><![CDATA[Sdks]]></category>
		<guid isPermaLink="false">https://apimatic-blog.000webhostapp.com/?p=140</guid>

					<description><![CDATA[<p>Are you looking to provide a smooth developer experience with your APIs and as a result maximize API consumption? Then, you can’t really afford to put off API documentation as a last thought. After all, it is one of the critical pieces of any good developer experience program along with platform SDKs, code samples etc. [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/2021/04/curating-postman-collections-to-generate-quality-api-documentation-sdks/">Curating Postman Collections To Generate Quality API Documentation &#038; SDKs</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="140" class="elementor elementor-140">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-18c89b1c elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="18c89b1c" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-7cf44855" data-id="7cf44855" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-3be71a1f elementor-widget elementor-widget-text-editor" data-id="3be71a1f" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">Are you looking to provide a smooth developer experience with your APIs and as a result maximize API consumption? Then, you can’t really afford to put off API documentation as a last thought. After all, it is one of the critical pieces of any good developer experience program along with platform SDKs, code samples etc.</p>
<p class="">Who are the end-users of a documentation, really? <strong>Humans</strong>. So, naturally, your API documentation can only be termed “good quality” if it comes with a human element in it— easy to read, navigate and comprehend. Similarly, a good quality SDK is one which is usable, idiomatic, comes bundled with language-specific documentation and is simple enough to be used by any average developer. This implies that <strong>user-friendliness</strong> is a key factor in determining the quality of your API developer experience program.</p>
<p class=""><a href="https://www.postman.com/" target="_blank" rel="noreferrer noopener">Postman</a> is a tool widely used by developers for API testing and for collaborating over APIs with teams. You can then easily export your API requests in the form of a Postman Collection file and use it to generate complete API documentation as well as SDKs. In this blog, I share a few tips to gear your API documentation and SDKs towards your developers from as early as your starting point — Postman requests and the resulting Postman Collection.</p>
<h2 class="">1. Assign a User Friendly and Unique Name to Your Postman&nbsp;Requests</h2>
<p class="">Let’s say you create a new request in Postman Collection and set its URL to something like <code>&lt;a href=&quot;http://i-am-just-an-example.com/dummy&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;http://i-am-just-an-example.com/dummy&lt;/a&gt;</code>&nbsp;.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/17MzqF90_GLGOfw3t7uso4w.png" alt="Where to set a request’s URL in Postman"></p>
<figcaption>Specify your request’s URL in Postman’s request&nbsp;UI</figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">Now, when you proceed to save this request, you’ll notice that Postman sets the request URL as the default name for your request. You can go ahead and save your request without changing this name and Postman won’t complain.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1ZpJ_c7rH5Ju8sVlsvRlSfA.png" alt="The dialog box that appears if you try to save your request in Postman"></p>
<figcaption>The dialog box that appears if you try to save your request in&nbsp;Postman</figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">Imagine having 50+ such requests in your Postman Collection, each with a name set as the request’s URL. Look how hard it is to locate a particular request in the left bar or in the documentation preview navigation:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1R3H8f2vXzAYd_MDq6pT0mw.png" alt="How a Postman Collection with lots of requests looks like if the requests’ default names are not changed"></p>
<figcaption>How a Postman Collection with lots of requests looks like if the requests’ default names are not&nbsp;changed</figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">If you, as an API provider, are having trouble looking for a request, imagine how hard it will be for a completely new user looking to consume your API.</p>
<p class="">So, while Postman sets the request URL as your default name for a request to save you some time, it is highly recommended that you <strong>replace</strong> those names with ones which are more <strong>meaningful</strong>, <strong>short</strong> and <strong>user-friendly</strong>. Here is an example of <a href="https://www.apimatic.io/apidocs/apimatic/" target="_blank" rel="noreferrer noopener">APIMatic’s API</a> (ungrouped version) that I imported into Postman which makes better use of request naming:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/18hAcSdqQJ0bSIskfmG3QqA.png" alt="How a Postman Collection with lots of requests looks like if the requests’ default names are changed to more meaningful ones"></p>
<figcaption>How a Postman Collection with lots of requests looks like if the requests’ default names are changed to more meaningful ones</figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p>A good request name will, therefore:</p>
<ul class="">
<li>Be short and sweet — ideally less than 30 characters.</li>
<li>Ideally not contain any special characters/symbols.</li>
<li>Indicate the API resource you are trying to access/modify e.g. for APIMatic’s API this could be an “SDK”.</li>
<li>Indicate the action being performed on the API resource e.g. creating/generating an SDK.</li>
</ul>
<p class="">Of course, a good name is highly dependent on a good API design as well. However, generally speaking, your request name must at least clearly indicate to the user what he/she can achieve upon making this request.</p>
<div class="n p">
<div class="ab ac ae af ag fg ai aj">
<h2 id="c437" class="jj jk fj as jl jm jn io jo jp jq is jr js jt ju jv jw jx jy jz ka kb kc kd ke bx">2. Increase Discoverability ? — Group Related Requests</h2>
<p id="a218" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">In the previous section, you saw that the requests were thrown directly into a Collection without any grouping. To improve developer experience, you need to reduce the time it takes for your users to find a particular request/endpoint. Since Postman supports nesting, you should group related requests into&nbsp;<strong class="il jh">folders</strong>. Generally, all requests/endpoints dealing with a particular resource or feature should be grouped together. Here is what the&nbsp;<a class="cd ji" href="https://www.apimatic.io/apidocs/apimatic/" rel="noopener">APIMatic’s API</a>&nbsp;looks like after grouping:</p>
</div>
</div>
<div class="ic">
<div class="n p">
<div class="kp kq kr ks kt ku af kv ag kw ai aj">
<figure class="hx hy hz ia ib ic ky kz paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep lp">
<figure style="width: 1000px" class="wp-caption aligncenter"><img class="aj ih ii" src="/wp-content/uploads/2021/12/15qhFoCGvNQnb8_OnEfhbbg.png" alt="What grouping requests in a folder in Postman looks like" width="1000" height="274"><figcaption class="wp-caption-text">What grouping requests in a folder in Postman looks like</figcaption></figure>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
</div>
</div>
</div>
<div class="n p">
<div class="ab ac ae af ag fg ai aj">
<h2 id="0594" class="jj jk fj as jl jm jn io jo jp jq is jr js jt ju jv jw jx jy jz ka kb kc kd ke bx">3. Add Plenty of Descriptive Content in Your Postman Collections</h2>
<p id="ac80" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">Your end-users are new to your API and know nothing about your offerings. Therefore, your documentation must be very clear and descriptive about everything. As a starting point, make sure that you have descriptions set for each of your important components in your Postman Collection.</p>
<p id="35cd" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">Postman&nbsp;<a class="cd ji" href="https://learning.postman.com/docs/publishing-your-api/authoring-your-documentation/" rel="noopener">supports GitHub flavored Markdown syntax</a>so you can easily add any kind of descriptive content (lists, images, tables, etc.) pretty much everywhere including (but not limited to):</p>
<h3 id="782a" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">3.1. API Itself</h3>
<p id="98a8" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">A good place to inform your users what your API offers and how they can quickly gain access to its endpoints. Here is how Postman describes its API in its Postman Collection:</p>
<figure class="hx hy hz ia ib ic eo ep paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep mh">
<div class="mm s bz kk">
<div class="mn mo s">
<figure style="width: 700px" class="wp-caption aligncenter"><img class="pg ud t u v mj aj c" src="/wp-content/uploads/2021/12/1eKoeKSSAkYzStm2omxWsPw.png" alt="How descriptive content at API level is rendered in documentation" width="700" height="593"><figcaption class="wp-caption-text">How descriptive content at API level is rendered in documentation</figcaption></figure>
</div>
</div>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
<h3 id="fa90" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">3.2. Folder Level</h3>
<p id="444e" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">When you click on a folder in the collection, you can add/edit its description (or documentation for newer Postman App versions). Here you can tell users more about what gels together the requests in this particular folder, e.g., which common feature they target or what common resource they are related to.</p>
<figure class="hx hy hz ia ib ic eo ep paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep ms">
<div class="mm s bz kk">
<div class="mt mo s">
<div class="bv mi t u v mj aj dk mk ml">
<figure style="width: 700px" class="wp-caption aligncenter"><img class="pg ud t u v mj aj c" src="/wp-content/uploads/2021/12/1cRc_XuhnRHWsfHcAXP4_5Q.png" alt="How descriptive content at API level is rendered in documentation" width="700" height="239"><figcaption class="wp-caption-text">How descriptive content at folder level is rendered in documentation</figcaption></figure>
</div>
</div>
</div>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
<h3 id="0c00" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">3.3. Request Level</h3>
<p id="a6ac" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">You can save a request’s description when saving/editing the request or later in the documentation section if you are using the latest Postman app. For request descriptions, tell users what the particular request/endpoint is expected to do, e.g., the kind of inputs it will accept and what it will return.</p>
<figure class="hx hy hz ia ib ic eo ep paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep mu">
<div class="mm s bz kk">
<div class="mv mo s">
<div class="bv mi t u v mj aj dk mk ml">
<p class="mod-reset">&nbsp;</p>
</div>
<figure style="width: 700px" class="wp-caption aligncenter"><img class="pg ud t u v mj aj c" src="/wp-content/uploads/2021/12/1tQMekQgXb9s3ZnTgUkEeHg.png" alt="How descriptive content at request level is rendered in documentation" width="700" height="265"><figcaption class="wp-caption-text">How descriptive content at request level is rendered in documentation</figcaption></figure>
</div>
</div>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
<h3 id="9314" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">3.4. Request Parameters Level</h3>
<p id="2d0e" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">You can specify descriptions for your request parameters including query parameters and path variables. You can comment about what information that parameter stores and optionally any details related to the expected type of the parameter (a number, object or string, etc.) or any restrictions to its value, etc.</p>
<figure class="hx hy hz ia ib ic eo ep paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep mw">
<div class="mm s bz kk">
<div class="mx mo s">
<div class="bv mi t u v mj aj dk mk ml">
<p class="mod-reset">&nbsp;</p>
</div>
<figure style="width: 700px" class="wp-caption aligncenter"><img class="pg ud t u v mj aj c" src="/wp-content/uploads/2021/12/1A1R6_J_APXsxBjzBC-Jqsw.png" alt="How descriptive content at request params level is rendered in documentation" width="700" height="402"><figcaption class="wp-caption-text">How descriptive content at request params level is rendered in documentation</figcaption></figure>
</div>
</div>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
<h2 id="d582" class="jj jk fj as jl jm jn io jo jp jq is jr js jt ju jv jw jx jy jz ka kb kc kd ke bx">4. Don’t Forget the Examples!</h2>
<h3 id="2f63" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">4.1. Request Parameter Values</h3>
<p id="ecd4" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">During an API testing session, you must have provided some input values to the request parameters in order to get the response. If you have saved and published your collection with those values, they will show up in your documentation as examples, as can be seen below:</p>
<figure class="hx hy hz ia ib ic eo ep paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep my">
<div class="mm s bz kk">
<div class="mz mo s">
<div class="bv mi t u v mj aj dk mk ml">
<figure style="width: 700px" class="wp-caption aligncenter"><img class="pg ud t u v mj aj c" src="/wp-content/uploads/2021/12/1cOOkc3cv1pZEk1tdZ3edTQ.png" alt="How request params input values are rendered in documentation" width="700" height="266"><figcaption class="wp-caption-text">How request params’ input values are rendered in documentation</figcaption></figure>
</div>
</div>
</div>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
<h3 id="7414" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">4.2. Request-Response Examples</h3>
<p id="4dfa" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">Setting request values is not enough for giving a full picture of the capabilities of your particular request to your user. What happens if the user doesn’t send a required parameter? What happens if the parameter value is wrong? What happens if the user doesn’t authenticate the request? Luckily, Postman Collections have a<a class="cd ji" href="https://learning.postman.com/docs/sending-requests/examples/" rel="noopener">request-response example pair feature</a>&nbsp;where you can represent these scenarios easily. It is a bit hidden in the Postman app so it is quite likely that you probably missed it before. Click on the three dots next to the request’s name and choose “Add example”:</p>
</div>
</div>
<div class="ic">
<div class="n p">
<div class="kp kq kr ks kt ku af kv ag kw ai aj">
<figure class="hx hy hz ia ib ic ky kz paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep na">
<figure style="width: 1000px" class="wp-caption aligncenter"><img class="aj ih ii" src="/wp-content/uploads/2021/12/1p2tkfKricy8lxJO_YO3y8A.png" alt="How to add a request-response example from the request UI in Postman" width="1000" height="166"><figcaption class="wp-caption-text">How to add a request-response example from the request UI in Postman</figcaption></figure>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
</div>
</div>
</div>
<div class="n p">
<div class="ab ac ae af ag fg ai aj">
<p id="cef9" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">OR you can also save an example when you receive a response from your request in Postman, using the “Save an example” option:</p>
</div>
</div>
<div class="ic">
<div class="n p">
<div class="kp kq kr ks kt ku af kv ag kw ai aj">
<figure class="hx hy hz ia ib ic ky kz paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep nb">
<figure style="width: 1000px" class="wp-caption aligncenter"><img class="aj ih ii" src="/wp-content/uploads/2021/12/1tc0XNxStG3dRSkougAVJKA.png" alt="How to add a request-response example from real response data in Postman" width="1000" height="263"><figcaption class="wp-caption-text">How to add a request-response example from real response data in Postman</figcaption></figure>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
</div>
</div>
</div>
<div class="n p">
<div class="ab ac ae af ag fg ai aj">
<p id="ee37" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">Remember, that these examples are essentially request-response pairs which means that each response is tied to a particular request. To make the best use of this feature, there are a few things to keep in mind:</p>
<h4 id="f528" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx"><strong class="il jh">Examples Should Cover All Possible Response Status Codes</strong></h4>
<p id="175d" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">Ideally, your examples should cover all possible response status codes<strong class="il jh">&nbsp;</strong>that your API request can return e.g. success codes in the range 2XX and error codes in the ranges 4XX and 5XX.</p>
<h4 id="a3da" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx"><strong class="il jh">Assign Unique Identifiers</strong></h4>
<p id="8b50" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">Don’t forget to assign a short meaningful identifier to each request-response example pair. The identifier should summarize what scenario this example represents e.g. a success/error case. Postman groups together the examples tied to a particular request using these identifiers as you can see below:</p>
<figure class="hx hy hz ia ib ic eo ep paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep nc">
<figure style="width: 700px" class="wp-caption aligncenter"><img class="aj ih ii" src="/wp-content/uploads/2021/12/1l4Rsv_8rPDiurLqJeXOkGQ.png" alt="Examples belonging to the same request can be navigated using the dropdown menu in documentation" width="700" height="593"><figcaption class="wp-caption-text">Examples belonging to the same request can be navigated using the dropdown menu in documentation.</figcaption></figure>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
<h2 id="9073" class="jj jk fj as jl jm jn io jo jp jq is jr js jt ju jv jw jx jy jz ka kb kc kd ke bx">5. Setup Authentication Properly ?</h2>
<p id="ef39" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">For API testing, plenty of developers tend to pass the&nbsp;<code class="kk kl km kn ko b">Authorization</code>&nbsp;header directly for authenticating their requests. This is not recommended unless you have a really custom authentication flow. Postman&nbsp;<a class="cd ji" href="https://learning.postman.com/docs/sending-requests/authorization/" rel="noopener">natively supports various authentication types</a> that can be applied globally at API level and can also be overridden in individual requests e.g. OAuth 2.0 flows, Basic authentication, API keys etc. Setting up the right authentication flow for your API and requests within Postman helps configure your Postman Collection correctly. This in turn improves the documentation by enabling documentation generators to generate relevant authentication sections as shown below:</p>
<figure class="hx hy hz ia ib ic eo ep paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep nd">
<div class="mm s bz kk">
<div class="ne mo s">
<figure style="width: 700px" class="wp-caption aligncenter"><img class="pg ud t u v mj aj c" src="/wp-content/uploads/2021/12/1hBSxhv2TkaVbCU94Uu5dhg.png" alt="Auto-generated sections in Postman if authentication is properly setup" width="700" height="433"><figcaption class="wp-caption-text">Auto-generated sections in Postman if authentication is properly setup</figcaption></figure>
</div>
</div>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
<h2 id="6705" class="jj jk fj as jl jm jn io jo jp jq is jr js jt ju jv jw jx jy jz ka kb kc kd ke bx"><strong class="bc">Taking Your Postman Collection Beyond API Documentation via&nbsp;</strong>APIMatic ?</h2>
<p id="6b40" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph=""><a class="cd ji" href="https://apimatic.io/" rel="noopener">APIMatic</a> offers a customizable&nbsp;<a class="cd ji" href="https://www.apimatic.io/developer-experience-portal" rel="noopener">developer experience solution</a>&nbsp;that comes bundled with rich features like SDKs, reactive code samples, API explorer, API description transformations and much more beyond simple API docs. If you are looking to generate your API documentation and SDKs in APIMatic from a Postman Collection, there are a few additional trips and tricks to improve the quality of generated documentation:</p>
<h3 id="80ea" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">Make Your Request Names Code Generation Friendly</h3>
<p id="fa5f" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">Since APIMatic’s documentation comes bundled with language-specific features like SDKs and reactive code samples in addition to the HTTP reference documentation, we expect users to take extra care of request naming conventions. This is because the request names from your Postman file are used for generating controller names and SDK components as part of the portal generation process. Therefore, names that are too long (greater than 50 characters) or use special characters are not recommended.</p>
<h3 id="e767" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">Tweak Imported Models If Necessary ?</h3>
<p id="18a3" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">A unique feature of APIMatic is that we infer complex models from your request/response example values (at the time of importing the Postman Collection) to improve your experience with our SDKs/portal. To ensure that the models generated are a true representation of your API, here are a few additional recommendations:</p>
<ul class="">
<li id="8f32" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg lh li lj bx" data-selectable-paragraph=""><strong class="il jh">Examples must be valid and thorough</strong></li>
</ul>
<p id="04cc" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">The examples provided in the Postman Collection must be valid, thorough and ideally cover all possible properties in case complex objects are involved.</p>
<ul class="">
<li id="d278" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg lh li lj bx" data-selectable-paragraph=""><strong class="il jh">Fine-tune model information that can’t be deduced from examples</strong></li>
</ul>
<p id="f815" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">Deducing models from examples may not always result in complete type information and may also not be 100% accurate every time. For example, it is not always apparent whether a particular property in the object is required or optional, whether a numeric property allows only integers or bigger values like long, double as well, etc. This is one big reason why formats like OpenAPI, RAML and others have a proper type system which Postman does not have. However, after your models are imported, you can always fine-tune<strong class="il jh">&nbsp;</strong>them in&nbsp;<a class="cd ji" href="https://www.apimatic.io/dashboard" rel="noopener">APIMatic’s API editor</a>&nbsp;to get the same behavior.</p>
<ul class="">
<li id="83a6" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg lh li lj bx" data-selectable-paragraph=""><strong class="il jh">Deduplicate models</strong></li>
</ul>
<p id="ebfc" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">Since it is quite possible that two different components have very similar examples, therefore, the generated models may be, e.g., a subset of each other. While detecting this during the import process is not exactly possible, you can, however, deduplicate the models in the editor after the import process to improve the quality of the output documentation/SDKs.</p>
<ul class="">
<li id="68ee" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg lh li lj bx" data-selectable-paragraph=""><strong class="il jh">Improve generated model names</strong></li>
</ul>
<p id="133b" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">The names of the generated models are assigned based on the names of the component for which the example was provided. To prevent model name duplication in such cases, a number may be appended with the model names. For example, if you have a parameter named “status” in two requests A and B where both these parameters have different examples, it is possible that the generated models from these examples can end up with names like “status1” and “status2” respectively. To improve the output for such cases, you can upload our&nbsp;<a class="cd ji" href="https://docs.apimatic.io/advanced/apimatic-metadata" rel="noopener">Metadata file</a>&nbsp;along with your Postman Collection in the form of a ZIP file during import, with the “AppendParentNameForClashes”&nbsp;<a class="cd ji" href="https://docs.apimatic.io/advanced/apimatic-metadata/#import-settings" rel="noopener">import setting</a>&nbsp;enabled. As the name suggests, this will append the parent component’s name instead of a number at the end of the model name which will add more context and improve the overall output.</p>
<h3 id="4ff8" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">Upload Environment Files</h3>
<p id="af69" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">If your Postman Collection makes use of environment variables, it is highly recommended that you upload your environment files along with your Postman Collection in the form of a ZIP file at the time of importing your file into APIMatic. These variables have no meaning in an API documentation, therefore, providing these files will help us resolve their values and display them properly.</p>
<h3 id="972b" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">Add Markdown Guides</h3>
<p id="e11d" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">Once you generate the API documentation in APIMatic from your Postman Collection, feel free to add additional quick-start&nbsp;<a class="cd ji" href="https://docs.apimatic.io/developer-experience-portal/customizing-your-portal/#guides" rel="noopener">custom Markdown guides</a>.</p>
<h2 id="4568" class="jj jk fj as jl jm jn io jo jp jq is jr js jt ju jv jw jx jy jz ka kb kc kd ke bx">Generating Documentation from Postman Collection in APIMatic — A Quick Demo ?</h2>
<p id="ba7a" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">Generating documentation in APIMatic involves a few quick steps which are explained below:</p>
</div>
</div>
<div class="ic">
<div class="n p">
<div class="kp kq kr ks kt ku af kv ag kw ai aj">
<figure class="hx hy hz ia ib ic ky kz paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep nf">
<figure style="width: 1000px" class="wp-caption aligncenter"><img class="aj ih ii" src="/wp-content/uploads/2021/12/1EA0ELZNUDGgotEjR5h2Z6A.gif" alt="Curating Postman Collections To Generate Quality API Documentation &amp;&nbsp;SDKs. Workflow for previewing a portal from your Postman Collection in APIMatic with just a few clicks" width="1000" height="563"><figcaption class="wp-caption-text">Workflow for previewing a portal from your API description file in APIMatic with just a few clicks</figcaption></figure>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
</div>
</div>
</div>
<div class="n p">
<div class="ab ac ae af ag fg ai aj">
<ul class="">
<li id="bc4c" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg lh li lj bx" data-selectable-paragraph=""><a class="cd ji" href="https://apimatic.io/account/register" rel="noopener">Sign up to APIMatic</a>, if you haven’t already.</li>
<li id="0b27" class="ij ik fj il b im lk io ip iq ll is it iu lm iw ix iy ln ja jb jc lo je jf jg lh li lj bx" data-selectable-paragraph=""><a class="cd ji" href="https://docs.apimatic.io/getting-started/manage-apis/#add-an-api" rel="noopener">Import</a>&nbsp;your Postman Collection to the&nbsp;<a class="cd ji" href="https://apimatic.io/dashboard" rel="noopener">APIMatic Dashboard</a>&nbsp;by either uploading the file from your local system or providing a public URL.</li>
<li id="40e1" class="ij ik fj il b im lk io ip iq ll is it iu lm iw ix iy ln ja jb jc lo je jf jg lh li lj bx" data-selectable-paragraph="">Your file will be validated. If there are any errors found during validation, you may need to resolve the issues before proceeding ahead.</li>
<li id="60f7" class="ij ik fj il b im lk io ip iq ll is it iu lm iw ix iy ln ja jb jc lo je jf jg lh li lj bx" data-selectable-paragraph="">Once your file gets imported, click on the “Generate” button on the imported API entity.</li>
<li id="1202" class="ij ik fj il b im lk io ip iq ll is it iu lm iw ix iy ln ja jb jc lo je jf jg lh li lj bx" data-selectable-paragraph="">Click on “Preview API Portal”.</li>
<li id="fda7" class="ij ik fj il b im lk io ip iq ll is it iu lm iw ix iy ln ja jb jc lo je jf jg lh li lj bx" data-selectable-paragraph="">You will then be taken to the preview of your portal.</li>
</ul>
<p id="6df9" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">From there onwards, you can play around with your portal, generate SDKs or publish and customize the portal to suit your needs better. Please check out our documentation on&nbsp;<a class="cd ji" href="https://docs.apimatic.io/getting-started/previewing-your-first-portal/" rel="noopener">generating feature-packed API documentation</a>&nbsp;to learn more. Happy documenting! ?</p>
</div>
</div>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:list /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/2021/04/curating-postman-collections-to-generate-quality-api-documentation-sdks/">Curating Postman Collections To Generate Quality API Documentation &#038; SDKs</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>The Whys and Hows of Exposing a SOAP Service Using Your REST API</title>
		<link>/blog/2020/06/the-whys-and-hows-of-exposing-a-soap-service-using-your-rest-api/</link>
		
		<dc:creator><![CDATA[Faria Rehman]]></dc:creator>
		<pubDate>Mon, 22 Jun 2020 13:12:15 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[REST APIs]]></category>
		<category><![CDATA[SOAP]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[Rest]]></category>
		<category><![CDATA[Soap]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=1183</guid>

					<description><![CDATA[<p>This blog is the fifth part of the series called “API Transformer Recipes”. The series aims to highlight numerous ways in which developers can integrate&#160;API Transformer&#160;into their workflow in order to gain access to a wide range of tools and frameworks. Hopefully, it should eliminate any assumptions that they might have about being restricted to [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/2020/06/the-whys-and-hows-of-exposing-a-soap-service-using-your-rest-api/">The Whys and Hows of Exposing a SOAP Service Using Your REST API</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1183" class="elementor elementor-1183">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-29e95da2 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="29e95da2" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-76519aca" data-id="76519aca" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-6585503a elementor-widget elementor-widget-text-editor" data-id="6585503a" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12"><!-- wp:group -->
<div class="wp-block-group">
<div class="wp-block-group__inner-container"><!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column" style="flex-basis: 100%;"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_2SKA02w5_032Y4Yg5SEvTw-1024x682.png" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:group -->
<div class="wp-block-group">
<div class="wp-block-group__inner-container"><!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column" style="flex-basis: 100%;"><!-- wp:paragraph -->
<p class=""><em>This blog is the fifth part of the series called “API Transformer Recipes”. The series aims to highlight numerous ways in which developers can integrate&nbsp;</em><a href="https://www.apimatic.io/transformer"><em>API Transformer</em></a><em>&nbsp;into their workflow in order to gain access to a wide range of tools and frameworks. Hopefully, it should eliminate any assumptions that they might have about being restricted to a particular set of tools just because they use a certain API specification format.</em></p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns --></div>
</div>
<!-- /wp:group -->

<!-- wp:group -->
<div class="wp-block-group">
<div class="wp-block-group__inner-container"><!-- wp:paragraph -->
<p id="3e6f" class="">You can find numerous debates out there on the topic of “SOAP vs REST” including those that believe&nbsp; REST is the new SOAP.&nbsp;Depending on your service and its target consumers, it might actually be a good idea (albeit rarely) to provide that service in the form of both SOAP and REST APIs. Sounds like an awful load of work? Perhaps not. Let’s dig deeper.</p>
<!-- /wp:paragraph --></div>
</div>
<!-- /wp:group -->

<!-- wp:group -->
<div class="wp-block-group">
<div class="wp-block-group__inner-container"><!-- wp:paragraph -->
<p id="3dcb" class="">You can also check out one of my earlier blogs on a similar topic where I shared some tips on<a href="https://apimatic.io/blog/2018/12/api-transformer-recipes-facilitating-migration-from-soap-to-rest">migrating your SOAP APIs to REST</a>.</p>
<!-- /wp:paragraph --></div>
</div>
<!-- /wp:group -->

<!-- wp:paragraph -->
<h2 class=""><strong>Is REST not enough?</strong></h2>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="e560" class="">A lot of businesses today have adapted the RESTful approach for their services as it provides a more flexible, lightweight, and efficient solution as compared to the other available alternatives. While this holds true for most cases, there can be times when you’ll find your clients (especially enterprises) seeking a SOAP service to integrate with. Some of the reasons for that can be:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="">
<li>Being slow adopters, enterprise clients might be reluctant to shift to REST since it is still a relatively newer approach to things and differs greatly from the rigid contract-based approach used by SOAP.</li>
<li>Tools and infrastructure used by enterprise clients may not yet support REST well.</li>
</ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p id="0855">Keeping this in mind, it may be useful to expose your REST service partially/completely in the form of a SOAP service as well.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h2 class=""><strong>Real-life Use Cases</strong></h2>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="d89b" class=""><a href="https://www.salesforce.com/in/?ir=1">Salesforce</a>&nbsp;provides some APIs as both SOAP and REST allowing developers to integrate in a way that suits them best e.g. check out their&nbsp;<a href="https://developer.salesforce.com/docs/atlas.en-us.api_tooling.meta/api_tooling/intro_api_tooling.htm">Tooling API</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="7b09" class="">One of our clients at APIMatic,&nbsp;<a href="https://www.cdq.ch/">CDQ AG</a>, is a data centric company. Their RESTful services provide a link between their cloud services and business applications. To facilitate smooth integration for enterprise customers, whose infrastructure does not support REST well, they have exposed the same APIs as SOAP services/WSDL interfaces too. This WSDL serves as a contract for both parties. To keep their REST and SOAP APIs in sync, they have integrated&nbsp;<a href="https://www.apimatic.io/transformer/">API Transformer</a>&nbsp;into their workflow which helps generate a new version of the WSDL for every change in their REST API (more on this later). With the newer WSDL, they update their SOAP service accordingly and in order to access the latest changes their service consumers also eventually update their applications based on this latest WSDL.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h3 class=""><strong>SOAP and WSDL</strong></h3>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="076c" class="">While it is not mandatory for every SOAP service to have a WSDL file associated with it, it is widely used as a contract between the SOAP service provider and its consumer. This file provides a complete definition of how the service works, the various operations involved and other fine grain details of all elements and attributes involved. Many tools exist that lets you generate method stubs in almost any language if you have the WSDL file with you.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h3><strong>From REST to SOAP, Using API Transformer</strong></h3>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="1af0" class="">One of the less obvious but distinctive features of&nbsp;<a href="https://www.apimatic.io/transformer/">API Transformer</a>&nbsp;is its ability to convert REST APIs to SOAP by generating WSDL files from popular formats used to describe REST APIs like OpenAPI/Swagger, RAML, API Blueprint, etc. We’ve seen, on average, over 50 unique transformations (unique per user) to WSDL every month for the past three years since this feature was launched.</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<figure style="width: 700px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2021/12/1__B0qfzhhuvta5UoEBWqIWw.png" alt="API Transformer WSDL Export Trend (Jun 2017 — Jun 2020)" width="700" height="292"><figcaption class="wp-caption-text">API Transformer WSDL Export Trend (Jun 2017 — Jun 2020)</figcaption></figure>
<figcaption></figcaption>
Note, however, that the REST APIs spoken of here include not only APIs that completely follow REST architecture style but also those that follow more of a hybrid approach between REST and RPC style.</figure>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h2><strong>Generating WSDL from REST &#8212; How does this work?</strong></h2>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="7341" class="">I went ahead and created a sample OpenAPI&nbsp;<code>v3.0</code>&nbsp;file which I then converted to WSDL using&nbsp;<a href="https://www.apimatic.io/transformer/">API Transformer</a>. Using these files, I will now show you the inner workings of the conversion below. If you are interested to see the complete files, you can find them<a href="https://github.com/fariadev22/api-transformer-recipes/tree/master/Exposing%20a%20SOAP%20API%20Using%20REST">here</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h3 class=""><strong>1. API Information</strong></h3>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="14f8">During the conversion, details related to the API like its identifying title, description and server URLs are extracted from the OpenAPI file and placed in the relevant service metadata of WSDL.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p class=""><strong><em>OpenAPI:</em></strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<pre class=""><code class="language-json">openapi: 3.0.0
info:
  title: HelloService
  description: Swagger file for generating WSDL
version: &#039;1.0&#039;
servers:
  - url: https://www.example.com/SayHello/</code></pre>
<!-- /wp:paragraph -->

<!-- wp:paragraph --><strong><em>WSDL:</em></strong> <!-- /wp:paragraph -->

<!-- wp:paragraph -->
<pre class=""><code class="language-xml">&lt;service name=&quot;HelloService&quot;&gt;
  &lt;documentation&gt;Swagger file for generating WSDL&lt;/documentation&gt;
  &lt;port name=&quot;default_Port&quot; binding=&quot;wsdl:HelloService_Binding&quot;&gt;
    &lt;soap:address location=&quot;https://www.example.com/SayHello/&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; /&gt;
  &lt;/port&gt;
&lt;/service&gt;</code></pre>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h3 class=""><strong>2. OpenAPI Paths</strong></h3>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p class="">Generally, the relative paths in OpenAPI help identify RESTful resources and associated with each of these paths are the various operations possible on these resources. However, these paths have no significance in SOAP/WSDL because the concept of resources is restricted to RESTful APIs only. Only their associated operations are converted to WSDL operations.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h3 class=""><strong>3. OpenAPI Operations vs WSDL Operations</strong></h3>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->WSDL operations are defined in an abstract way inside the port types and their concrete details are provided in the bindings. Information from OpenAPI operations is loaded into both these port types and binding operations. <!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p class=""><em><strong>OpenAPI</strong>:</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<pre class=""><code class="language-json">/message:
   get:
     tags:
      - Messages
     description: View message entry
     operationId: GetMessage
     parameters:
       - name: messageId
         in: query
         required: true
         schema:
           type: string
     responses:
       200:
         description: Message object against the id, if found
         content:
           application/json:
             schema:
               $ref: &#039;#/components/schemas/Message&#039;
       404:
         description: No messages found
         content:
           application/json:
             schema:
               $ref: &#039;#/components/schemas/Error&#039;</code></pre>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="4899" class=""><em><strong>WSDL</strong>:</em></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-xml">&lt;portType name=&quot;HelloService_PortType&quot;&gt;
  &lt;operation name=&quot;GET_GetMessage&quot;&gt;
    &lt;documentation&gt;View message entry&lt;/documentation&gt;
    &lt;input message=&quot;wsdl:GET_GetMessage_InputMessage&quot; /&gt;
    &lt;output message=&quot;wsdl:GET_GetMessage_OutputMessage&quot;&gt;
        &lt;documentation&gt;Message object against the id, if found&lt;/documentation&gt;
    &lt;/output&gt;
    &lt;fault name=&quot;GET_GetMessage_404&quot; message=&quot;wsdl:GET_GetMessage_404&quot;&gt;
        &lt;documentation&gt;No messages found&lt;/documentation&gt;
    &lt;/fault&gt;
    &lt;/operation&gt;
&lt;/portType&gt;
&lt;binding name=&quot;HelloService_Binding&quot; type=&quot;wsdl:HelloService_PortType&quot;&gt;
  &lt;soap:binding transport=&quot;http://schemas.xmlsoap.org/soap/http&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; /&gt;
  &lt;operation name=&quot;GET_GetMessage&quot;&gt;
    &lt;soap:operation soapAction=&quot;GET_GetMessage&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; /&gt;
    &lt;input&gt;
      &lt;soap:body use=&quot;literal&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; /&gt;
    &lt;/input&gt;
    &lt;output&gt;
      &lt;soap:body use=&quot;literal&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; /&gt;
    &lt;/output&gt;
    &lt;fault name=&quot;GET_GetMessage_404&quot;&gt;
      &lt;soap:fault use=&quot;literal&quot; name=&quot;GET_GetMessage_404&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; /&gt;
    &lt;/fault&gt;
  &lt;/operation&gt;
&lt;/binding&gt;</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<h4 id="1625"><strong>HTTP Verb</strong></h4>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="53c0" class="">An OpenAPI operation has a distinct HTTP verb associated with it e.g.&nbsp;<code>GET</code>,&nbsp;<code>POST</code>,&nbsp;<code>DELETE</code>, etc. indicating the type of functionality that is expected to be performed on the resource. All OpenAPI operations are converted to&nbsp;<code>POST</code>&nbsp;methods for SOAP/WSDL conversion.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h4 id="722f" class=""><strong>WSDL Operation Name</strong></h4>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="2f34" class="">The operation name for WSDL is generated by combining the HTTP verb and operation id/name from the OpenAPI operation and serves as a unique identifier.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h4 id="ee27"><strong>Request Parameters</strong></h4>
<!-- /wp:paragraph -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large is-resized">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/0_WZXzYl_m6KZQWtpE-1.jpg" alt="" width="500" height="505"></p>
<figcaption>Input parameters are wrapped and sent in SOAP body</figcaption>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph -->
<p id="4d93">All associated request parameters of an OpenAPI operation are wrapped in a single new input type and sent in the form of an&nbsp;<strong>input message</strong>&nbsp;in the SOAP body. The wrapper input type’s name is generated by combining the original HTTP verb of the operation with the operation’s id and a postfix indicating it as the input type.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="cd0f" class="">Unlike JSON, a root XML element cannot be an array. So even if only a single parameter is involved, a wrapper type helps preserve all type related information of it including array representations that would otherwise be lost.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->In the WSDL example above, note the use of the&nbsp;<code>message</code>&nbsp;attribute in&nbsp;<code class="">&lt;input&gt;</code>&nbsp;that provides a link to the concrete&nbsp;<code>&lt;message&gt;</code>&nbsp;definition in WSDL. <!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<h4 id="3f92"><strong>Operation Responses</strong></h4>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="7661">The first success response definition (of the range 2XX) is also wrapped in a new output type which defines the body of the&nbsp;<strong>output message</strong>&nbsp;received. The type name is generated in a similar fashion as that of the input type except for the postfix which indicates it as an output type.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="5e1e" class="">Error responses of the range 400 and above are considered SOAP&nbsp;<strong>faults</strong>. Note, however, that response code has no significance in WSDL.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="6fa3">Again, note the use of the&nbsp;<code>message</code>&nbsp;attribute in&nbsp;<code>&lt;output&gt;</code>&nbsp;and&nbsp;<code>&lt;fault&gt;</code>&nbsp;that provides a link to the concrete&nbsp;<code>&lt;message&gt;</code>&nbsp;definition in WSDL.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h4 id="0c7e"><strong>SOAP Binding Transport Protocol</strong></h4>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="739a" class="">SOAP binding transport protocol is assumed to be HTTP for the conversion. Since SOAP supports other transport protocols as well, this can be modified manually if required.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h3><strong>4. WSDL Messages</strong></h3>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="ae44" class="">WSDL messages defined using the&nbsp;<code>&lt;message&gt;</code>&nbsp;tag help describe the data being exchanged between the service provider and the client. Request messages are associated with the&nbsp;<code>&lt;input&gt;</code>&nbsp;tag while response messages are associated with the&nbsp;<code>&lt;output&gt;</code>&nbsp;or&nbsp;<code>&lt;fault&gt;</code>&nbsp;tag. Different parts of a message define its components and help provide a link to their concrete type schema definitions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="796f" class=""><em><strong>WSDL</strong>:</em></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-xml">&lt;message name=&quot;GET_GetMessage_InputMessage&quot;&gt;
  &lt;part name=&quot;GET_GetMessage_InputMessage&quot; element=&quot;schemas:GET_GetMessage_InputMessage&quot; /&gt;
&lt;/message&gt;
&lt;message name=&quot;GET_GetMessage_OutputMessage&quot;&gt;
  &lt;part name=&quot;GET_GetMessage_OutputMessage&quot; element=&quot;schemas:GET_GetMessage_OutputMessage&quot; /&gt;
&lt;/message&gt;
&lt;message name=&quot;GET_GetMessage_404&quot;&gt;
  &lt;part name=&quot;GET_GetMessage_404&quot; element=&quot;schemas:GET_GetMessage_404&quot; /&gt;
&lt;/message&gt;</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<h3><strong>5. OpenAPI Schema and XML Schema</strong></h3>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="5503">Schema definitions from OpenAPI are added to the XML schema(s) in WSDL&nbsp;<code>&lt;types&gt;</code>&nbsp;section. These not only include the types defined globally in OpenAPI&nbsp;<code>schema</code>&nbsp;definitions but also additional types that represent the wrapped request/response messages.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="490a" class="">In OpenAPI, you can fine-tune your schema definitions to represent XML types by adding<a href="https://swagger.io/docs/specification/data-models/representing-xml/">XML metadata</a>&nbsp;like information about namespace, prefix, XML node name, whether the property is an attribute or not, etc. Let’s have a look at how an OpenAPI schema defined with these attributes translates to a type in WSDL during the conversion.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="62f3" class=""><em><strong>OpenAPI</strong>:</em></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-json">Message:
  title: Message
  required:
    - from
    - to
    - text
    - date
  type: object
  properties:
    from:
      type: string
    to:
      type: string
    text:
      type: string
    date:
      type: string
      format: date-time
    id:
      type: string
      xml:
        name: id
        attribute: true
  xml:
    name: MessageEntry
    namespace: https://www.example.com/message
    prefix: m</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p id="f2c3"><em>WSDL:</em></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-xml">&lt;types&gt;
  &lt;xs:schema xmlns:tns=&quot;https://www.example.com/message&quot; targetNamespace=&quot;https://www.example.com/message&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;
    &lt;xs:complexType name=&quot;MessageEntry&quot;&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element minOccurs=&quot;1&quot; name=&quot;from&quot; type=&quot;xs:string&quot; /&gt;
        &lt;xs:element minOccurs=&quot;1&quot; name=&quot;to&quot; type=&quot;xs:string&quot; /&gt;
        &lt;xs:element minOccurs=&quot;1&quot; name=&quot;text&quot; type=&quot;xs:string&quot; /&gt;
        &lt;xs:element minOccurs=&quot;1&quot; name=&quot;date&quot; type=&quot;xs:dateTime&quot; /&gt;
      &lt;/xs:sequence&gt;
      &lt;xs:attribute name=&quot;id&quot; type=&quot;xs:string&quot; /&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:schema&gt;
&lt;/types&gt;</code></pre>
<!-- /wp:preformatted -->

<!-- wp:list -->
<ul class="">
<li>The XML name&nbsp;<code>MessageEntry</code>&nbsp;specified in the OpenAPI schema overrides the schema’s original name&nbsp;<code>Message</code>&nbsp;and is used instead, when creating the XML schema type in WSDL.</li>
<li>The boolean&nbsp;<code>attribute</code>&nbsp;flag in property&nbsp;<code>id</code>&nbsp;helped create an XML attribute of the same name as can be seen from the above example.</li>
<li>Furthermore, notice how in the example above, the&nbsp;<code>namespace</code>&nbsp;information from the OpenAPI schema helped us place the type definition in&nbsp;<code>&lt;schema&gt;</code>&nbsp;of the same namespace in WSDL. The prefix assigned to this namespace&nbsp;<code>m</code>&nbsp;is also preserved in the root tag of WSDL.</li>
</ul>
<!-- /wp:list -->

<!-- wp:preformatted -->
<pre><code class="language-xml">&lt;definitions 
  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; 
  xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; 
  xmlns:schemas=&quot;https://www.example.com/SayHello/schemas&quot; 
  xmlns:wsdl=&quot;https://www.example.com/SayHello/wsdl&quot; 
  xmlns:m=&quot;https://www.example.com/message&quot; 
  xmlns:e=&quot;https://www.example.com/error&quot; 
  targetNamespace=&quot;https://www.example.com/SayHello/wsdl&quot; xmlns=&quot;http://schemas.xmlsoap.org/wsdl/&quot;&gt;</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p id="693a" class="">Let’s now see how XML metadata specified in request/response schema translate to a type in WSDL:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="d63d" class=""><em><strong>OpenAPI</strong>:</em></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-json">responses:
  200:
    description: List of all message objects
    content:
      application/json:
        schema:
          type: array
          items:
            $ref: &#039;#/components/schemas/Message&#039;
          description: List of all message objects
          xml:
            name: Messages
            wrapped: true</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p id="c37b" class=""><em><strong>WSDL</strong>:</em></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-xml">&lt;types&gt;
  &lt;xs:schema xmlns:tns=&quot;https://www.example.com/SayHello/schemas&quot; targetNamespace=&quot;https://www.example.com/SayHello/schemas&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;  
    &lt;xs:complexType name=&quot;GET_GetMessages_OutputMessage&quot;&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name=&quot;Messages&quot;&gt;
          &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
              &lt;xs:element minOccurs=&quot;1&quot; maxOccurs=&quot;unbounded&quot; name=&quot;response&quot; type=&quot;m:MessageEntry&quot;&gt;
                &lt;xs:annotation&gt;
                  &lt;xs:documentation&gt;List of all message objects&lt;/xs:documentation&gt;
                &lt;/xs:annotation&gt;
              &lt;/xs:element&gt;
            &lt;/xs:sequence&gt;
          &lt;/xs:complexType&gt;
        &lt;/xs:element&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:schema&gt;
&lt;/types&gt;</code></pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<h2 id="b148">You have the WSDL — What next?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p id="6f9f" class="">Having a WSDL basically means, you have a skeleton of what your SOAP service will look like. Various tools and frameworks can then help you accelerate actual implementation of the SOAP service by generating stubs. However, before you start implementing, you need to decide whether you plan to keep the SOAP service independent from your existing REST service or not. The former case will have bigger maintenance cost and it will be difficult to keep both services in sync when changes occur. The recommended way is to implement this SOAP service more as a proxy service that handles SOAP payloads but converts them to those compatible with your existing REST service. This way your actual service will still be the REST service while the SOAP service will help facilitate the smaller chunk of your customers like enterprises. What option you pick is something you are the best judge of.</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image">
<figure style="width: 700px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2021/12/1_zo53IiiN0ricDCXce6IvNw-2.png" alt="From REST to SOAP, using API Transformer" width="700" height="466"><figcaption class="wp-caption-text">From REST to SOAP, using API Transformer</figcaption></figure>
<figcaption></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2 id="0df0" class="">Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p id="1aae" class="">REST or SOAP or both? I hope this article offered some clarification in this regard. Ultimately the choice really depends on your service and your target customers. Once you’ve made the decision, there are various tools like&nbsp;<a href="https://www.apimatic.io/transformer/" target="_blank" rel="noreferrer noopener">API Transformer</a>&nbsp;available to help you get started.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="4e4f" class="">Continue reading more API Transformer Recipes:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="">
<li><a href="https://apimatic.io/blog/2018/11/api-transformer-recipes-enabling-postmans-team-sharing-features-for-openapi-users" target="_blank" rel="noreferrer noopener">Enabling Postman’s Team Sharing Features for OpenAPI Users</a></li>
<li><a href="https://apimatic.io/blog/2018/12/api-transformer-recipes-facilitating-migration-from-soap-to-rest" target="_blank" rel="noreferrer noopener">Facilitating Migration from SOAP to REST</a></li>
<li><a href="https://apimatic.io/blog/2019/01/api-transformer-recipes-opening-ways-into-ibm-api-connect" target="_blank" rel="noreferrer noopener">Opening ways into IBM API Connect</a></li>
<li><a href="https://apimatic.io/blog/2019/07/moving-to-graphql-from-soap-or-rest" target="_blank" rel="noreferrer noopener">Moving to GraphQL from SOAP or REST</a></li>
</ul>
<!-- /wp:list --></div>
</div>
<!-- /wp:group --></div>
</div>
</div>
</div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/2020/06/the-whys-and-hows-of-exposing-a-soap-service-using-your-rest-api/">The Whys and Hows of Exposing a SOAP Service Using Your REST API</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>The Anatomy of API Code Samples</title>
		<link>/blog/2020/06/the-anatomy-of-api-code-samples/</link>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Mon, 08 Jun 2020 11:02:52 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Portal]]></category>
		<category><![CDATA[Code Samples]]></category>
		<category><![CDATA[Developer Experience]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Code Sample]]></category>
		<category><![CDATA[Sdk]]></category>
		<category><![CDATA[Software Development]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=359</guid>

					<description><![CDATA[<p>Hence it comes as no surprise why code samples make an important part of the developer experience checklist list for several APIs programs, including the likes of Amazon, Facebook, Twilio, and Stripe. All of them have code samples included one way or the other and have found massive success. And for a very good reason. [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/2020/06/the-anatomy-of-api-code-samples/">The Anatomy of API Code Samples</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="359" class="elementor elementor-359">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-2c773500 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="2c773500" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-41f291e6" data-id="41f291e6" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-7abbf594 elementor-widget elementor-widget-text-editor" data-id="7abbf594" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large"></figure>
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="9c8b" class="">While APIs form an important part of modern software development, it’s crucial to ensure that the utility offered by an API does not come at the cost of hindered productivity. Often it takes developers multiple hours to get familiar with an API before they can start building and integrating with it, however, a great developer experience can ensure developers get started with the least of steps and minimal time. In this blog, we will discuss how code samples help contribute towards an outstanding developer experience. We will discuss in detail what makes good samples, the different styles of samples, and how samples gel in with documentation and other elements to form a formidable developer experience.</p>
<h2 id="74b0" class="">Part I: Code Samples — Why Should We Care?</h2>
<p id="6565" class="">Learning new technologies is a complex task, even for the savviest of developers. Often it requires them to go through in-depth documentation, guides, and tutorials, something which they are very keen to skip on. What code samples do instead, is provide them with a task-based learning activity, which requires concrete action.</p>
<blockquote class="wp-block-quote">
<p>Developers love learning by experience.</p>
</blockquote>
<p id="60f5" class="">Developers are hands-on learners and code is another language they speak. When they see code, they want to try it, break it apart, put it into action. It’s their favorite call-to-action, often when figuring out if an API is the right fit for them, developers would have already tested out the code samples on developer portals to make their choice.</p>
<p id="d54b" class="">This was proved by a&nbsp;<a href="https://eventil.com/talks/PPSznP-jarod-reyes-how-twilio-writes-documentation">user study</a>&nbsp;conducted by Twilio, where they found that pages with lesser words before code, did better than pages with more sentences before code.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_dlX9uwiw3sdqOg9VFMaDKg.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="a6b5">Hence it comes as no surprise why code samples make an important part of the developer experience checklist list for several APIs programs, including the likes of Amazon, Facebook, Twilio, and Stripe. All of them have code samples included one way or the other and have found massive success. And for a very good reason.</p>
<h3 id="c41c">API Calls are Complex Structures</h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_th9O3N-5hKaf_z2EAFepQQ.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="0a22">Before we further talk about code samples, it’s important to understand the need for them in the first place. Why can’t developers do without them?</p>
<p id="3347">And it all starts with putting an API call together. A lot goes into an API call, all these protocols, and conventions, and developers get all caught up in it, instead of focusing on their actual projects. It can take developers multiple hours to figure out what to put into a call, taking a toll on their productivity and creativity and all adding up to integration time.</p>
<p id="e3da" class="">What code samples do is put there calls together for them, in languages of their choice, so they don’t have to do it. Nicely done samples can get developers to&nbsp;<strong>the first Hello World</strong>&nbsp;with an API without writing a single line of code. Samples that go beyond that can be put straight into production. Which now leads to our next question.</p>
<h3 id="0d90">How many code samples can you write?</h3>
<p id="cae9">Not enough! Especially if you are looking for coverage of every endpoint. APIs tend to change and evolve and to update the samples manually with every iteration, even you somehow managed to produce them is not feasible.</p>
<p id="226a" class="">A viable approach here is to auto-generate these samples using an out of the box documentation solution. Different tools have different ideas on how to package deliver these samples. While some do the bare minimum, others go the extra mile to see developers have to put in as little work to get them running. It’s important for API owners to select the right tool to provide the best samples to their consumers, it should be a top priority choosing a documentation solution.</p>
<h2 id="db1d">Part II : Code Samples — Several Different Styles</h2>
<p id="3b6d" class="">To help API owners make well-informed choices, we ran a study to compare this different style of samples, which we analyzed keeping in mind the following qualities:</p>
<ul class="">
<li><strong>Learning Objective</strong>&nbsp;— They demonstrate actual (non-theoretical) use of API</li>
<li><strong>Runnable</strong>&nbsp;— Are runnable out of the box on a console and IDEs</li>
<li><strong>Interactive</strong>&nbsp;— Come with a playground to tweak them around</li>
<li><strong>Language Idiomatic —&nbsp;</strong>Proper language Structure to gel in with production-ready applications</li>
</ul>
<p id="d76f" class="">We categorized our learning into 5 different styles, the summary of which is categorized in the table below:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_ciLtfA5TKB_gpe_Io6eBGg@2x.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="178f"><strong>Style 1: Static, Non- Runnable HTTP Snippets</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter">
<p class="mod-reset"><img class="alignnone" src="/wp-content/uploads/2021/12/1_utlmN5MUbvMqVh3hRBnOTw.png" alt="The Anatomy of API Code Samples" width="700" height="294"></p>
<figcaption>Code Sample on Postman</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p>The first style is made of static samples, which are not runnable out of the box and required some tweaking done on them. The samples while easily navigable alongside the reference docs, come with no code playground and cannot be tried or tested on the portal.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_wNmdSk-xDCaLpftrbDJG8A.gif" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="13bd" class="">We call the samples,&nbsp;<strong>HTTP snippets</strong>, because they essentially look like an HTTP call, without any proper language structure around them. Samples for some languages were copy-paste ready, while others took a bit of tweaking to run. In the case of Java, we had to configure maven dependencies for the build, and the generator could not pick some values such as the example body and the auth header, which have to be manually added.</p>
<p id="580c" class="">These samples were built upon the&nbsp;<a href="http://www.mashape.com/">Mashape</a>&nbsp;<code>httpsnippet</code> library, which has been made open source by Kong to be included within your documentation products. This specific sample was generated on the Postman platform. While there was no on-portal console, on the Postman app you can run a call using Postman collections.</p>
<h3 id="fc1d"><strong>Style 2: Dynamic, Non- Runnable HTTP Snippets</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_6UNsCWYCQM1Anwrbz6lLMQ.png" alt=""></p>
<figcaption>Code Sample on Stoplight.io</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">The second style of samples made of dynamic HTTP snippets. While the sample came along with a console, they were incomplete and had to be tweaked to be made runnable on the console and IDEs.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-385 aligncenter" src="/wp-content/uploads/2021/12/1_WMUhQmNcXNDGLrkPLEfkYg.gif" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="ec4f">After a few simple fixes, including the missing headers and entering a body, we got the samples running.</p>
<p id="1b16">The console, while getting the job done, made it a difficult task to add in these fields, offering no help on what goes inside the call. For somebody completely unaware of the API and starting new, making use of the console could prove to be a challenge.</p>
<p id="6bfc" class="">These samples, too, were built on the Mashape’s HTTP Snippet library and resembled barebone curl command lacking language structure.</p>
<p id="85db" class="">Samples in this style are available in Shell, Javascript, Node, C, Java, PHP, Objective-C, Swift, Python, Ruby, C#, GO and OCaml, covering pretty much all major platforms. We found this style on&nbsp;Stoplight.io.</p>
<h3 id="5646"><strong>Style 3: Dynamic, Runnable HTTP Snippets</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_4e7PmSXiQ1aKqaXKMbLluw.png" alt=""></p>
<figcaption>Code Sample on Readme.io</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="319f">The third style of samples made of dynamic snippets that were runnable out of the box. We had to add nothing to the samples to make them work, they came with all the required constructs.</p>
<p id="bed3">The samples come with an intuitive playground which lets you know what kind of field goes where with what data types. This makes it very easy to construct a sample.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1_FcRjxPahKOa71Z_fbu5vSw.gif" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="9218">Although the samples did a good job explaining what goes in and out of an API call, they were still not idiomatic and required work to be done on them. For instance, there is no body-serialization going on, all these different fields that have to go as arguments, go as one single string and there is no mechanism to put those values together in the form of one single string. These samples were found on Readme.io.</p>
<p id="7964" class="">What we also found missing in all three of these styles was lack of getting started guides, for instance, the HTTP client requires to be included as a dependency and then included as imports within the sample, something which has been left to the discretion of the user to figure out. For novice developers, setting up development environments may also prove to be a challenge, something which the samples or the documentation does not help with at all.</p>
<h3 id="384d"><strong>Style 4: Dynamic, Runnable HTTP snippets, with Proper Guides</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_Nys41hEwySBdPhLYQxYJGw-1.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p>The fourth style of samples, while also dynamic and runnable, came with an extra advantage. We found configuration instructions for them, which made it easier to work with them.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_0cK-QcLXleJ_VoBfOeTkXg.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">The sample can be tried and tested on the in-product interactive console. Although the console was not as intuitive as the one found in Style 3, particularly making it tough to add arguments, you have to make sure to not mess up a single space of bracket when making up the JSON string, or the request won’t go.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_oelI4U_0KTc12oayvGuZHQ.gif" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="d3c5">Style 5: Dynamic, Runnable &amp; Language Idiomatic snippets</h3>
<p id="86cf">These samples are different than the ones we saw above, you see no specifics of making an API call here, no URLs passed or methods declared or headers going in. Instead, you see some object-oriented code here, using proper crud mechanisms.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_DspO9rFjpbnhtLZjxYFZ0Q.png" alt=""></p>
<figcaption>Code Sample generated on APIMatic.io</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="8cb9" class="">This is because these samples were generated alongside an SDK, an SDK abstracts out all the details about making an API call and generates additional language structure around these samples, so developers have to write as little communication code as possible. This includes body serialization and response deserializations, which makes it very easy to work with data points.</p>
<p id="266d" class="">The samples can be tried and tested out and tweaked using an interactive explorer, which comes with intuitive, form-based ways to input. The console validates every field, so no incorrect data goes in and helps you construct samples without touching code at all. With the console you can construct API calls with your sample arguments and authentication keys, and copy-paste the resulting samples in your production-ready applications.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_wcQclzK732E-djl-Ws-SlQ.gif" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="279e">And all of that comes with proper documentation, the platform gives API providers the facility to document every parameter in each of the endpoints and data models. Providers can also auto-generate &#8220;getting started guides&#8221; for different IDEs.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_bvvGJZTDaI0E2-k57HCWHg.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="has-text-align-center" style="text-align: left;">Once set, the developers navigate to their desired use case, copy-paste the code, and start working on the business logic — letting the SDK and the sample take care of logistics.</p>
<h2 id="21f7">Part III: Making Code Samples Work in Production</h2>
<p id="77cf" class="">Looking at the different styles of samples, the question that now arises is how practical are these samples to use? Do they completely replace the need to code, or are they just a push towards the right direction? Do they fully demonstrate the use case for the endpoint? Or do they just explain the logistics of making an API call?</p>
<h3 id="d87e">Language Coded HTTP Snippets or More?</h3>
<p id="6704">If you closely look at many of the auto-generated samples, especially the styles 1 to 4, what they essentially do is eliminate the redundant work of configuring environments, and help consumers figure out what kind of syntax to use. However, when making real-world use of API, you need a lot more. Do these samples, which essentially lack language structure and look like language translated HTTP requests, cut it? The answer is<strong>&nbsp;NO&nbsp;</strong>and for the following reasons:</p>
<ul class="">
<li><strong>No Data Types:</strong>&nbsp;The samples takes input and output in the form of a string, leaving it to the consuming developers to write an efficient i/o mechanism to complete these requests. Often the fields inside the body are not documented.</li>
<li><strong>No Data Models:</strong>&nbsp;Modelling the JSON/XML as classes make it easier to deal with the data, both input, and output. These “models” add a whole different layer on top of the API, with your application having to interact with the model, instead of queried response in JSON or XML.</li>
<li><strong>No Validation and Error Handling:</strong>&nbsp;Since there is no proper I/O mechanism, and both inputs are taken and output returns in form of JSON strings, it’s impossible to validate the sent data and handle error cases to determine what went wrong with the request.</li>
</ul>
<p id="d900">To further demonstrate our point, we will write a&nbsp;<strong>Sample App&nbsp;</strong>to make a new&nbsp;<strong>pet&nbsp;</strong>entry to a store. The app will utilize Code Samples generated by&nbsp;<strong>Postman&nbsp;</strong>for the endpoint<strong>&nbsp;Add Pet.</strong></p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_utlmN5MUbvMqVh3hRBnOTw-1.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="e759" class="">Copy-pasting the code straight away did not work. To configure the HTTP client, we had to include the maven dependency to the build. Following which we found the authentication header missing. We passed in the credentials:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"><strong><code>.addHeader(&quot;api_key&quot;, &quot;special-key&quot;)</code></strong></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="b89b" class="">And then had to build a JSON String to pass in the input, since the argument body is passed as a String. Constructing an argument body of the two required fields, this is how the sample looked like:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"><code>package TestApp.Testapp123;
import java.io.*;
import okhttp3.*;

 class main {
  public static void main(String []args) throws IOException{
     
	 OkHttpClient client = new OkHttpClient().newBuilder()
	 .build();
	  MediaType mediaType = MediaType.parse(&quot;application/json&quot;);
	  RequestBody body = RequestBody.create(mediaType, &quot;{\&quot;name\&quot;:\&quot;doggie\&quot;,\&quot;photoUrls\&quot;:[\&quot;photoUrls1\&quot;]}&quot;);
	  Request request = new Request.Builder()
	 .url(&quot;https://petstore.swagger.io/v2/pet&quot;)
	 .method(&quot;POST&quot;, body)
	 .addHeader(&quot;Accept&quot;, &quot;application/json, application/xml&quot;)
	 .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)
	 .addHeader(&quot;api_key&quot;, &quot;special-key&quot;)
	 .build();	  
	  Response response = client.newCall(request).execute();
	  System.out.println(response.body().string()); 	
	    }
	  }</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">We ran the code after this tweaking, and it worked like a charm. So how do this sample further translates to real-world usage? If we were to take inputs for the Pet entry from a user, how do we send that as arguments? And before that how do we ensure the data taken from the user is the of the correct type? To tackle that we wrote a model class for the Pet Object, with all the underlying attributes including getters and setters.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"><code>package TestApp.SimpleConsoleAppFix;

import java.util.List;

import io.swagger.petstore.models.Category;
import io.swagger.petstore.models.StatusEnum;
import io.swagger.petstore.models.Tag;

public class PetModel {
	
	    public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public Category getCategory() {
		return category;
	}
	public void setCategory(Category category) {
		this.category = category;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public List&lt;String&gt; getPhotoUrls() {
		return photoUrls;
	}
	public void setPhotoUrls(List&lt;String&gt; photoUrls) {
		this.photoUrls = photoUrls;
	}
	public List&lt;Tag&gt; getTags() {
		return tags;
	}
	public void setTags(List&lt;Tag&gt; tags) {
		this.tags = tags;
	}
	public StatusEnum getStatus() {
		return status;
	}
	public void setStatus(StatusEnum status) {
		this.status = status;
	}
	    Long id;
	    Category category;
	    String name;
	    List&lt;String&gt; photoUrls;
	    List&lt;Tag&gt; tags;
	    StatusEnum status;

}</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="e551" class="">Following which we wrote the code to take in input values for these attributes. Now that we ensured we took in these values, with their correct data types, how do we pass these in the request, since the request passes the arguments in the form of a string. Manually doing this was, of course, unfeasible and out of the question, so we had to write in an object to string mapper to do the job for us. This took in these various attribute fields and put them together in the form of a JSON string.</p>
<p id="b586" class="">It was at this point that we were able to achieve a business use case out of the sample. We could pass in the input parameters, with their correct types, concatenated as a JSON string and passed along with the argument. The model allowed us to keep local records of the sent values as well.https://blog.devapi.dream.press/media/a6a1ace16d322eaaf541f83acf4905f9</p>
<p id="4294" class="">Working with multiple endpoints and multiple models would have taken us even more time, depending on the use case and business logic. For instance, for the GET endpoints, we would have to write a string to object mapper to parse values from the response string back to our model. While the sample does a great job pushing developers in the right direction, it is clear that it is not a plug and play situation. Developers have to put in a lot of code to get the calls running, and have to figure out on their own what goes before or comes after the API call.</p>
<p><em>Now imagine if there were samples that could take care of all these logistics, you had to write no communication code at all, and could just plug and play a sample into action. The good news is, you no longer have to imagine. The language idiomatic samples generated alongside an SDK already do that for you.</em></p>
<h2 id="21e8">Language Idiomatic Code Samples — The Way To Go</h2>
<p id="b15b">SDKs have often been labeled as the cornerstone of the API developer experience. What SDKs essentially do is that they abstract out all underlying details of making an API call, making your API look like a library. They provide developers a complete framework to model their applications, including all the necessary dependencies, referenced libraries, system libraries, i/o mechanisms, and class models.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_ncYb-AnKZ5JZxOytMwp1PA.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="4ce3" class="">Furthermore SDKs automatically format API responses to match the data types used in the programming language. They add an interface on top of the API, so your app interacts with the modeled data from SDK, instead of raw API arguments and responses. By providing SDKs, you can help developers focus on the business logic while taking care of API communication code.</p>
<p id="933e">Code samples generated with SDKs have a lot more work done on them. Since the SDK abstracts out request construction, none of the construction bit makes part of the sample, making the sample look very lean. Such samples can easily fit in with your applications in a very scalable manner, you only have to add minimal communication code, since there exist mechanisms to access, manipulate and work around with all the data fields, that go in and come out of an API call.</p>
<h2 class="has-text-align-center">. . .</h2>
<p id="308d" class="">Concluding this all, we strongly recommend that developers make use of code samples to consume APIs. No matter what style, design, or approach. Code samples will help you get started easily and save you tons of time. While for most people, the simple HTTP snippets may do the job, it is samples with more language structure that help with real-world use and can fit in straight with your applications.</p>
<p id="8467" class="">Again we emphasize the fact that the developer experience is a key driver for an API adoption. APIs are meant to execute integrations, and the easier to integrate, the better the API. Luckily for you, we at APIMatic hold all sorts of expertise to help improve the experience you deliver to developers. Reach out to us today at&nbsp;<a href="https://apimatic.io/contact">https://apimatic.io/contact</a>&nbsp;and let’s discuss what can be done to enhance your offerings today.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/2020/06/the-anatomy-of-api-code-samples/">The Anatomy of API Code Samples</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Letting developers try endpoints right from API Documentation &#8211; UX Case Study</title>
		<link>/blog/2020/06/letting-developers-try-endpoints-right-from-api-documentation-ux-case-study/</link>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Sun, 07 Jun 2020 11:02:52 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Portal]]></category>
		<category><![CDATA[Blog]]></category>
		<category><![CDATA[Case Study]]></category>
		<category><![CDATA[Developer Tools]]></category>
		<category><![CDATA[Portfolio]]></category>
		<category><![CDATA[Product Design]]></category>
		<category><![CDATA[Ui Ux Design]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=389</guid>

					<description><![CDATA[<p>Problem API documentation tells developers how to use a certain API. An API can have multiple endpoints. Developers read the API documentation to get an idea what does each endpoint do. To find out how these endpoints actually work they have to call those endpoints in their respective apps. Ultimately they find themselves jumping between [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/2020/06/letting-developers-try-endpoints-right-from-api-documentation-ux-case-study/">Letting developers try endpoints right from API Documentation &#8211; UX Case Study</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="389" class="elementor elementor-389">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-1fcfba08 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="1fcfba08" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-32016d03" data-id="32016d03" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-399af17f elementor-widget elementor-widget-text-editor" data-id="399af17f" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="alignnone wp-image-390" src="/wp-content/uploads/2021/12/1_WShpeSnKhzNP41dKnD8bvQ-1024x576.png" alt="Letting developers try endpoints right from API Documentation - UX Case Study" width="1024" height="576"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="37cc" class=""><strong>Problem</strong></h2>
<p id="b81b" class="">API documentation tells developers how to use a certain API. An API can have multiple endpoints. Developers read the API documentation to get an idea what does each endpoint do. To find out how these endpoints actually work they have to call those endpoints in their respective apps. Ultimately they find themselves jumping between the app and the API documentation. This wastes a lot of their time as well as focus.</p>
<h2 id="9142" class=""><strong>Solution:&nbsp;</strong><strong><em>Interactive API Documentation.</em></strong></h2>
<p class="">Provide developers with an API explorer where they can play around with all the endpoints while they are still reading API documentation. So they’ll have a clear understanding of what a specific endpoint does before diving into code.</p>
<h3 id="f2da"><strong>Background</strong></h3>
<p id="053c" class="">To give a little background,&nbsp;<a href="https://www.apimatic.io/">APIMatic</a>&nbsp;is a platform which helps companies improve their developer experience by providing&nbsp;<a href="https://www.apimatic.io/developer-experience-portal">API documentation</a>&nbsp;packed with a lot of features. So we were about to add another feature which was going to allow companies to help their developers consume their APIs.</p>
<blockquote class="wp-block-quote">
<p>Help developers love your API by providing them everything required to consume it.</p>
</blockquote>
<h3 id="d19e"><strong>Process</strong></h3>
<p id="60f2" class="">Before I could get my hand dirty with wireframes I started asking developers questions like:</p>
<p id="d1aa" class="">1- How would you feel if you could interact with API Documentation?</p>
<p id="6ea3">2- How would you feel if you could try out endpoints while reading the API documentation?</p>
<p id="0051">3- Have you ever come across an interactive API documentation?</p>
<p id="d2cb" class="">4- What comes in your mind when you hear “interactive API Documentation”?</p>
<blockquote class="wp-block-quote">
<p>One thing got pretty clear at this point. Developers don’t like moving back and forth between docs and their IDE.</p>
</blockquote>
<p id="57a3" class="">Once I got the validation from the developer community I started studying other API Documentation tools. They all focused on all text and no interaction.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column" style="flex-basis: 100%;"><!-- wp:media-text -->
<div class="wp-block-media-text alignwide is-stacked-on-mobile">
<figure class="wp-block-media-text__media">
<p class="mod-reset"><img class="wp-image-391 size-full aligncenter" src="/wp-content/uploads/2021/12/1_r7rfi4PyXTyxK0cECHIsYw-1024x850.png" alt=""></p>
</figure>
<div class="wp-block-media-text__content"><!-- wp:paragraph -->
<p id="f1a8" class="">This is how content of an endpoint appears in almost all of the API Docs.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="16d1" class="">Here is an example of simple calculation endpoint from our sample “Calculator API”.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="0031">In this example “X” &amp; “Y” are the digits and “Operation” is basically the operator that can be used/applied between both digits e.g Add, Subtract etc.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="f3fd" class="">Developers can read what every endpoint does and all but to try it they’ll have to call it in their respective apps.</p>
<!-- /wp:paragraph --></div>
</div>
<!-- /wp:media-text --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">Next thing that I had in my mind was seamless transition. Like whatever solution I propose must not break the current flow and experience of users. To ensure that I added another tab named “Console” where same parameters were placed but with respective input fields.</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-392" src="/wp-content/uploads/2021/12/1_fuhgdS8TLmxSyh8TO16cOw.jpg" alt=""></p>
<figcaption>Wireframe of how I imagined the API Explorer to fit in.</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-393" src="/wp-content/uploads/2021/12/1_uEoy3zCjTBDPFtfwmtXUqw.png" alt=""></p>
<figcaption>Console tab next to Parameters</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="8aac">I was half way through at this point. I am saying this because filling in fields won’t take us anywhere unless we’ve a result.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-394" src="/wp-content/uploads/2021/12/1_X58c_mCWFYv6H05qQR1ozg.png" alt=""></p>
<figcaption>Views of Parameter and Console Tabs</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p>APIMatic provides a 3 tier documentation. Navigation, docs and code samples. Third tier i-e code is directly tied to the endpoint. To make the documentation interactive we decided to reflect these fields to the code directly.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-395 aligncenter" src="/wp-content/uploads/2021/12/1_qe9FT3u3cBYt7uMVvfWP8w.gif" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:quote -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<blockquote class="wp-block-quote">
<p>I cannot forget excitement of developers when we performed usability testing on this feature.</p>
</blockquote>
<p id="db85">Moving on to testing the endpoint bit. We have the fields to add data, code samples have been tuned accordingly, now we need a trigger to basically get the end result.</p>
<p id="3b95" class="">Placing “TRY IT OUT” button was one last bit of the puzzle. Whether to place it in the mid tier or with the code? I went back to basics and recalled that fields were just there to feed the code while code is what developers would want to test so “TRY IT OUT” button belongs to code tier.</p>
</div>
</div>
</div>
</div>
<!-- /wp:quote -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-396 aligncenter" src="/wp-content/uploads/2021/12/1_7zmkRPMHOSMrLCMCRxw0Iw.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">So this is how we managed to make our docs interactive with reactive code samples. View it live in action&nbsp;<a href="https://www.apimatic.io/apidocs/apimatic/v/1_0#/objective-c/api-endpoints/code-generation-imported-apis/generate-sdk">here</a>. View its visuals&nbsp;<a href="https://dribbble.com/hasham">here</a>.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/2020/06/letting-developers-try-endpoints-right-from-api-documentation-ux-case-study/">Letting developers try endpoints right from API Documentation &#8211; UX Case Study</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
