
<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Api Blueprint Archives - APIMatic</title>
	<atom:link href="/blog/tag/api-blueprint/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>APIMatic is an API documentation tool that provides a complete set of DX components such as autogenerated SDKs, API portal, API docs, live code samples, and more.</description>
	<lastBuildDate>Mon, 11 Apr 2022 05:37:11 +0000</lastBuildDate>
	<language>en</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.9.3</generator>

<image>
	<url>/wp-content/uploads/2021/10/cropped-cropped-apimaticio-favicon-1-32x32.png</url>
	<title>Api Blueprint Archives - APIMatic</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Common Mistakes Developers Make In Their API Blueprint Files</title>
		<link>/blog/common-mistakes-developers-make-in-their-api-blueprint-files/</link>
		
		<dc:creator><![CDATA[Faria Rehman]]></dc:creator>
		<pubDate>Wed, 12 Sep 2018 10:53:46 +0000</pubDate>
				<category><![CDATA[API Blueprint]]></category>
		<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Api Blueprint]]></category>
		<category><![CDATA[Api documentation]]></category>
		<category><![CDATA[API Specification]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=570</guid>

					<description><![CDATA[<p>FORMAT: 1A HOST: &#60;a href=&#34;http://hotname.com/&#34;&#62;http://hostname.com&#60;/a&#62; Plenty of developers choose not to make this metadata part of their API description. While not explicitly deemed compulsory by the format owners in the specification, the&#160;FORMAT&#160;part of it is pretty much required. This is because with so many API description formats and various types of Markdown files out there, [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/common-mistakes-developers-make-in-their-api-blueprint-files/">Common Mistakes Developers Make In Their API Blueprint Files</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="570" class="elementor elementor-570">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-58a4d220 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="58a4d220" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-32e9f161" data-id="32e9f161" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-2e1f1ad1 elementor-widget elementor-widget-text-editor" data-id="2e1f1ad1" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
			<style>/*! elementor - v3.6.4 - 13-04-2022 */
.elementor-widget-text-editor.elementor-drop-cap-view-stacked .elementor-drop-cap{background-color:#818a91;color:#fff}.elementor-widget-text-editor.elementor-drop-cap-view-framed .elementor-drop-cap{color:#818a91;border:3px solid;background-color:transparent}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap{margin-top:8px}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap-letter{width:1em;height:1em}.elementor-widget-text-editor .elementor-drop-cap{float:left;text-align:center;line-height:1;font-size:50px}.elementor-widget-text-editor .elementor-drop-cap-letter{display:inline-block}</style>				<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter wp-image-571 size-large" src="/wp-content/uploads/2021/12/1_l1BQ8ERKVn5Yq9k_IHVMPQ-1024x567.png" alt="Common Mistakes Developers Make In Their API Blueprint Files" width="1024" height="567"></p>
</figure>
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="bc4f" class="">If you ever wanted to write a concise and human-friendly API description file, you must have come across <a href="https://apiblueprint.org/documentation/specification.html">API Blueprint</a>. Using Markdown, the simple syntax of this high-level API description format makes it an easier choice for most of the developers out there. Rest assured that though simple, the format is no less powerful than the other popular ones out there like <a href="https://swagger.io/specification/">OpenAPI</a>, <a href="https://raml.org/">RAML</a>, etc. But while their files are mostly generated by tools or from code, API Blueprint, which is promoted as a “design-first” approach to APIs, is for the most part written by hand and is, therefore, more prone to human error.</p>
<p id="bc4f" class="">In this blog, I will analyze each of the mistakes commonly observed in&nbsp;&nbsp;API Blueprint files and highlight their frequency through failure stats collected on <a href="https://www.apimatic.io/transformer">API Transformer</a> over the past year (Aug 2017 — Aug 2018). You may find this blog similar to the ones I wrote previously on common mistakes found <a href="https://apimatic.io/blog/2018/03//common-mistakes-developers-make-in-their-openapi-3-files">in OpenAPI</a>and <a href="https://apimatic.io/blog/2018/04//common-mistakes-developers-make-in-their-raml-files">in RAML</a>.</p>
<blockquote class="">
<p id="c7b3" class="">A shout-out to Kyle and Emmanuel from&nbsp;<a href="https://apiary.io/">Apiary</a>&nbsp;for taking out time to review my blog and providing valuable insights into the future of&nbsp; API Blueprint.</p>
</blockquote>
<h2 id="f205" class="">Absence of Metadata</h2>
<p id="4a13" class="">An&nbsp;&nbsp;API Blueprint file uses Markdown which is a very commonly used documentation format. The <a href="https://apiblueprint.org/documentation/specification.html#def-metadata-section">Metadata section</a> of an&nbsp;&nbsp;API Blueprint file is an important part of it as it differentiates the file from any ordinary Markdown file. This section comprises of the<code>FORMAT</code>&nbsp;and an optional<code>HOST</code>&nbsp;(if the service URL is known) as shown below:</p>
</div>
</div>
</div>
</div>
<!-- /wp:image -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre><code class="language-markdown">FORMAT: 1A
HOST: &lt;a href=&quot;http://hotname.com/&quot;&gt;http://hostname.com&lt;/a&gt;</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="2a5d" class="">Plenty of developers choose not to make this metadata part of their API description. While not explicitly deemed compulsory by the format owners in the specification, the&nbsp;<code>FORMAT</code>&nbsp;part of it is pretty much required. This is because with so many API description formats and various types of Markdown files out there, the absence of&nbsp;<code>FORMAT</code> makes it hard to recognize a file as an&nbsp;&nbsp;API Blueprint&nbsp;&nbsp;file. Approx. 24% of the total&nbsp;&nbsp;API Blueprint failures on&nbsp; API Transformer in the past year are attributed to this very issue. Fortunately, Apiary has been considering adding a version identifier to&nbsp;&nbsp;API Blueprint in the future for the elimination of any such identification issues.</p>
<h2 id="c10a" class="">Incorrect Usage of Type System</h2>
<p id="fdd7" class="">Various components of an&nbsp;&nbsp;API Blueprint file make use of a type system e.g. the payload (request/response) attributes, members of a named type, and the URI parameters.&nbsp;&nbsp;API Blueprint&nbsp;&nbsp;generally consists of two kinds of types:</p>
<ol class="">
<li><a href="https://apiblueprint.org/documentation/mson/specification.html#21-base-types">Base types</a> including primitive and structure types.</li>
<li>User-defined types called <a href="https://apiblueprint.org/documentation/mson/specification.html#22-named-types">Named Types</a>&nbsp;(or sometimes referred to simply as Data Structures)</li>
</ol>
<p id="6b95" class=""><a href="https://apiblueprint.org/documentation/mson/specification.html">MSON(Markdown Syntax for Object Notation)</a> lets you define types in great detail in&nbsp;&nbsp;API Blueprint. However, developers do not leverage the power of MSON as much as they should. Let’s have a look into this in more detail below.</p>
<h3 id="2bd5" class="">Using Primitive and Structure types inaccurately</h3>
<p id="d75d" class="">&nbsp;API Blueprint makes available various base types that are listed <a href="https://apiblueprint.org/documentation/mson/specification.html#21-base-types">here</a>. 8% of the API Blueprint&nbsp;failures on API Transformer over the past year occurred because of small mistakes by developers like in trying to:</p>
<ol class="">
<li>Use&nbsp;<code>bool</code>&nbsp;instead of&nbsp;<code>boolean</code></li>
<li>Use&nbsp;<code>numeric</code>&nbsp;instead of&nbsp;<code>number</code></li>
<li>Use&nbsp;<code>list</code>&nbsp;instead of&nbsp;<code>array</code></li>
</ol>
<h3 id="3fe3" class="">Referenced Named types not defined in Data Structures section</h3>
<p id="64ae" class=""><a href="https://apiblueprint.org/documentation/specification.html#def-attributes-section">Attributes</a>&nbsp;and their members (or even those of&nbsp; Named types) can reference other&nbsp; Named types&nbsp;that are required to be defined under the&nbsp;Data Structures section. Several developers reference them without defining them first. Files with such cases constituted 15% of the total API Blueprint&nbsp;files that failed to convert on&nbsp; API Transformer.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre class=""><code class="language-bash">### GET+ Response 200 (application/json) 
+ Attributes (OperationType)</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="f2cb" class="">For example in the above case, it is required that the type used for the response attributes,&nbsp;<code>OperationType</code>, is defined under the&nbsp;<a href="https://apiblueprint.org/documentation/specification.html#def-data-structures">Data Structures</a> section as shown below. If not, you will see an error on the&nbsp;Apiary&nbsp;editor with a message like&nbsp;<code>base type ‘OperationType’ is not defined in the document</code>&nbsp;.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre><code class="language-bash"># Data Structures## OperationType (object)
+ property1 (string, required)</code></pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="38fb" class="">Confusing the syntax for specifying Attributes Type Definition</h3>
<p id="5aff" class="">The&nbsp;&nbsp;Attributes section&nbsp;&nbsp;helps define a data structure using&nbsp;&nbsp;MSON&nbsp;&nbsp;for the payload, action and resource sections. The attributes can inherit from an existing data structure (say&nbsp;<code>TypeName</code>) and the syntax is generally:</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre class=""><code class="language-bash">+ Attributes (TypeName)
      + id (number)</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="39b0">However, a large number of developers sometimes use a syntax like the following:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-markdown">+ Attributes 
   + (TypeName) 
   + id (number)</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="8aa0" class="">This is invalid because in this case the base type is automatically assumed as&nbsp;<code>object</code>&nbsp;and the field<code>+ (TypeName)</code>&nbsp;is considered a&nbsp;<strong>member</strong>&nbsp;of this data structure with type&nbsp;<code>TypeName</code>and a&nbsp;<strong>missing name</strong> (or “no identifier specified” as&nbsp;Apiary editor warns its users). 9% of the total failed&nbsp;&nbsp;API Blueprint&nbsp;&nbsp;conversions on&nbsp; API Transformer&nbsp;were connected to this issue.</p>
<h2 id="5126" class="">Rules Vary for URI Parameters Section</h2>
<p id="f6b1" class="">The&nbsp;&nbsp;URI Parameters section&nbsp;&nbsp;is unique because several rules that apply to this section do not apply to other sections that also make use of the type system. This is because while other sections use MSON, the type system used by this section predates MSON by a few years. The syntax does look similar but it is not equivalent. This can be confusing for most developers which apparently is the cause for the issues I am going to highlight below.&nbsp; Apiary&nbsp;is working to eliminate all such inconsistencies in the future by introducing MSON to both the&nbsp;&nbsp;URI Parameters&nbsp;&nbsp;and&nbsp;&nbsp;Headers&nbsp;&nbsp;section. You can track the progress for it&nbsp;<a href="https://github.com/apiaryio/api-blueprint/issues/286">here</a>.</p>
<h3 id="cb07" class="">URI parameter enum Type Section need explicit Members Type Separator</h3>
<p id="c50b" class="">A lot of users tend to face issues related to enum values not getting loaded properly and this has to do with using the syntax for enum declaration incorrectly. 12% API Blueprint&nbsp;failures on&nbsp;API Transformer&nbsp;were found to be associated with this. Here is why:</p>
<p id="9491" class="">Generally speaking, if you want to enlist the possible member values of an enumeration structure type (say&nbsp;<code>value1</code>&nbsp;and&nbsp;<code>value2)</code>) you may list them in one line as:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre><code class="language-bash">+ memberName: value1, value2 (enum[string])</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="cbcf" class="">Or maybe indent them nicely in a type section:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-bash">+ memberName (enum[string]) 
     + value1 
     + value2</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="24cc" class="">Or maybe add an explicit&nbsp;<a href="https://apiblueprint.org/documentation/mson/specification.html#421-member-type-separator">Members Type separator</a>&nbsp;<code>Members</code>&nbsp;to indicate the section as containing Enum Structure members:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-bash">+ memberName (enum[string])
    + Members
        + value1
        + value2</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="06fe" class="">Although all are valid, the third representation is what is&nbsp;<strong>compulsory</strong> for the&nbsp;URI parameters section&nbsp;and you can confirm this syntax from their official specification documentation as well. So if you choose to not use this representation (and most developers don’t), the values will look in the&nbsp; Apiary&nbsp;editor as:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<figure id="attachment_572" aria-describedby="caption-attachment-572" style="width: 345px" class="wp-caption aligncenter"><img class="wp-image-572" src="/wp-content/uploads/2021/12/1_CoOko1i8iz-0LnvjSgQS6g.png" alt="Parameters view in Apiary editor for invalid representation of enums" width="345" height="140"><figcaption id="caption-attachment-572" class="wp-caption-text">Parameters view in Apiary editor for invalid representation of enums</figcaption></figure>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="7c5d" class="">With the correct representation, you will see the editor recognize the set of values correctly:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<figure id="attachment_573" aria-describedby="caption-attachment-573" style="width: 342px" class="wp-caption aligncenter"><img class="wp-image-573" src="/wp-content/uploads/2021/12/1_t288KKfqA4ZlgZyLxKb8NQ.png" alt="Parameters view In Apiary editor for valid representation of enums" width="342" height="138"><figcaption id="caption-attachment-573" class="wp-caption-text">Parameters view In Apiary editor for valid representation of enums</figcaption></figure>
<figcaption></figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="3132" class="">Open-Ended Type System</h3>
<p id="4e66" class="">For the&nbsp;&nbsp;URI parameters, it is a good practice to use only the primitive types and usage of complex types for&nbsp; URI parameters is, therefore, seen very rarely. But developers feel the need to use different types based on their API design. And most of them do not define these types explicitly (like under the <a href="https://apiblueprint.org/documentation/specification.html#def-data-structures">Data Structures section</a>) which then creates trouble when using various tools.</p>
<p id="4379" class="">The specification for&nbsp;&nbsp;API Blueprint&nbsp;&nbsp;poses no strictness as such for the type specification of these parameters because it simply says:</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre class=""><code class="language-bash">&lt;type&gt; is the optional parameter type as expected by the API (e.g. &quot;number&quot;, &quot;string&quot;, &quot;boolean&quot;). &quot;string&quot; is the default.</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="1d80" class="">So if you choose to use any random type in this section (e.g.&nbsp;<code>set</code>,&nbsp;<code>json</code>, etc. ), the official editor won’t complain. However, this open-endedness, while suitable for documentation purposes, is not suited for tools like APIMatic that depend on these API description files for generation of client libraries and developer experience portals. This is because generation requires specific details of all types and any types other than the primitive ones cannot be comprehended by the tool unless explicitly defined. Hence, the largest portion of&nbsp;&nbsp;API Blueprint failures on API Transformer (31%) pertained to this open-endedness.</p>
<h2 id="af61" class="">Conclusion</h2>
<p id="2f0a" class="">&nbsp;API Blueprint is a widely used format with a vast number of features and tooling available. MSON empowers it further through a type system that uses Markdown. In order to utilize MSON to its true potential, it is important to understand it fully. The learning curve for it is high and the specification feels a little overwhelming which is probably why most people tend to shy away from it. Perhaps providing more examples in the specification will help clear some of the ambiguities that developers face and allow for lesser mistakes.</p>
<p id="544a" class="">Also since Apiary&nbsp;is working on improving&nbsp;API Blueprint in its future releases, we can expect lesser inconsistencies and, therefore, lesser issues in the description files. Meanwhile, you can head over to API Transformer&nbsp;to improve your existing API Blueprint&nbsp;file or to convert to other formats for free.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/common-mistakes-developers-make-in-their-api-blueprint-files/">Common Mistakes Developers Make In Their API Blueprint Files</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>From RAML Example Objects to Test Cases</title>
		<link>/blog/from-raml-example-objects-to-test-cases/</link>
		
		<dc:creator><![CDATA[Faria Rehman]]></dc:creator>
		<pubDate>Wed, 19 Apr 2017 10:53:45 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Api Blueprint]]></category>
		<category><![CDATA[Raml]]></category>
		<category><![CDATA[test cases]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=515</guid>

					<description><![CDATA[<p>Machine-readable API descriptions are key enablers of many modern service-oriented activities. Recently, some of the API description formats, including RAML and API Blueprint, have started supporting detailed request and response example objects. If you use such a format then a good news is that APIMatic’s code-gen engine now utilizes your example objects to automatically generate [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/from-raml-example-objects-to-test-cases/">From RAML Example Objects to Test Cases</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="515" class="elementor elementor-515">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-57fea18d elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="57fea18d" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-1f5ec332" data-id="1f5ec332" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-7f13c1cf elementor-widget elementor-widget-text-editor" data-id="7f13c1cf" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">Machine-readable API descriptions are <a href="https://medium.com/@apimatic/why-your-api-needs-machine-readable-descriptions-4134fff9a419">key enablers</a> of many modern service-oriented activities. Recently, some of the API description formats, including RAML and API Blueprint, have started supporting detailed request and response example objects. If you use such a format then a good news is that APIMatic’s code-gen engine now utilizes your example objects to automatically generate <a href="https://docs.apimatic.io/testing/overview">test cases</a> for your API. That means if you generate an SDK using a RAML file that contains example objects, the SDK will come bundled with test cases for you to test your API, right away.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-516 aligncenter" src="/wp-content/uploads/2021/12/1_fqAUXFupYKrcRqtgqzhKdA.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="6429" class="">RAML Examples to Test Cases</h2>
<p id="88d3" class="">Both RAML 0.8 and RAML 1.0 support example objects for various resource parameters (query parameters, URI parameters, body parameters, and form parameters). You can specify example value for these using the “example” property, whereas, in RAML 1.0, multiple examples can be specified. Similarly, example objects for the possible responses from a resource can also be specified using the “example/examples” property. The request example values and the expected response values can be utilized for testing purposes if you use APIMatic to import these API Description files. Example values for all required parameters must be present for successful generation of the test case for any particular resource.</p>
<p id="b4a9" class="">Let’s take you through a brief journey of how you can specify various example values in RAML 0.8 and RAML 1.0 both. For better understanding, I will be using Calculator API for my illustration below.</p>
<h2 id="779b">Specifying Resource Parameter Values</h2>
<h3 id="88c3" class="">RAML 0.8</h3>
<p id="5d5d">The following code snippet has values to two different parameters. SUM value has been assigned to URI parameter “operation”, whereas 2 and 3 have been assigned to query parameters “x” and “y” respectively.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre class=""><code class="language-yaml">#%RAML 0.8
title: Calculator
version: 1.0
documentation:
- title: Calculator
content: Simple Calculator API
baseUri: https://examples.devapi.dream.press/apps/calculator
baseUriParameters: {}
/{operation}:
uriParameters:
operation:
description: ‘’
example: SUM
required: true
displayName: operation
enum:
- SUM
- SUBTRACT
- MULTIPLY
- DIVIDE
get:
displayName: Calculate
description: Calculates the expression based on the x and y operator
responses:
200:
description: Success
example: 5
queryParameters:
x:
description: ‘’
type: number
example: 2
required: true
displayName: x
y:
description: ‘’
type: number
example: 3
required: true
displayName: y</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="cb6a">Once your parameter values have been specified, we can then automatically generate test cases out of them. Under RAML 0.8, if multiple values are provided, then APIMatic will utilize the first provided values by default.</p>
<h3 id="b0bf">RAML 1.0</h3>
<p id="8584" class="">Here, you have the ability to define multiple examples instead of a single example using the “examples” property. Each example object has a unique identifier that identifies the example. The “example” property is definitely valid in RAML 1.0 too but you can either use the “example” property or the “examples” property but not both. Observe the following snippet and see how “examples” property has been used to generate test case.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre class=""><code class="language-yaml">get:
description: Returns an organization entity.
responses:
201:
body:
application/json:
type: Org
examples:
acme:
name: Acme
softwareCorp:
value: # validate against the available facets for the map value of an example
name: Software Corp
address: 35 Central Street
value: Gold # validate against an instance of the `value` property</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="70e4" class="">You can find more details on how to specify examples in RAML 1.0 at&nbsp;<a href="https://github.com/raml-org/raml-spec/blob/master/versions/raml-10/raml-10.md/#defining-examples-in-raml">https://github.com/raml-org/raml-spec/blob/master/versions/raml-10/raml-10.md/#defining-examples-in-raml</a></p>
<h2 id="5c43">Specifying Expected Response Headers</h2>
<p id="a232" class="">You can also specify response headers and their example values which can be utilized as the expected values for response headers in the generated test cases. Here an example value for header “<code>Location</code>” is “<code>/invoices/45612</code>”</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre class=""><code class="language-yaml">post:
body:
type: Invoice
responses:
201:
headers:
Location:
example: /invoices/45612</code></pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="920b">Note to Self!</h2>
<p id="06cb" class="">You don’t need to go through the hassle of specifying test cases for your API yourself. We will simply bring your example objects into use in order to create them. For more information, visit our <a href="https://docs.apimatic.io/testing/overview">website</a> where complete documentation on the test case is already present for you to successfully run your test cases!</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/from-raml-example-objects-to-test-cases/">From RAML Example Objects to Test Cases</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>API Blueprint Extension for Code Generation Settings</title>
		<link>/blog/api-blueprint-extension-for-code-generation-settings/</link>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Sat, 07 Nov 2015 11:02:52 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Api Blueprint]]></category>
		<category><![CDATA[Apimatic Features]]></category>
		<category><![CDATA[Code Generation]]></category>
		<category><![CDATA[Developer Experience]]></category>
		<category><![CDATA[Specification Extensions]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=459</guid>

					<description><![CDATA[<p>We have just launched Code Generation Extensions for API Blueprint. These extensions allow customizing the behaviour of APIMatic’s Code Generation Engine. By specifying additional metadata in your API Blueprint description, you can now control the naming conventions, configuration stores and have your custom code branding. We refer to these as Code Generation Settings. Previously, you [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/api-blueprint-extension-for-code-generation-settings/">API Blueprint Extension for Code Generation Settings</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="459" class="elementor elementor-459">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-6f325ab4 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="6f325ab4" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-27fe5f49" data-id="27fe5f49" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-24f5460b elementor-widget elementor-widget-text-editor" data-id="24f5460b" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="alignnone wp-image-461" src="/wp-content/uploads/2021/12/1_dg0IM1sORJDG0wZtGFN9Bw-1.png" alt="API Blueprint Extension for Code Generation Settings" width="720" height="167" /></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="25a7" class="">We have just launched Code Generation Extensions for API Blueprint. These extensions allow customizing the behaviour of APIMatic’s Code Generation Engine. By specifying additional metadata in your API Blueprint description, you can now control the naming conventions, configuration stores and have your custom code branding. We refer to these as Code Generation Settings. Previously, you had to import your API Blueprint into APIMATIC format and use our Editor UI to specify these settings. Some while ago we made a similar extension available for Swagger 2.0 (<a href="https://www.apimatic.io/blog/post/swagger-2-0-extension-for-code-generation-settings">read more here</a>). But if your API description uses API Blueprint, you can leverage this as well.</p>
<h2 id="dfd4">API Blueprint CodeGen Settings</h2>
<p id="6551" class="">We extended the <a href="https://docs.apimatic.io/specification-extensions/blueprint-extensions">API Blueprint metadata</a> attribute to specify additional properties. See the following example below:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"><code>FORMAT: 1A

HOST: &lt;a href=&quot;http://api.datumbox.com/&quot;&gt;http://api.datumbox.com/&lt;/a&gt;GENERATEASYNCCODE: TRUE
USEMETHODPREFIX: TRUE
USEMODELPOSTFIX: TRUE
USECONTROLLERPOSTFIX: TRUE
USEENUMPOSTFIX: TRUE
USECONSTRUCTORSFORCONFIG: TRUE
IOSUSEAPPINFOPLIST: TRUE
IOSGENERATECOREDATA: FALSE
ANDROIDUSEAPPMANIFEST: TRUE
COLLECTPARAMETERS: FALSE
CSHARPDEFAULTNAMESPACE: ACME.CORP.API
JAVADEFAULTNAMESPACE: com.acme.corp.api
APPENDCONTENTHEADERS: TRUE
BRANDLABEL: ACME CORP.
USERAGENT: APIMATIC 2.0
ENABLEADDITIONALMODELPROPERTIES: FALSE</code></pre>
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="e31c" class="">The purpose of these parameters is explained below:</p>
<h2 id="f7da">GENERATEASYNCCODE</h2>
<p id="e8ac">When true, the CodeGen engine generates asynchronous C# and Java code.</p>
<h2 id="fc1c">USEMETHODPREFIX</h2>
<p id="8f4b">When true, HTTP verbs are used as prefix for generated controller methods.</p>
<h2 id="47c6">USEMODELPOSTFIX</h2>
<p id="972b" class="">When true, a postfix “Model” is appended to all classes generated from schemas.</p>
<h2 id="2514">USECONTROLLERPOSTFIX</h2>
<p id="3327">When true, a postfix “Controller” is appended to all controllers generated from path groups.</p>
<h2 id="be10">USEENUMPOSTFIX</h2>
<p id="2aee">When true, a postfix “Enum” is appended to all enumerations lifted from “allowedValues”.</p>
<h2 id="1ed3" class="">USECONSTRUCTORSFORCONFIG</h2>
<p id="8bd5">When true, configuration values e.g., authentication credentials, are accepted as controller constructor parameters. Otherwise, these values generate variables in a Configuration class.</p>
<h2 id="38d5">IOSUSEAPPINFOPLIST</h2>
<p id="b120" class="">When true, configuration values e.g., authentication credentials, are expected in app-info.plist file for the iOS SDK. When set, this setting ignores useConstructorsForConfig flag.</p>
<h2 id="712b">IOSGENERATECOREDATA</h2>
<p id="2349">When true, iOS CoreData schema and classes are generated.</p>
<h2 id="f3a7">ANDROIDUSEAPPMANIFEST</h2>
<p id="34b4" class="">When true, configuration values e.g., authentication credentials, are expected in AndroidManifest.xml file for the Android SDK. When set, this setting ignores <code>useConstructorsForConfig</code> flag.</p>
<h2 id="0a87">COLLECTPARAMETERS</h2>
<p id="7a93" class="">When true, operation parameters are expected to passed as a collection. For example in PHP, the generated method expects a Map containing parameters as Key-Value pairs. This is currently implemented for PHP, Python, GO, and Objective-C. When set, this is applied globally on all endpoints/operations. If you wish to use this option on specific endpoints, use the <code>x-operation-settings:collectParameters</code> instead.</p>
<h2 id="5b17">CSHARPDEFAULTNAMESPACE</h2>
<p id="e17b">A valid C# namespace value to be used as the default namespace. Leave empty or null to automatically generate.</p>
<h2 id="9249">JAVADEFAULTNAMESPACE</h2>
<p id="1c84">A valid Java package name to be used as the base package name. Leave empty or null to automatically generate. This value is applied for both Java and Android code generation templates.</p>
<h2 id="42b1">APPENDCONTENTHEADERS</h2>
<p id="48e5">When true, code generation engine automatically detects request and response schema and appends content headers e.g., “<code>accept: application/json</code>” and “<code>content-type: application/json</code>” headers for JSON serialization mode.</p>
<h2 id="dd20">BRANDLABEL</h2>
<p id="498b">A string value to brand the generated files. For example: “Acme Corp.”</p>
<h2 id="9bc8">USERAGENT</h2>
<p id="854b">A string value to use as user-agent in the API calls. This is useful for analytics and tracking purposes. For example: “SDK V1.1”</p>
<h2 id="488d">ENABLEADDITIONALMODELPROPERTIES</h2>
<p id="6f8f" class="">When true, additional or unknown properties in the response JSON are collected into a dictionary.</p>
<p id="f463">Please direct any queries on this aspect to our <a href="https://apimatic.zendesk.com/">support portal</a>.</p>
</div>
</div>
</div>
</div>
<!-- /wp:preformatted -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/api-blueprint-extension-for-code-generation-settings/">API Blueprint Extension for Code Generation Settings</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
