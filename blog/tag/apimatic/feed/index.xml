
<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Apimatic Archives - APIMatic</title>
	<atom:link href="/blog/tag/apimatic/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>APIMatic is an API documentation tool that provides a complete set of DX components such as autogenerated SDKs, API portal, API docs, live code samples, and more.</description>
	<lastBuildDate>Wed, 20 Apr 2022 10:28:00 +0000</lastBuildDate>
	<language>en</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.9.3</generator>

<image>
	<url>/wp-content/uploads/2021/10/cropped-cropped-apimaticio-favicon-1-32x32.png</url>
	<title>Apimatic Archives - APIMatic</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>How to Integrate Java SDKs into Android Applications?</title>
		<link>/blog/how-to-integrate-java-sdks-into-android-applications/</link>
		
		<dc:creator><![CDATA[Muhammad Sufyan]]></dc:creator>
		<pubDate>Fri, 18 Mar 2022 14:28:54 +0000</pubDate>
				<category><![CDATA[APIMATIC]]></category>
		<category><![CDATA[CodeGen]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[Android App]]></category>
		<category><![CDATA[android application]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[auto-generated SDKs]]></category>
		<category><![CDATA[Java SDK]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1803</guid>

					<description><![CDATA[<p>Your mobile/Android application can talk to any API with the low-code approach through client SDKs. Client SDKs are independent internal libraries for your application that focus on the end-to-end flow for an API. They cut down the manual process of writing a whole client and related components, providing you with the best developer experience, and [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/how-to-integrate-java-sdks-into-android-applications/">How to Integrate Java SDKs into Android Applications?</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class=""><img class="aligncenter wp-image-1816 " src="/wp-content/uploads/2022/04/Integrate-Java-SDKs-into-Android-02-1024x498.png" alt="" width="729" height="355"></p>
<p class=""><span style="font-weight: 400;">Your mobile/Android application can talk to any API with the low-code approach through client SDKs. </span><span style="font-weight: 400;">Client SDKs are independent internal libraries for your application that focus on the end-to-end flow for an API.</span><span style="font-weight: 400;"> They cut down the manual process of writing a whole client and related components, </span><span style="font-weight: 400;">providing you with the best developer experience, and increasing API adoption</span><span style="font-weight: 400;">. You just have to import an auto-generated end-to-end SDK and focus on the core business logic in your application.</span></p>
<p><a href="https://apimatic.io/"><span style="font-weight: 400;">APIMatic</span></a> <span style="font-weight: 400;">is a developer experience platform that provides automatic code generation for API specifications, in multiple popular languages. In this blog, we will be discussing how to integrate Java SDKs into Android applications.</span></p>
<h2 class=""><span style="font-weight: 400;">Why Java Libraries Instead of Android Native Libraries?</span></h2>
<p class=""><span style="font-weight: 400;">An AAR (i.e. Android ARchive) file can be included in the build process of an Android application similar to a JAR (i.e. Java ARchive) file. Both can serve the same purpose but the main difference between a JAR and an AAR is that AARs can include resources such as layouts, drawables, and more.</span></p>
<p class=""><span style="font-weight: 400;">For an API client SDK, you don&#8217;t need Android components and resources, but some classes, making the library lightweight that developers can quickly interact with to call your APIs, making a JAR library a better option than AAR.</span></p>
<p class=""><span style="font-weight: 400;">Another advantage of using Java libraries is that JAR can be used for IDEs like eclipse and Android Studio without any complicated steps. Also, JAR, in contrast to AAR, can be used with any Java application which makes it technology-independent in terms of Java-specific applications like web, desktop, and Android apps.</span></p>
<h2><span style="font-weight: 400;">Inside the Java SDK</span></h2>
<p class=""><span style="font-weight: 400;">APIMatic SDKs adhere to the best </span><a href="https://docs.apimatic.io/generate-sdks/sdk-coding-standards/"><span style="font-weight: 400;">coding practices and standards</span></a><span style="font-weight: 400;">&nbsp;and support the latest dependencies and versions for full coverage. The Java SDK uses Maven as its project management tool which allows it to adjust itself in the Maven ecosystem.&nbsp;</span></p>
<p class=""><span style="font-weight: 400;">In an Android application, the Gradle build system makes it easier to include external binaries and other library modules to your build as dependencies. </span><span style="font-weight: 400;">These dependencies can be located on your machine or in a remote repository, and any transitive dependencies declared are automatically included as well.</span><span style="font-weight: 400;"><br />
</span></p>
<p class=""><span style="font-weight: 400;">Having Gradle support of adding Maven dependencies directly makes it easier for developers to include Maven projects like an APIMatic SDK as a dependency. This enables you to consume Maven libraries for any application built on top of Java or Kotlin languages. APIMatic Java SDKs have this ability and allow you to accomplish what you need with some clicks.</span></p>
<p class=""><span style="font-weight: 400;">In this blog, we will use our public </span><a href="https://github.com/apimatic/calculator-sdk"><span style="font-weight: 400;">Calculator SDK</span></a><span style="font-weight: 400;"> as an example to demonstrate how to integrate Java SDKs into Android applications. The Calculator SDK contains simple operations like addition, multiplication, subtraction, division, and a README file that walks you through the setup installation and highlights the documentation of the modules involved.</span><span style="font-weight: 400;"><br />
</span><span style="font-weight: 400;"><br />
</span><span style="font-weight: 400;">The published Java SDK has the following Maven identifiers:</span></p>
<pre class=""><code class="language-xml">Group-id: io.github.apimatic
Artifact-id: sample-calculator-sdk
Version: 1.0.0
</code></pre>
<h2 class=""><span style="font-weight: 400;">How to Integrate Java SDKs into Android Applications?</span></h2>
<p class=""><span style="font-weight: 400;">There are two ways to integrate Java SDKs into Android applications:</span></p>
<ul class="">
<li style="font-weight: 400;"><span style="font-weight: 400;">Declare the dependency directly using groupId, artifact, and version</span></li>
<li style="font-weight: 400;"><span style="font-weight: 400;">Utilize the GUI tool provided by Android Studio</span></li>
</ul>
<p>&nbsp;</p>
<p class=""><span style="font-weight: 400;">The source of the artifact could be one of the following:</span></p>
<ul class="">
<li style="font-weight: 400;"><span style="font-weight: 400;">A Remote Artifact (Gradle will resolve the artifact from Maven central repository)</span></li>
<li style="font-weight: 400;"><span style="font-weight: 400;">A Local Artifact (Gradle will resolve the artifact from the local Maven repository)</span><span style="font-weight: 400;"><br />
</span></li>
</ul>
<h3><span style="font-weight: 400;">Import Remote Dependency</span></h3>
<p><span style="font-weight: 400;">Note: A prerequisite to import the remote dependency is that the Java SDK should already be published on the Maven repository. In our case, the calculator SDK is published on Maven Central under the group id </span><a href="https://search.maven.org/search?q=g:io.github.apimatic"><span style="font-weight: 400;">io.github.apimatic</span></a><span style="font-weight: 400;">.</span></p>
<h3 class=""><span style="font-weight: 400;">Option 1: Add Dependency Using Android Studio</span></h3>
<p class=""><span style="font-weight: 400;">Follow these steps to include the dependency:</span></p>
<ol class="">
<li style="font-weight: 400;"><span style="font-weight: 400;">In the Android project structure, select </span><b>Dependencies </b><span style="font-weight: 400;">from the left navigation section. Select the target module and click on </span><b>Library Dependency </b><span style="font-weight: 400;">as shown: <img class=" wp-image-1806 aligncenter" src="/wp-content/uploads/2022/04/image3.png" alt="" width="657" height="344"></span></li>
<li style="font-weight: 400;"><span style="font-weight: 400;">In the subsequent dialog box, search for the group id </span><b>io.github.apimatic</b><span style="font-weight: 400;">. Configure your dependency if required (labeled 2) and click </span><b>OK</b><span style="font-weight: 400;">.<img class=" wp-image-1804 aligncenter" src="/wp-content/uploads/2022/04/image1.jpg" alt="" width="659" height="470"></span></li>
<li><span style="font-weight: 400;">As the last step, click on </span><b>Apply</b><span style="font-weight: 400;"> and </span><b>OK</b><span style="font-weight: 400;">. Gradle will start syncing.</span></li>
</ol>
<h3 class=""><span style="font-weight: 400;">Option 2: Adding the Dependency Directly&nbsp;</span></h3>
<p class=""><span style="font-weight: 400;">You can also add the dependency directly in the respective module’s </span><b>build.gradle</b><span style="font-weight: 400;"> file. This can be achieved by setting a lookup configuration for Maven Central in Dependency Resolution Management through the root level build file, i.e. build.gradle, shown below:</span></p>
<pre class=""><code class="language-xml">buildscript {
    ...
    repositories {
        ...
        MavenCentral()
        ...
    }
    ...
}
</code></pre>
<p class=""><span style="font-weight: 400;">Add the artifact information like </span><b>groupId</b><span style="font-weight: 400;">, </span><b>artifactId</b><span style="font-weight: 400;">, and </span><b>version </b><span style="font-weight: 400;">in the </span><b>dependencies </b><span style="font-weight: 400;">section of the respective module, for example:</span><span style="font-weight: 400;"><br />
</span></p>
<pre class=""><code class="language-xml">dependencies {
    ...
    implementation &#039;io.github.apimatic:sample-calculator-sdk:1.0.0&#039;
    ...
}</code></pre>
<p><span style="font-weight: 400;">Follow the proper format for Maven Central as prescribed in </span><a href="https://docs.gradle.org/current/userguide/declaring_dependencies.html"><span style="font-weight: 400;">Gradle official documentation</span></a><span style="font-weight: 400;">. Read more on </span><a href="https://docs.gradle.org/current/userguide/single_versions.html"><span style="font-weight: 400;">Gradle Version Ranging</span></a><span style="font-weight: 400;">.&nbsp;&nbsp;</span></p>
<h3 class=""><span style="font-weight: 400;">Import Local Dependency</span></h3>
<p class=""><span style="font-weight: 400;">Gradle can consume dependencies available in the local Maven repository (i.e. in-home directory under </span><b>.m2</b><span style="font-weight: 400;"> directory). The target artifact should already exist in the local Maven repository. In order to achieve this, use the following Maven build command to build the project and have a snapshot in the local repository:</span></p>
<pre class=""><code class="language-bash">mvn clean install
</code></pre>
<p class=""><span style="font-weight: 400;">This will make the artifact locally available. Now, it can be added as a dependency or external JAR.</span></p>
<h3 class=""><span style="font-weight: 400;">Option 1: Add Dependency as External JAR</span></h3>
<ol class="">
<li style="font-weight: 400;"><span style="font-weight: 400;">Locate the JAR file in the system. Copy and paste the SDK JAR file in </span><b>libs </b><span style="font-weight: 400;">directory of your application.<img class="size-full wp-image-1807 aligncenter" src="/wp-content/uploads/2022/04/image4.png" alt="" width="595" height="417"></span></li>
<li><span style="font-weight: 400;">Now right click on the copied JAR file and click </span><b>Add As Library.<img class=" wp-image-1805 aligncenter" src="/wp-content/uploads/2022/04/image2.png" alt="" width="598" height="592"></b></li>
<li><span style="font-weight: 400;">Once added, a popup will appear to confirm the target module, select the module and click </span><b>OK</b><span style="font-weight: 400;">.<img class=" wp-image-1808 aligncenter" src="/wp-content/uploads/2022/04/image5.png" alt="" width="398" height="116"></span></li>
</ol>
<h3 class=""><span style="font-weight: 400;">Option 2: Add Dependency Directly</span></h3>
<p class=""><span style="font-weight: 400;">Allow Gradle to search in the local Maven repository by adding </span><b>mavenLocal()</b><span style="font-weight: 400;"> configuration in the </span><b>settings.gradle</b><span style="font-weight: 400;"> file (i.e. project/root level Gradle settings).</span><span style="font-weight: 400;"><br />
</span></p>
<pre class=""><code class="language-xml">buildscript {
    ...
    repositories {
        ...
        mavenLocal()
        ...
    }
    ...
}</code></pre>
<p class=""><span style="font-weight: 400;">Add the dependency in </span><b>build.gradle</b><span style="font-weight: 400;"> (i.e. module-level Gradle settings) as shown:</span></p>
<pre class=""><code class="language-xml">dependencies {
    ...
    implementation &#039;io.github.apimatic:sample-calculator-sdk:1.0.0&#039;
    ...
}
</code></pre>
<p><span style="font-weight: 400;">The dependency format is in the form of &lt;</span><b>groupId:artifactId:version&gt;</b><span style="font-weight: 400;"> but it can be applied through different formats as prescribed on </span><a href="https://docs.gradle.org/current/userguide/declaring_dependencies.html"><span style="font-weight: 400;">Gradle official documentation</span></a><span style="font-weight: 400;">. Gradle also supports version ranging.</span></p>
<p class=""><span style="font-weight: 400;">Once Gradle is synchronized, the application is ready to consume the added SDK dependency.</span></p>
<h2 class=""><span style="font-weight: 400;">Using the Imported SDK in Java and Kotlin</span></h2>
<p class=""><span style="font-weight: 400;">Once the dependency resolution is done, you can start using the SDK components in your application.&nbsp;</span></p>
<h3 class=""><span style="font-weight: 400;">Java Code Sample</span></h3>
<p class=""><span style="font-weight: 400;">The following code sample in Java shows how easily you can initialize the client and use the Multiply endpoint of the integrated Calculator SDK in the Android application:</span></p>
<pre class=""><code class="language-java">// client initialization in Java

APIMATICCalculatorClient client = new APIMATICCalculatorClient.Builder()
    .httpClientConfig(configBuilder -&gt; configBuilder
            .timeout(0))
    .environment(Environment.PRODUCTION)
    .build();

</code></pre>
<pre class=""><code class="language-java">// Preparing and Calling API Endpoint

GetCalculateInput getCalculateInput = new GetCalculateInput();
getCalculateInput.setOperation(OperationTypeEnum.MULTIPLY);
getCalculateInput.setX(222.14);
getCalculateInput.setY(165.14);

client.getSimpleCalculatorController()
        .getCalculateAsync(getCalculateInput)
            .thenAccept(result -&gt; {
                // TODO success callback handler
            }).exceptionally(exception -&gt; {
                // TODO failure callback handler
                return null;
            });

</code></pre>
<h3><span style="font-weight: 400;">Kotlin Code Sample</span></h3>
<p class=""><span style="font-weight: 400;">The following code sample in Kotlin shows how easy it is to initialize the client and use the Multiply endpoint of the integrated Calculator SDK in your Android application:</span></p>
<pre class=""><code class="language-kotlin">// client initialization in Kotlin

var client: APIMATICCalculatorClient = APIMATICCalculatorClient.Builder()
    .httpClientConfig { configBuilder: HttpClientConfiguration.Builder -&gt;
        configBuilder
            .timeout(0)
    }
    .environment(Environment.PRODUCTION)
    .build()

</code></pre>
<pre class=""><code class="language-kotlin">// Preparing and Calling API Endpoint

val getCalculateInput = GetCalculateInput()
getCalculateInput.operation = OperationTypeEnum.MULTIPLY
getCalculateInput.x = 222.14
getCalculateInput.y = 165.14

client.simpleCalculatorController.getCalculateAsync(getCalculateInput)
   .thenAccept { result -&gt;
       // TODO success callback handler
   }
   .exceptionally {
       // TODO failure callback handler
       null
   }</code></pre>
<h2 class=""><span style="font-weight: 400;">Conclusion</span></h2>
<p class=""><span style="font-weight: 400;">APIMatic Java SDKs are fully compliant with the Android app environment making app development quicker. With APIMatic, you can focus on the business domain and leave the server or third-party communication to APIMatic SDKs. APIMatic excels in providing a complete developer experience with language-specific documentation, interactive API portals, and SDKs with end-to-end test coverage.</span></p>
</div>
</div>
</div>
</div>
<p>The post <a rel="nofollow" href="/blog/how-to-integrate-java-sdks-into-android-applications/">How to Integrate Java SDKs into Android Applications?</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>APIMatic Goes Back to Normal with a Bang</title>
		<link>/blog/apimatic-goes-back-to-normal-with-a-bang/</link>
		
		<dc:creator><![CDATA[Arooj Arshad]]></dc:creator>
		<pubDate>Mon, 14 Mar 2022 10:39:27 +0000</pubDate>
				<category><![CDATA[APIMATIC]]></category>
		<category><![CDATA[API Meetup]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[APIMatic events]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1718</guid>

					<description><![CDATA[<p>About 2 years ago, our lives changed overnight as the Covid-19 pandemic gripped the world. Now, as nearly everyone has received their vaccination shots, life has started to regain some normalcy. Schools have re-opened, meals can be enjoyed together and companies are slowly seeing employees back in the office. At APIMatic, we had moved to [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/apimatic-goes-back-to-normal-with-a-bang/">APIMatic Goes Back to Normal with a Bang</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">
<p class=""><img class="aligncenter wp-image-1722 " src="/wp-content/uploads/2022/04/1_image_7-scaled-e1647870397245-1024x524.jpg" alt="" width="693" height="354"></p>
<p class=""><span style="font-weight: 400;">About 2 years ago, our lives changed overnight as the Covid-19 pandemic gripped the world. Now, as nearly everyone has received their vaccination shots, life has started to regain some normalcy. Schools have re-opened, meals can be enjoyed together and companies are slowly seeing employees back in the office.</span></p>
<p class=""><span style="font-weight: 400;">At APIMatic, we had moved to a complete work-from-home environment since 2020, but that did not stop us from getting to know one another and having fun. Therefore, we decided that 2022 should be the year for a “normal life”, full of colors and lively activities for our team. Hence, we called a heads-up to reevaluate our goals and set boundaries to maintain priorities.&nbsp;</span></p>
<p class=""><span style="font-weight: 400;">This year, for our 6th anniversary, we agreed to bring our whole team together to relish some quality time, watch each other laugh and open up the old memories that were closed in a box since the pandemic. As a result, we celebrated going back to normal with a two-day event during the first week of March.</span></p>
<p><iframe title="6th Anniversary of APIMatic (Pakistan Office)" width="653" height="367" src="https://www.youtube.com/embed/ILB5Fp2SNaA?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></p>
<h2 class=""><b>Team Celebrating APIMatic’s 6th Anniversary</b><span style="font-weight: 400;">&nbsp;</span></h2>
<p class="">The main anniversary event was held within the office premises. To warm up the audience and boost their morale, the celebration started with our founder, Adeel, giving a speech on the visions and future plans of the company.</p>
<p class=""><img class="alignnone wp-image-1759" src="/wp-content/uploads/2022/04/image_8.png" alt="" width="140" height="201"> <img class="alignnone wp-image-1755" src="/wp-content/uploads/2022/04/P0A9769.png" alt="" width="218" height="200"> <img class="alignnone wp-image-1764" src="/wp-content/uploads/2022/04/P0A9789-scaled.jpg" alt="" width="157" height="200"> <img class="alignnone wp-image-1765" src="/wp-content/uploads/2022/04/P0A9806.jpg" alt="" width="135" height="199"> <img class="alignnone wp-image-1767" src="/wp-content/uploads/2022/04/P0A9820.jpg" alt="" width="156" height="198"></p>
<p class=""><span style="font-weight: 400;">Following that, each of the team leads gave their foresight and plans for growth. Since everyone was meeting up after a long time post-pandemic, we wanted all the teams to know one another and give them a fair share of appreciation.&nbsp;</span></p>
<p class=""><img class="wp-image-1720 alignnone" src="/wp-content/uploads/2022/04/image_2.jpg" alt="" width="411" height="274"> &nbsp;<img class="alignnone wp-image-1733" src="/wp-content/uploads/2022/04/P0A9834-scaled.jpg" alt="" width="408" height="272"></p>
<p class=""><span style="font-weight: 400;">Next followed the award ceremony where formal awards along with equity awards and prizes were presented to the outstanding performers throughout the whole year after having thorough nominations.</span></p>
<p class=""><img class="alignnone wp-image-1735" src="/wp-content/uploads/2022/04/P0A9873-scaled.jpg" alt="" width="267" height="178"> <img class="alignnone wp-image-1736" src="/wp-content/uploads/2022/04/P0A9880-scaled.jpg" alt="" width="267" height="178"> <img class="alignnone wp-image-1737" src="/wp-content/uploads/2022/04/P0A9891-scaled.jpg" alt="" width="268" height="179"></p>
<p class=""><img class="alignnone wp-image-1738" src="/wp-content/uploads/2022/04/P0A9906-scaled.jpg" alt="" width="269" height="179"> <img class="alignnone wp-image-1739" src="/wp-content/uploads/2022/04/P0A9909-scaled.jpg" alt="" width="270" height="180">&nbsp;<img class="alignnone wp-image-1740" src="/wp-content/uploads/2022/04/P0A9876-scaled.jpg" alt="" width="263" height="175"></p>
<p class=""><img class="alignnone wp-image-1741" src="/wp-content/uploads/2022/04/P0A9877-scaled.jpg" alt="" width="272" height="181"> <img class="alignnone wp-image-1742" src="/wp-content/uploads/2022/04/P0A9894-scaled.jpg" alt="" width="270" height="180"> <img class="alignnone wp-image-1768" src="/wp-content/uploads/2022/04/P0A9867-scaled.jpg" alt="" width="271" height="180"> <img class="alignnone wp-image-1820" src="/wp-content/uploads/2022/04/P0A9887-scaled.jpg" alt="" width="272" height="182"> &nbsp; <img class="alignnone wp-image-1821" src="/wp-content/uploads/2022/04/P0A9903-scaled.jpg" alt="" width="271" height="181"> &nbsp;<img class="alignnone wp-image-1822" src="/wp-content/uploads/2022/04/P0A9912-scaled.jpg" alt="" width="272" height="182"></p>
<p class=""><span style="font-weight: 400;">Following that, APIMatic customized shirts, bottles, and flavored chocolates were distributed to the whole team. The celebration concluded with delicious refreshments and cake to make the day a whole more enjoyable.&nbsp;&nbsp;&nbsp;</span></p>
<p class=""><img class="alignnone wp-image-1823" src="/wp-content/uploads/2022/04/P0A9920-scaled.jpg" alt="" width="270" height="179">&nbsp; &nbsp; <img class="alignnone wp-image-1825" src="/wp-content/uploads/2022/04/P0A9925-scaled.jpg" alt="" width="273" height="182"> &nbsp; <img class="alignnone wp-image-1824" src="/wp-content/uploads/2022/04/P0A9922-scaled.jpg" alt="" width="275" height="183"> <img class="alignnone wp-image-1826" src="/wp-content/uploads/2022/04/P0A9962-scaled.jpg" alt="" width="275" height="184"> <img class="alignnone wp-image-1827" src="/wp-content/uploads/2022/04/P0A9969-scaled.jpg" alt="" width="276" height="184"> <img class="alignnone wp-image-1828" src="/wp-content/uploads/2022/04/P0A9974-scaled.jpg" alt="" width="275" height="184"></p>
<h2 class=""><b>Adventure Trip to Mabali Island</b></h2>
<p class=""><span style="font-weight: 400;">To add to the celebration week, the APIMatic team went for an ecological, nature-friendly, and fun-filled visit to Mabali Island (It&#8217;s not an island, it&#8217;s a way of life). The day started with everybody arriving at the office and leaving around 9 am. The route, to a relief, was roughly an hour and a half. Along the way, everybody enjoyed playing games by splitting themselves into two teams and laughing to their heart&#8217;s content.&nbsp;</span></p>
<p class=""><span style="font-weight: 400;">Around reaching the island at 10.30 am, the weather was a lot sunny and dry. Welcome drinks were served which was everyone&#8217;s favorite, the mint margarita. For the day&#8217;s first activity, everyone opted for jet skis, splitting themselves into four teams and conducting races on the water. After that, took place the great tug of war. Our HR managers team won, exhilarating their strength!</span></p>
<p class=""><img class="wp-image-1723 alignnone" src="/wp-content/uploads/2022/04/image_4.jpg" alt="" width="338" height="253">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<img class="alignnone wp-image-1743" src="/wp-content/uploads/2022/04/image_9.jpg" alt="" width="448" height="252"></p>
<p class=""><span style="font-weight: 400;">To continue with all the fun, some of the team members started a volleyball match, others went for a paddleboat, and the rest chose to relax while enjoying the pretty view. With the eventual improvement in weather to become cloudy and more pleasant, most of the men went to play their most-liked game, cricket, while the others hopped on a family boat that cruises around the mesmerizing lake.</span></p>
<p class=""><img class="wp-image-1724 alignnone" src="/wp-content/uploads/2022/04/image_5.jpg" alt="" width="421" height="237">&nbsp; &nbsp; &nbsp;<img class="wp-image-1791 size-medium alignnone" src="/wp-content/uploads/2022/04/image_13-300x225.jpg" alt="" width="300" height="225"></p>
<p class=""><span style="font-weight: 400;">Giving the day another boost, a group of people decided to go parasailing to take in the breathtaking views of the sky and the lake. Our CEO, Adeel Ali, also went for Ziplining. To conclude the day and rest up a little bit, everybody enjoyed a scrumptious BBQ platter meal for lunch. Following that, the whole team gathered to have tea against the lake and ended the day while winding down.&nbsp;</span></p>
<p class=""><img class="alignnone wp-image-1725" src="/wp-content/uploads/2022/04/image_6.jpg" alt="" width="406" height="228">&nbsp;<img class="wp-image-1746 alignnone" src="/wp-content/uploads/2022/04/image_12.jpg" alt="" width="404" height="227"></p>
<h2 class=""><b>Scrumptious Lunch at Whispering Pines Resort</b></h2>
<p class=""><span style="font-weight: 400;">The celebrations ended with team APIMatic having a delightful lunch at Whispering Pines resort situated among the panoramic green views, in the heart of Margalla Hills. It is an hour&#8217;s drive from Islamabad and a beautiful place for adventure and nature lovers.</span></p>
<p><iframe title="Whispering Pines, #Islamabad, #APIMatic Lunch, 17-3-22" width="653" height="367" src="https://www.youtube.com/embed/GYGLV_SXp60?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></p>
<p class=""><span style="font-weight: 400;">The day started with almost the whole team working from the office, where Adeel gave an informative session on the development of APIs in the tech world. Following that, everyone left for a BBQ lunch along with desserts and tea at the Whispering Pines resort to enjoy the astounding views of nature. Two of the team members even attended customer calls from the resort, showing phenomenal team spirit. At last, we ended the evening by enjoying ourselves to live music as some hidden talents were discovered in the form of guitarists and singers from within the team.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p>
<p class=""><img class="alignnone wp-image-1835" src="/wp-content/uploads/2022/04/IMG_20220317_133658-scaled.jpg" alt="" width="251" height="188"> &nbsp;<img class="alignnone wp-image-1830" src="/wp-content/uploads/2022/04/IMG_20220317_174904-scaled.jpg" alt="" width="327" height="184"> &nbsp;<img class="alignnone wp-image-1833" src="/wp-content/uploads/2022/04/IMG_20220317_161102-scaled.jpg" alt="" width="238" height="178"> &nbsp; <img class="wp-image-1841 alignnone" src="/wp-content/uploads/2022/04/Image-from-iOS-scaled-e1647869658754.jpg" alt="" width="311" height="173"> &nbsp;<img class="alignnone wp-image-1836 " src="/wp-content/uploads/2022/04/20220317_155945-300x142.jpg" alt="" width="317" height="150"> &nbsp;<img class="alignnone  wp-image-1829" src="/wp-content/uploads/2022/04/IMG_20220317_174449-scaled.jpg" alt="" width="199" height="149"> <img class="alignnone  wp-image-1834" src="/wp-content/uploads/2022/04/IMG_20220317_161115-scaled.jpg" alt="" width="280" height="210"> &nbsp; <img class="alignnone  wp-image-1846" src="/wp-content/uploads/2022/04/IMG_20220317_165729-1-scaled.jpg" alt="" width="161" height="215"> &nbsp;<img class="alignnone  wp-image-1831" src="/wp-content/uploads/2022/04/IMG_20220317_181449-scaled-e1647869388602.jpg" alt="" width="376" height="192"></p>
<h2 class=""><b>Wrapping Up!</b></h2>
<p class=""><span style="font-weight: 400;">With last year as a pandemic-stricken remote-working year, our team maintained their spirits during difficult times with steadfast commitment and collaborative culture. All of this was possible due to our team-building efforts and staying strong throughout. We hope the year 2022 brings us all the happiness and better opportunities for our growth!</span></p>
</div>
</div>
</div>
</div>
<p>The post <a rel="nofollow" href="/blog/apimatic-goes-back-to-normal-with-a-bang/">APIMatic Goes Back to Normal with a Bang</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>An Insight into APIMatic’s Autogenerated SDKs</title>
		<link>/blog/an-insight-into-apimatics-autogenerated-sdks/</link>
		
		<dc:creator><![CDATA[Arooj Arshad]]></dc:creator>
		<pubDate>Mon, 21 Feb 2022 11:44:24 +0000</pubDate>
				<category><![CDATA[Automation]]></category>
		<category><![CDATA[CLI]]></category>
		<category><![CDATA[CodeGen]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[auto-generated SDKs]]></category>
		<category><![CDATA[Code Generation]]></category>
		<category><![CDATA[Sdks]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1665</guid>

					<description><![CDATA[<p>How can you reduce client onboarding of your API so that the API user quickly gets to their first &#8220;Hello World&#8221;? One definitive way is to provide an SDK for a developer&#8217;s technology stack so that they can easily integrate your APIs onto their native platforms. By providing an SDK, it becomes much simpler for [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/an-insight-into-apimatics-autogenerated-sdks/">An Insight into APIMatic’s Autogenerated SDKs</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<div class="">
<p class=""><img class=" wp-image-1675 aligncenter" src="/wp-content/uploads/2022/04/updated-pic.png" alt="Generate SDK" width="572" height="404"></p>
<p class=""><span style="font-weight: 400">How can you reduce client onboarding of your API so that the API user quickly gets to their first &#8220;Hello World&#8221;?</span> <span style="font-weight: 400">One definitive way is to provide an SDK for a developer&#8217;s technology stack so that they can easily integrate your APIs onto their native platforms.</span><span style="font-weight: 400"> By providing an SDK, it becomes much simpler for a developer to integrate your API in ways that are familiar and well-integrated with their existing toolchain</span><span style="font-weight: 400">.</span></p>
<p class=""><span style="font-weight: 400">In simpler terms, it is no longer enough to expose your API endpoints with just HTTP documentation or API references. You need to attract developers to enable them to comfortably play around with your code, and this is what APIMatic SDKs help with.</span></p>
<h2 class=""><span style="font-weight: 400">APIMatic as a Code Generator</span></h2>
<p class=""><span style="color: #3366ff"><a style="color: #3366ff" href="https://www.apimatic.io/"><span style="font-weight: 400">APIMatic</span></a></span><span style="font-weight: 400"> autogenerates SDKs </span><span style="font-weight: 400">f</span><span style="font-weight: 400">or APIs automatically in all major programming languages so that developers can consume APIs in their favorite development environment with less code, less effort, and more fun</span><span style="font-weight: 400">. </span><span style="font-weight: 400">These </span><span style="color: #3366ff"><a style="color: #3366ff" href="https://docs.apimatic.io/generate-sdks/overview-sdks/"><span style="font-weight: 400">comprehensive SDKs</span></a></span><span style="font-weight: 400"> help accelerate the API consumption process as they can be automatically generated and shipped along with your latest API update. They accurately map your API definition files into their respective classes and controllers while adhering to the best coding practices. APIMatic further provides flexibility to customize code generation through </span><span style="color: #3366ff"><a style="color: #3366ff" href="https://docs.apimatic.io/generate-sdks/configure-codegen/"><span style="font-weight: 400">Customizable CodeGen Settings</span></a></span><span style="font-weight: 400">. APIMatic generates SDKs in the following languages:</span></p>
<ul class="">
<li style="font-weight: 400"><span style="font-weight: 400">PHP</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">Ruby</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">Python</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">C# (.NET)</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">Java</span></li>
<li style="font-weight: 400"><span style="font-weight: 400">TypeScript</span></li>
</ul>
<p class=""><span style="font-weight: 400">Building and maintaining these feature-packed SDKs from scratch is not easy and requires extensive engineering time and effort. However, autogenerated SDKs can significantly cut down costs and time.</span> <span style="font-weight: 400">For more detailed pros and cons of manually generating SDKs against autogenerating them, read here on </span><span style="color: #3366ff"><a style="color: #3366ff" href="https://www.apimatic.io/blog/2021/09/the-great-sdk-battle-build-vs-buy/"><span style="font-weight: 400">The Great SDK Battle: Build vs Buy</span></a></span><span style="font-weight: 400">.</span></p>
<h2 class=""><span style="font-weight: 400">How does APIMatic Autogenerate SDKs?</span></h2>
<p class=""><span style="font-weight: 400">SDK generation is a tricky challenge for API providers. On one side, you want to keep SDKs with minimal code and dependencies and on the other hand, you want to customize the generated code according to the needs of the developers. APIMatic gives you an easy solution by providing autogenerated SDKs for your APIs.</span></p>
<p class=""><span style="font-weight: 400">APIMatic’s Code Generation Engine follows several steps internally to generate client libraries from API definition files. The code generation process starts with an input API definition file which can be in any of the multiple supported </span><span style="color: #3366ff"><a style="color: #3366ff" href="https://www.apimatic.io/transformer/#supported-formats"><span style="font-weight: 400">API definition formats</span></a></span><span style="font-weight: 400"> like OpenAPI, RAML, API Blueprint, etc.</span></p>
<ul class="">
<li><b>API Transformation: </b><span style="font-weight: 400">This step transforms the input API definition file into APIMatic&#8217;s format which contains useful information for SDK generation that is not available in other API definition formats.</span></li>
<li style="font-weight: 400"><b>API Validation:</b> <span style="font-weight: 400">After an input file is transformed into APIMatic’s format, it is validated. The validation process includes checking for syntactical and semantical discrepancies in the API definition and shows critical warnings and errors to be fixed before SDK generation can proceed.</span></li>
<li style="font-weight: 400"><b>SDK Generation: </b><span style="font-weight: 400">Now, components of the API definition are looped over to generate code representations. While a basic SDK caters to settings, endpoints, and an abstraction layer, APIMatic goes an extra step by mapping your API completely into an SDK</span><span style="font-weight: 400">. </span><span style="font-weight: 400">Some important entity conversions from an API definition to an SDK are:</span>
<ul>
<li style="font-weight: 400"><b>Settings -&gt; Configuration files:</b><span style="font-weight: 400"> All API settings like environment configuration etc are consolidated in a configuration file.</span></li>
<li style="font-weight: 400"><b>Endpoints -&gt; Functions:</b><span style="font-weight: 400"> Each endpoint maps onto an independent function.</span></li>
<li style="font-weight: 400"><b>Groups -&gt; Controller class files:</b><span style="font-weight: 400"> Endpoints are automatically grouped into separate Controller classes.</span></li>
<li style="font-weight: 400"><b>Models -&gt; Model class files:</b><span style="font-weight: 400"> Data input is converted into models.</span></li>
<li style="font-weight: 400"><b>Errors -&gt; Exception class files:</b><span style="font-weight: 400"> Errors are handled as exceptions via a unified exception class.&nbsp;</span></li>
</ul>
</li>
</ul>
<p class=""><span style="font-weight: 400">&nbsp; &nbsp;</span></p>
<p class=""><span style="font-weight: 400">&nbsp; &nbsp; Apart from these core files, the CodeGen engine also generates the following utility files:</span></p>
<ul class="">
<li style="list-style-type: none">
<ul class="">
<li style="font-weight: 400;text-align: left"><span style="font-weight: 400">&nbsp;HTTP abstraction layer</span></li>
<li style="font-weight: 400;text-align: left"><span style="font-weight: 400">&nbsp;Helper class files</span></li>
<li style="font-weight: 400;text-align: left"><span style="font-weight: 400">Client library interface</span></li>
<li style="font-weight: 400;text-align: left"><span style="font-weight: 400">Language/platform-dependent files</span></li>
</ul>
</li>
<li style="font-weight: 400"><b>Documentation Generation: </b><span style="font-weight: 400">Every generated SDK also includes a README.md file. The README contains complete class reference and code samples for the SDK and guides the user on setting up the environment (using tool-specific IDEs), initializing the client, creating the controller, calling the endpoints, and testing them.&nbsp;</span></li>
<li><b>Packaging:</b> <span style="font-weight: 400">After all the SDK files have been generated, there are multiple packaging options available to APIMatic users. You can either get the SDK packaged in a zip file, have it deployed to GitHub, or </span><span style="color: #3366ff"><a style="color: #3366ff" href="https://docs.apimatic.io/generate-sdks/publishing-a-package/"><span style="font-weight: 400">publish it as a package</span></a></span><span style="font-weight: 400"> on platforms like npm, NuGet, RubyGems, and PyPI.</span></li>
</ul>
<p class="">&nbsp;</p>
<p class=""><span style="font-weight: 400">For more detail on the mapping from an API specification file to SDK, please refer to the </span><span style="color: #3366ff"><a style="color: #3366ff" href="https://docs.apimatic.io/generate-sdks/overview-sdks/"><span style="font-weight: 400">APIMatic SDK O</span>verview</a></span><span style="font-weight: 400">.</span></p>
<h2 class=""><span style="font-weight: 400">Features Supported in APIMatic&#8217;s Autogenerated SDKs&nbsp;</span></h2>
<p class=""><span style="font-weight: 400">APIMatic SDKs supports the latest versions and language dependencies, along with features that make them as robust and fault-tolerant as possible.</span></p>
<p class=""><strong>Immutable Clients for Multi-Threading</strong></p>
<p class=""><span style="font-weight: 400">An</span><a href="https://docs.apimatic.io/changelog/apimatic-code-generator-v3-titan#new-immutable-clients-in-sdks"> <span style="font-weight: 400">Immutable Client</span></a><span style="font-weight: 400"> does not allow the user of the client to mutate the client (i.e change its state) once it has been created.</span> <span style="font-weight: 400">Client classes of all the SDKs are designed using the immutable design pattern. This gives developers the assurity that no method call would mutate its state once the client is instantiated.</span></p>
<p class=""><strong>Timeout and Retries on API Call Errors</strong></p>
<p class=""><span style="font-weight: 400">APIMatic generated SDKs help you write fault-tolerant applications by helping deal with network fault errors. If an API call fails due to network problems, it is retried with an exponentially increasing wait time up to a maximum retry count specified by the user. This is particularly helpful during temporary network outages.</span></p>
<p class=""><strong>Support for XML in API Calls</strong></p>
<p class=""><span style="font-weight: 400">The SDKs contain support for </span><a href="https://docs.apimatic.io/changelog/apimatic-code-generator-v3-titan#support-for-xml"><span style="font-weight: 400">sending and receiving XML</span></a><span style="font-weight: 400"> in the API calls, alongside JSON. So if your API definition uses XML, it can be imported into APIMatic to generate SDKs without having to worry about serializing and deserializing the XML data.</span><span style="font-weight: 400">&nbsp;</span></p>
<p class=""><strong>oneOf and anyOf Support</strong></p>
<p class=""><span style="font-weight: 400">Java, Python, and PHP SDKs contain the support of <strong>oneOf</strong> and <strong>anyOf</strong> which gives the ability to create a complex schema or validate a value against multiple criteria.</span></p>
<p class=""><strong>Support for Nullable Properties in Models</strong></p>
<p class=""><span style="font-weight: 400">J</span><span style="font-weight: 400">ava and C# SDKs contain nullable properties in models, so if a user does not assign any value to a property after model instance initialization, a null value will be sent in the HTTP request instead of being skipped altogether.</span></p>
<p class=""><strong>Access to HTTP Response Data</strong></p>
<p class=""><span style="font-weight: 400">The SDKs also allow access to the HTTP response information like response headers, status code, and body on API calls. </span></p>
<p class=""><span style="font-weight: 400">Other features in the SDKs include optimized error messages, handling cancellation of API calls, and more. For more information and details on all the features that APIMatic SDKs provide, have a look at our </span><span style="color: #3366ff"><a style="color: #3366ff" href="https://docs.apimatic.io/generate-sdks/sdk-features/"><span style="font-weight: 400">SDK Features List</span></a></span><span style="font-weight: 400">.</span></p>
<h2 class=""><span style="font-weight: 400">How to Generate SDKs from API Definitions?</span></h2>
<p><span style="font-weight: 400">Next, comes the part where you can generate your SDKs via various options according to your specified use case:</span></p>
<ul class="">
<li style="font-weight: 400"><span style="color: #3366ff"><a style="color: #3366ff" href="https://docs.apimatic.io/generate-sdks/generating-sdks/#generate-sdks-via-web"><span style="font-weight: 400">Web</span></a></span></li>
<li style="font-weight: 400"><span style="color: #3366ff"><a style="color: #3366ff" href="https://docs.apimatic.io/generate-sdks/generating-sdks/#generate-sdks-via-api"><span style="font-weight: 400">API</span></a></span><span style="font-weight: 400">&nbsp;</span></li>
<li style="font-weight: 400"><span style="color: #3366ff"><a style="color: #3366ff" href="https://docs.apimatic.io/generate-sdks/generating-sdks/#generate-sdks-via-apimatic-cli"><span style="font-weight: 400">APIMatic CLI</span></a></span></li>
</ul>
<h3 class=""><span style="font-weight: 400">Generate SDKs through Web</span></h3>
<p class=""><span style="font-weight: 400">You can generate an SDK for any API definition file in your favorite language through our </span><span style="color: #3366ff"><a style="color: #3366ff" href="https://www.apimatic.io/dashboard"><span style="font-weight: 400">APIMatic dashboard</span></a></span><span style="font-weight: 400">. Select any API or its version from the dashboard and generate the SDK via the ‘Generate’</span> <span style="font-weight: 400">button. After the validation process, you can choose to download the SDK as a zip file, deploy it to Github or publish it as a package.</span></p>
<figure id="attachment_1668" aria-describedby="caption-attachment-1668" style="width: 590px" class="wp-caption aligncenter"><img class="size-full wp-image-1668" src="/wp-content/uploads/2022/04/generation-options.png" alt="" width="590" height="582"><figcaption id="caption-attachment-1668" class="wp-caption-text">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Generating SDK Options</figcaption></figure>
<h3 class=""><span style="font-weight: 400">Generate SDKs through API</span></h3>
<p class=""><span style="font-weight: 400">You can automate the process of SDK generation using</span> <span style="color: #3366ff"><a style="color: #3366ff" href="https://www.apimatic.io/apidocs/apimatic/"><span style="font-weight: 400">APIMatic&#8217;s CodeGen API</span></a>,<span style="color: #000000"> by integrating it into your CI/CD pipelines</span></span><span style="font-weight: 400">. </span><span style="font-weight: 400">You can generate SDKs for APIs already imported into APIMatic, any external API, or by specifying a URL. The generated SDKs are downloaded as a zip file in your system.</span></p>
<pre class=""><code class="language-cs">{
    string apiEntityId = &quot;apiEntityId2&quot;; 
    Platforms template = Platforms.CSNETSTANDARDLIB; 

    try { &nbsp;&nbsp;&nbsp;
            APIEntityCodeGeneration result = await codeGenerationImportedApisController
                                                        .GenerateSDKAsync(apiEntityId, template); 
        } 
    catch (ApiException e) {};
}</code></pre>
<h3 class=""><span style="font-weight: 400">Generate SDKs through APIMatic CLI</span><span style="font-weight: 400">&nbsp;</span></h3>
<p class=""><span style="font-weight: 400">You can also integrate the </span><span style="color: #3366ff"><a style="color: #3366ff" href="https://docs.apimatic.io/apimatic-cli/intro-and-install/"><span style="font-weight: 400">APIMatic CLI</span></a></span><span style="font-weight: 400"> into your CI/CD pipelines for a seamless and automated experience. APIMatic CLI supports all the basic features like validation, transformation, SDK, and documentation generation. You can generate an SDK for your API through the CLI via the <strong>apimatic SDK:generate</strong> command:&nbsp;</span></p>
<p class=""><img class="aligncenter wp-image-1680 size-full" src="/wp-content/uploads/2022/04/cli-image.png" alt="apimatic-cli command to generate SDK" width="779" height="97"></p>
<p class=""><span style="font-weight: 400">For more details, read our </span><span style="color: #3366ff"><a style="color: #3366ff" href="https://docs.apimatic.io/generate-sdks/generating-sdks/"><span style="font-weight: 400">Generating SDKs via APIMatic Docs</span></a></span><span style="font-weight: 400">.</span></p>
<h2 class=""><span style="font-weight: 400">Wrapping it Up!</span></h2>
<p class=""><span style="font-weight: 400">Creating SDKs in multiple languages is quite resource-intensive and expensive. Good SDKs save both time and cognitive effort when integrating with a provider’s API. This is why APIMatic&#8217;s CodeGen engine gives you the maximum advantage in creating SDKs and takes care of all the SDK generation and maintenance work behind the scenes while your developers can focus on their applications and innovative solutions.&nbsp;</span></p>
<p class="">&nbsp;</p>
</div>
</div>
</div>
</div>
</div>
<p>The post <a rel="nofollow" href="/blog/an-insight-into-apimatics-autogenerated-sdks/">An Insight into APIMatic’s Autogenerated SDKs</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>APIMatic Java SDKs Protected Against Log4j Vulnerability</title>
		<link>/blog/protected-against-log4j-vulnerability/</link>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Tue, 14 Dec 2021 12:10:49 +0000</pubDate>
				<category><![CDATA[APIMATIC]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[auto-generated SDKs]]></category>
		<category><![CDATA[java]]></category>
		<category><![CDATA[log4j]]></category>
		<category><![CDATA[security]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1608</guid>

					<description><![CDATA[<p>Auckland, NZ – December 14, 2021: APIMatic has performed a detailed analysis of their Java SDKs and confirms that they do not contain direct Log4j v2 dependency, making the SDKs safe from the new zero-day vulnerability, CVE-2021-44228, also called as Log4Shell. Log4j &#62;= version 2.0 has become a global security threat as it allows attackers [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/protected-against-log4j-vulnerability/">APIMatic Java SDKs Protected Against Log4j Vulnerability</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class=""><b>Auckland, NZ – December 14, 2021</b><span style="font-weight: 400;">: APIMatic has performed a detailed analysis of their Java SDKs and confirms that they do not contain direct Log4j v2 dependency, making the SDKs safe from the new zero-day vulnerability, <em>CVE-2021-44228</em>, also called as <em>Log4Shell</em>.</span></p>
<p class=""><span style="font-weight: 400;">Log4j &gt;= version 2.0 has become a global security threat as it allows attackers to execute remote code on their targetted servers. APIMatic ran checks for their Java SDKs and found that the SDKs use SLF4J  (1.7.30) for logging, hence the Java SDKs are not exposed to this vulnerability.</span></p>
<p class=""><span style="font-weight: 400;">APIMatic’s engineering and customer support teams are working to ensure that all users are informed about the latest updates regarding the Log4J vulnerability. </span></p>
<p class=""><span style="font-weight: 400;">APIMatic is a premium developer experience platform on a mission to ensure faster adoption of your API with autogenerated API documentation, multi-language SDKs, dynamic code samples, and more.</span></p>
<p class=""><span style="font-weight: 400;">Please direct any concerns or further inquiries to</span><a href="mailto:info@apimatic.io"><span style="font-weight: 400;"> info@apimatic.io</span></a><span style="font-weight: 400;">.</span></p>
</div>
</div>
</div>
</div>
<p>The post <a rel="nofollow" href="/blog/protected-against-log4j-vulnerability/">APIMatic Java SDKs Protected Against Log4j Vulnerability</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Using Optional and Nullable Properties in API Requests</title>
		<link>/blog/using-optional-and-nullable-properties-in-api-requests/</link>
		
		<dc:creator><![CDATA[Maryam Adnan]]></dc:creator>
		<pubDate>Thu, 16 Sep 2021 09:00:51 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[APIMATIC]]></category>
		<category><![CDATA[CodeGen]]></category>
		<category><![CDATA[OpenAPI]]></category>
		<category><![CDATA[REST APIs]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[nullable]]></category>
		<category><![CDATA[OpenApi]]></category>
		<category><![CDATA[optional]]></category>
		<category><![CDATA[optional/nullable]]></category>
		<category><![CDATA[Sdks]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1436</guid>

					<description><![CDATA[<p>An essential part of an API endpoint is its parameters. While certain parameters must be included in each request, there may be some parameters that may or not may not be included in the request. The optional property was introduced to create unique combinations of such parameters in API requests. In other cases, some parameters [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/using-optional-and-nullable-properties-in-api-requests/">Using Optional and Nullable Properties in API Requests</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1436" class="elementor elementor-1436">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-4ea2926a elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="4ea2926a" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-1c6630db" data-id="1c6630db" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-274d9c90 elementor-widget elementor-widget-text-editor" data-id="274d9c90" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
			<style>/*! elementor - v3.6.4 - 13-04-2022 */
.elementor-widget-text-editor.elementor-drop-cap-view-stacked .elementor-drop-cap{background-color:#818a91;color:#fff}.elementor-widget-text-editor.elementor-drop-cap-view-framed .elementor-drop-cap{color:#818a91;border:3px solid;background-color:transparent}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap{margin-top:8px}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap-letter{width:1em;height:1em}.elementor-widget-text-editor .elementor-drop-cap{float:left;text-align:center;line-height:1;font-size:50px}.elementor-widget-text-editor .elementor-drop-cap-letter{display:inline-block}</style>				<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class=""><img class="aligncenter wp-image-1451" src="/wp-content/uploads/2021/12/Using-OptionalNullable-Properties-in-API-Requests_Blog_Facebook-1-e1631787822746-1024x436.png" alt="Using Optional and Nullable Properties in API Requests | APIMatic Blog" width="623" height="265" /></p>
<p class=""><span style="font-weight: 400;">An essential part of an API endpoint is its parameters. While certain parameters must be included in each request, there may be some parameters that may or not may not be included in the request. The </span><span style="font-weight: 400;"><code>optional</code> </span><span style="font-weight: 400;">property was introduced to create unique combinations of such parameters in API requests. In other cases, some parameters may be allowed to hold a null value, which is catered via <code>nullable</code> properties that help in coping with the errors if null is not handled correctly. </span></p>
<p class=""><span style="font-weight: 400;">While all endpoint parameter types (query, body, form, and path) can have optional nullable properties, we’ll be focusing on the optional nullable properties of a model’s fields being passed as request parameters in a </span><b>client SDK</b><span style="font-weight: 400;">. </span></p>
<p class=""><i><span style="font-weight: 400;">This blog is the first part of a series on how optional and nullable properties can be used flexibly and in multiple combinations to cater to each parameter of your API requests. </span></i></p>

<h2 class=""><strong>Required, Optional, and Nullable Properties in OpenAPI</strong></h2>
<p class=""><span style="font-weight: 400;">The </span><a href="https://github.com/OAI/OpenAPI-Specification"><span style="font-weight: 400;">OpenAPI Specification</span></a> <span style="font-weight: 400;">is a simple yet powerful way of describing RESTful APIs, in a machine and human-readable format, using JSON or YAML.</span><span style="font-weight: 400;"> OpenAPI has some examples of Uber’s API listed down </span><a href="https://github.com/OAI/OpenAPI-Specification/blob/main/examples/v2.0/json/uber.json"><span style="font-weight: 400;">in their repository</span></a> <span style="font-weight: 400;">to help understand how the endpoint is specified with OpenAPI. </span></p>
<p class=""><span style="font-weight: 400;">The OpenAPI specification allows defining parameters for an operation or path. Parameters can be of different types i.e header, query, cookies, path parameters.</span></p>

<h3 class=""><b>Required Parameters</b></h3>
<p class=""><span style="font-weight: 400;">One of the attributes that can be defined for these parameters is</span><b> “required”</b><span style="font-weight: 400;"> which simply means whether it is a </span><i><span style="font-weight: 400;">required </span></i><span style="font-weight: 400;">parameter or an </span><i><span style="font-weight: 400;">optional </span></i><span style="font-weight: 400;">one. Let&#8217;s take a look at an example of Uber’s </span><a href="https://developer.uber.com/docs/riders/references/api/v1.2/products-get"><span style="font-weight: 400;">Get Products</span></a><span style="font-weight: 400;"> endpoint specification:</span></p>

<pre class=""><code class="language-json">"paths": {
	"/products": {
  	"get": {
        ...
        "parameters": [
            {
                "name": "latitude",
                "in": "query",
                "description": "Latitude component of location.",
                "required": true,
                "style": "form",
                ...
            },
            {
                "name": "longitude",
                "in": "query",
                "description": "Longitude component of location.",
                "required": true,
                "style": "form",
                ...
            }
    	]
  	    }
      }
  }</code></pre>
<p class=""><span style="font-weight: 400;">You can get more details </span><span style="font-weight: 400;">regarding </span><a href="https://swagger.io/docs/specification/describing-parameters/"><span style="font-weight: 400;">Required and Optional Parameters</span></a> <span style="font-weight: 400;">in the official OAS document.</span></p>

<h3 class=""><b>Nullable Parameters</b></h3>
<p class=""><span style="font-weight: 400;">OpenAPI supports values of data types to be null. To specify, one can use the </span><b>“</b><span style="font-weight: 400;">nullable: true</span><b>” </b><span style="font-weight: 400;">property while defining a data type in OAS version 3.0.0. Let&#8217;s look at the definition of the </span><code>Profile</code> <span style="font-weight: 400;">schema that is defined for the response that we receive for the endpoint </span><a href="https://developer.uber.com/docs/riders/references/api/v1.2/me-get#resource"><span style="font-weight: 400;">User Profile</span></a>. <span style="font-weight: 400;">The attribute </span><code>promo_code</code><span style="font-weight: 400;"> is nullable here:</span></p>

<pre class=""><code class="language-json">"Profile": {
	"title": "Profile",
	"required": [
  	"middle_name",
  	"rider-id"
	],
	"type": "object",
	"properties": {
        "first_name": {
            "type": "string",
            "description": "First name of the Uber user."
        },
        ...
        "promo_code": {
            "type": "string",
            "nullable": "true",
            "description": "Promo code of the Uber user."
        }
    }
}</code></pre>
<p class=""><span style="font-weight: 400;">For more detail, please refer to the </span><a href="https://swagger.io/docs/specification/data-models/data-types/"><span style="font-weight: 400;">Null Property</span></a> <span style="font-weight: 400;">section in the OAS document.</span></p>

<h2 class=""><strong>Optional and Nullable Properties in APIMatic&#8217;s Client SDKs</strong></h2>
<p class=""><span style="font-weight: 400;"><a href="https://apimatic.io/">APIMatic</a> is a developer experience platform that focuses on increasing your API’s adoption with comprehensive documentation, multi-language SDKs, and much more. The SDKs are autogenerated for your API and contain support for optional and nullable properties, that are translated from your OpenAPI specification file. </span></p>
<p class=""><span style="font-weight: 400;">The client SDK is built up of a multitude of endpoints sending data from client to server with the help of parameters. Those parameters can be sent in different parts of a request and hence they are distinguished on the location in which they are sent. Endpoint parameters can be of four types:</span></p>

<ol class="">
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Query parameters</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Path parameters </span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Body parameters</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Form parameters</span></li>
</ol>
<p class=""><span style="font-weight: 400;">These parameters can have multiple properties associated with them like their schema, description, summary, and more. </span><b>Required </b><span style="font-weight: 400;">and </span><b>nullable </b><span style="font-weight: 400;">are two of those properties that can be set for these parameters. </span></p>
<p class=""><span style="font-weight: 400;">During client and server communication, data is serialized from object to JSON string and gets deserialized from JSON string to an object. The data being passed in the parameters can be a simple field, or a model containing multiple fields. Model fields can have </span><em>required</em> <span style="font-weight: 400;">and </span><em>nullable</em> <span style="font-weight: 400;">properties in the same way as a request parameter itself. Regardless of the type of data being passed, </span><em>optional</em> <span style="font-weight: 400;">and </span><em>nullable</em> <span style="font-weight: 400;">is in context to the representation of that data in JSON string during serialization.</span></p>
<p class=""><span style="font-weight: 400;">An</span><strong> o</strong><span style="font-weight: 400;"><strong>ptional</strong> </span><span style="font-weight: 400;">property means that it may or may not be present in the resultant JSON string, while a </span><span style="font-weight: 400;"><strong>required</strong> </span><span style="font-weight: 400;">property means that it will always be present in the JSON string. </span><span style="font-weight: 400;"><strong>Nullable</strong> </span><span style="font-weight: 400;">means that if the property is present in JSON, it can hold a null value, and </span><strong>non-nullable</strong><span style="font-weight: 400;"> means that the value of that property cannot be null in the JSON string. Therefore, we can formulate a total of four combinations for this:</span></p>

<h3><b>1. Optional Nullable</b></h3>
<p class=""><span style="font-weight: 400;">If a field (whether it is a parameter or a part of a model) is uninitialized, i.e., not specified, then </span><span style="font-weight: 400;">it should be ignored in the JSON string during serialization. If it is initialized and assigned a null value explicitly, then it should be represented in the JSON string. </span></p>
<p class=""><span style="font-weight: 400;">Let&#8217;s consider the example of a model/definition </span><code>Profile</code><span style="font-weight: 400;"> which consists of the following fields:</span></p>

<pre class=""><code class="language-c">Profile
{
   string picture;
   string first_name;
   string middle_name;
   string last_name;
   string uuid;
   string rider_id;
   string email;
   bool mobile_verified;
   string promo_code;
}</code></pre>
<p class=""><span style="font-weight: 400;">Its OpenAPI specification looks like this:</span></p>

<pre class=""><code class="language-json">"Profile": {
	"title": "Profile",
	"required": ["middle_name", "rider-id"],
	"type": "object",
	"properties": {
  	"first_name": {
    	"type": "string",
    	"description": "First name of the Uber user."
  	},
  	"last_name": {
    	"type": "string",
    	"description": "Last name of the Uber user."
  	},
  	"middle_name": {
    	"type": "string",
    	"nullable": "true",
    	"description": "Last name of the Uber user."
  	},
  	"email": {
    	"type": "string",
    	"description": "Email address of the Uber user"
  	},
        "mobile_verified": {
    	"type": "boolean",
    	"description": "Mobile verification of Uber user"
  	},
  	"rider-id": {
    	"type": "string",
    	"description": "Rider id of the Uber user"
  	},
  	"picture": {
    	"type": "string",
    	"description": "Image URL of the Uber user."
  	},
  	"promo_code": {
    	"type": "string",
    	"nullable": "true",
    	"description": "Promo code of the Uber user."
  	}
    }
}</code></pre>
<p class=""><span style="font-weight: 400;">During the instantiation of <code>Profile</code>, if  </span><code>promo_code</code><b> </b><span style="font-weight: 400;">is initialized with a null value in the client SDK and sent in the request, the resultant JSON string after serialization will hold its null value as its nullable property:</span></p>

<pre class=""><code class="language-json">{
    "picture": "https://d1w2poirtb3as9.cloudfront.net/f3be498cb0bbf570aa3d.jpeg",
    "first_name": "Uber",
    ...
    "mobile_verified": true,
    "promo_code": "null"
}</code></pre>
<p class=""><span style="font-weight: 400;">If </span><code>promo_code</code><b> </b><span style="font-weight: 400;">is uninitialized during the <code>Profile</code> instantiation for the request, the resultant JSON will ignore <code>promo_code</code>, as it was an </span><b>optional </b><span style="font-weight: 400;">field.</span></p>

<pre class=""><code class="language-json">{
    "picture": "https://d1w2poirtb3as9.cloudfront.net/f3be498cb0bbf570aa3d.jpeg",
    "first_name": "Uber",
    ...
    "mobile_verified": true,
}</code></pre>
<p class=""><span style="font-weight: 400;">If  </span><code>promo_code</code><b> </b><span style="font-weight: 400;">is initialized with a proper value during the <code>Profile</code> instantiation for sending it in the request, the resultant JSON will include the field as specified:</span></p>

<pre class=""><code class="language-json">{
    "picture": "https://d1w2poirtb3as9.cloudfront.net/f3be498cb0bbf570aa3d.jpeg",
    "first_name": "Uber",
    ...
    "mobile_verified": true,
    "promo_code": "uberd340ue"
}</code></pre>
<h3><b>2. Optional Non-Nullable</b></h3>
<p class=""><span style="font-weight: 400;">If a field (whether it’s a parameter or a part of the model) is uninitialized, i.e., not specified, then </span><span style="font-weight: 400;">it should be ignored in JSON string during serialization but as it can not be initialized with a null value, hence we should ignore it JSON. Let’s look at the </span><code>Profile</code> <span style="font-weight: 400;">JSON schema again, where the attribute </span><code>picture</code><b> </b><span style="font-weight: 400;">is optional non-nullable as specified in the OAS of Profile. </span></p>
<p class=""><span style="font-weight: 400;">If </span><code>picture</code><span style="font-weight: 400;"> is initialized with a non-null value when sending it in a request, the resultant JSON string will look like this:</span></p>

<pre class=""><code class="language-json">{
    "picture": "https://d1w2poirtb3as9.cloudfront.net/f3be498cb0bbf570aa3d.jpeg",
    "first_name": "Uber",
    "middle_name": "null",
    "last_name": "Developer",
    "uuid": "f4a416e3-6016-4623-8ec9-d5ee105a6e27",
     ...
}</code></pre>
<p class=""><span style="font-weight: 400;">If </span><b><code>picture</code> </b><span style="font-weight: 400;">is initialized with a <strong>null</strong> value, it can be ignored in the resultant JSON as it is an optional attribute.</span></p>

<pre class=""><code class="language-json">{
    "first_name": "Uber",
    "middle_name": "null",
    "last_name": "Developer",
    "uuid": "f4a416e3-6016-4623-8ec9-d5ee105a6e27",
     ...
}</code></pre>
<h3 class=""><b>3. Required Nullable</b></h3>
<p class=""><span style="font-weight: 400;">Required Nullable attributes will always become part of the resultant JSON string as they are required. It will always be included in the JSON, whether it has a null or non-null value. </span><span style="font-weight: 400;">Let&#8217;s consider the </span><code>middle_name</code><b> </b><span style="font-weight: 400;">as a </span><strong>required nullable </strong><span style="font-weight: 400;">attribute.</span></p>
<p class=""><span style="font-weight: 400;">If </span><code>middle_name</code><b> </b><span style="font-weight: 400;">is initialized with a null value or uninitialized in the request, its JSON output will be:</span></p>

<pre class=""><code class="language-">{
   ...
    "middle_name": "Software",
    "last_name": "Developer",
    "uuid": "f4a416e3-6016-4623-8ec9-d5ee105a6e27",
   ...
}</code></pre>
<p class=""><span style="font-weight: 400;">If </span><code>middle_name</code><b> </b><span style="font-weight: 400;">is initialized with a proper value, the resultant JSON will be:</span></p>

<pre class=""><code class="language-json">{
    ...
    "middle_name": "faloola",
    "last_name": "Developer",
    "uuid": "f4a416e3-6016-4623-8ec9-d5ee105a6e27",
    ...
}</code></pre>
<h3><b>4. Required Non-Nullable</b></h3>
<p class=""><span style="font-weight: 400;">Required Non-Nullable attributes are also a </span><b>must </b><span style="font-weight: 400;">in JSON string during serialization. A null value is not allowed to be specified as <em>required</em> so it cannot be ignored. </span></p>
<p class=""><span style="font-weight: 400;">The </span><code>rider_id</code><b> </b><span style="font-weight: 400;">is a non-nullable attribute in the </span><span style="font-weight: 400;">Profile </span><span style="font-weight: 400;">schema. The null value cannot be specified in this case, and with a non-null value its resultant JSON will be:</span></p>

<pre class=""><code class="language-json">{
    "picture": "https://d1w2poirtb3as9.cloudfront.net/f3be498cb0bbf570aa3d.jpeg",
    "first_name": "Uber",
    "middle_name": "null",
    "last_name": "Developer",
    "uuid": "f4a416e3-6016-4623-8ec9-d5ee105a6e27",
    "rider_id": "8OlTlUG1TyeAQf1JiBZZdkKxuSSOUwu2IkO0Hf9d2HV52Pm25A0NvsbmbnZr85tLVi-s8CckpBK8Eq0Nke4X-no3AcSHfeVh6J5O6LiQt5LsBZDSi4qyVUdSLeYDnTtirw==",
    "email": "uberdevelopers@gmail.com",
    "mobile_verified": true,
    "promo_code": "uberd340ue"
}</code></pre>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">

<hr />

</div>
</div>
<h2 class=""><strong>Conclusion</strong></h2>
<p class=""><span style="font-weight: 400;">It is entirely up to you how you incorporate the optional and nullable properties in your API calls. It is essential to handle null reference exceptions being thrown to the end-user, to avoid any unpleasant experience with your API. Learn more about what APIMatic offers for a comprehensive <a href="https://www.apimatic.io/features/">developer experience</a> and how you can generate feature-packed <a href="https://www.apimatic.io/account/register">SDKs with your API</a> in just a few clicks. Stay tuned for more blogs that go into detail on how optional and nullable properties can be implemented in Java, C#, Python, Ruby, PHP, and TypeScript.</span></p>

</div>
</div>
</div>
</div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/using-optional-and-nullable-properties-in-api-requests/">Using Optional and Nullable Properties in API Requests</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>What’s New in APIMatic v3?</title>
		<link>/blog/whats-new-in-apimatic-v3/</link>
		
		<dc:creator><![CDATA[Nida I Zamir]]></dc:creator>
		<pubDate>Fri, 18 Jun 2021 10:56:01 +0000</pubDate>
				<category><![CDATA[API Portal]]></category>
		<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[Releases]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Api documentation]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[auto-generated SDKs]]></category>
		<category><![CDATA[Codegen]]></category>
		<category><![CDATA[Developer Portal]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=443</guid>

					<description><![CDATA[<p>With organizations going increasingly digital, it has become challenging for API providers to maintain API visibility amongst a plethora of APIs and ensure faster API adoption. This is where developer experience pivots the developer’s decision in your API’s favor. Keeping this challenge in mind, APIMatic has undergone numerous updates to get you the most out [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/whats-new-in-apimatic-v3/">What’s New in APIMatic v3?</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="443" class="elementor elementor-443">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-6d794aaf elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="6d794aaf" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-2bd1a153" data-id="2bd1a153" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-4ecb43bb elementor-widget elementor-widget-text-editor" data-id="4ecb43bb" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-444 aligncenter" src="/wp-content/uploads/2021/12/1_YOxwTEYQH2n9iAsyN5T2og-1024x512.png" alt="APIMatic v3 " width="1024" height="512"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="e1f5" class="">With organizations going increasingly digital, it has become challenging for API providers to maintain API visibility amongst a plethora of APIs and ensure faster API adoption. This is where developer experience pivots the developer’s decision in your API’s favor. Keeping this challenge in mind, APIMatic has undergone numerous updates to get you the most out of your API.</p>
<p id="c384" class="">With APIMatic v3, you can generate feature-rich and code-compliant SDKs as our flagship&nbsp;<strong>Code Generator</strong> includes new features and improvements as an overhaul. We have also completely revamped the&nbsp;<strong>API Portal</strong>&nbsp;with a more aesthetic and interactive API portal and a Markdown docs editor. Furthermore, the&nbsp;<strong>API Transformer</strong>&nbsp;now supports the much-awaited&nbsp;<code>anyOf</code>,&nbsp;<code>oneOf</code>,&nbsp;<code>not&nbsp;</code>constructs and union types and much more.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-445 aligncenter" src="/wp-content/uploads/2021/12/1_GpHWeFNx4IB2CRG1ryZVgA.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="2146" class="">Generate Robust SDKs with Overhauled Code Generator</h2>
<p id="8646" class="">The APIMatic Code Generator contains numerous updates to its feature list along with improvements in the CodeGen Engine:</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-446 aligncenter" src="/wp-content/uploads/2021/12/1_0kwDu7p6QTlVUG4YL9Idmw.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="d6de"><strong>Updated Language Versions, Dependencies, and Adherence to Coding Standards</strong></h3>
<p id="7773" class="">To ensure SDK compatibility with the maximum user codebase, the SDKs have been refactored to target minimum language and runtime versions and updated dependencies. Moreover, we have applied the latest industry-accepted <a href="https://docs.apimatic.io/generate-sdks/sdk-coding-standards">coding standards</a> in all languages to the SDKs.</p>
<h3 id="cb43" class="">Immutable Clients for Multi-Threading</h3>
<p id="8e46" class="">We have refactored our SDKs to <a href="https://docs.apimatic.io/changelog/apimatic-code-generator-v3-titan#new-immutable-clients-in-sdks">immutable clients</a>that make it easier to write network-related code dealing with concurrency, as immutable clients are thread-safe and do not require explicit synchronization or defensive copying.</p>
<h3 id="c83a" class="">Timeout and Retries on API Call Errors</h3>
<p id="ecc0" class="">All APIMatic SDKs now support handling <a href="https://docs.apimatic.io/changelog/apimatic-code-generator-v3-titan#timeout-and-automatic-retries-on-api-call-errors">timeouts and automatic retries</a> if an API call is timing out, is unreachable, or returning API call errors.</p>
<h3 id="fe34" class="">Support for XML in API Calls</h3>
<p id="3a23" class="">All SDKs now come with the added support for <a href="https://docs.apimatic.io/changelog/apimatic-code-generator-v3-titan#support-for-xml">sending and receiving XML</a>&nbsp;in the API calls. So if your API definition uses XML, it can be imported into APIMatic v3 to generate SDKs without having to worry about serializing and deserializing the XML data.</p>
<h3 id="30e8">Support for Nullable Properties in Models</h3>
<p id="247e" class="">Java and C# SDKs now <a href="https://docs.apimatic.io/changelog/apimatic-code-generator-v3-titan#nullable-properties-in-models">contain nullable properties in models</a>, so if a user does not assign any value to a property after model instance initialization, a null value will be sent in the HTTP request instead of being skipped altogether.</p>
<h3 id="1b2d" class="">More Updates to the Code Generator</h3>
<p id="d4e3" class="">Apart from these features, the APIMatic Code Generator generates SDKs that support numerous features and enhancements like deprecating endpoints, cancellable API calls, access to HTTP response data, and more.</p>
<blockquote class="wp-block-quote">
<p>For more in-depth detail on the updated features of the Code Generator, please head over to <a href="https://docs.apimatic.io/changelog/apimatic-code-generator-v3-titan">APIMatic Code Generator v3</a>.</p>
</blockquote>
<h2 id="21fd" class="">Enhance Developer Experience with Revamped API Portal</h2>
<p id="7c60" class="">The API Portal has been revamped in APIMatic v3 to make your documentation and code samples more readable and interactive, making API consumption even faster. We have also updated the Portal Editor for more flexibility in customization to the portal.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-447 aligncenter" src="/wp-content/uploads/2021/12/1_7-EKUeLckKyhjf_3f9QN2w.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="3b90" class="">Improved Aesthetics and UX</h3>
<p id="aa54" class="">Based on feedback from our customers, we updated the design of the API portal to a more modern and reader-friendly interface with new typography, layout, and UI components for a more intuitive experience.</p>
<figure id="attachment_1239" aria-describedby="caption-attachment-1239" style="width: 1890px" class="wp-caption aligncenter"><img class="wp-image-1239 size-full" src="/wp-content/uploads/2021/12/portal.gif" alt="Revamped API Portal in APIMatic v3" width="1890" height="931"><figcaption id="caption-attachment-1239" class="wp-caption-text">Revamped API Portal in APIMatic v3</figcaption></figure>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large"></figure>
</div>
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="6333" class="">Merged API Explorer (API Playground)</h3>
<p id="9472" class="">We have merged the endpoint request documentation with the API Console into a unified <a href="https://docs.apimatic.io/publish-apis/api-console">API Explorer</a>, also called the “API Playground”, that allows your users to explore the endpoint documentation and edit the request data in one place.</p>
<h3 id="e773" class="">Updated Portal Editor</h3>
<p id="ecec" class="">The Portal Editor for customizing the API portal has been remodeled to make it as easy to use as possible while adding a WYSIWYG Markdown docs editor for custom guides. You can customize <a href="https://docs.apimatic.io/publish-apis/customizing-your-portal">portal settings</a> and version-specific <a href="https://docs.apimatic.io/publish-apis/customize-docs">documentation settings</a>, and also include auto-generated documentation for endpoints and models.</p>
<figure id="attachment_1240" aria-describedby="caption-attachment-1240" style="width: 1890px" class="wp-caption aligncenter"><img class="wp-image-1240 size-full" src="/wp-content/uploads/2021/12/portal-editor-1.gif" alt="Revamped Portal Editor in APIMatic v3" width="1890" height="931"><figcaption id="caption-attachment-1240" class="wp-caption-text">Revamped Portal Editor in APIMatic v3</figcaption></figure>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large"></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="a325" class="">More Features in the v3 API Portal</h3>
<p id="b6fe" class="">The API Portal contains more fun features like pop-out code samples, version-specific documentation, customizable table-of-contents, and much more!</p>
<blockquote class="wp-block-quote">
<p>For more information about what APIMatic v3 offers for the API portal in detail, check out <a href="https://docs.apimatic.io/changelog/releasing-apimatic-v3-revamped-api-portal">Revamped API Portal in APIMatic v3</a>.</p>
</blockquote>
<h2 id="3616" class="">Polish Your API Definition with Upgraded API Transformer</h2>
<p id="1533">The API Transformer includes various new features and improvements, so your API definitions can make the most out of APIMatic V3.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-450 aligncenter" src="/wp-content/uploads/2021/12/1_dkZodYI-qBbeus6CoJ7l5g.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="c5a8">Faster OpenAPI v2.0 and v3.0 Imports</h3>
<p id="d2ba" class="">The OpenAPI/Swagger 2.0 and 3.0 import has been completely revamped and impacts your SDK and Docs/Portal generation and API Transformer output. The revamp includes faster imports, improved support for&nbsp;<code>$refs</code> , improved error messages, changes to null value handling, and much more.</p>
<h3 id="4bd6" class="">Support for anyOf, oneOf, not Constructs and Union Types</h3>
<p id="c39a" class="">Probably one of the most requested support for&nbsp;<code>anyOf</code>,&nbsp;<code>oneOf&nbsp;</code>and&nbsp;<code>not&nbsp;</code>constructs is now available in all major API specification formats including OpenAPI, JSON Schema, API Blueprint. Support for RAML and XML schema “union” types has also been added.</p>
<h3 id="23c6" class="">What’s More in the v3 API Transformer?</h3>
<p id="2a1d" class="">The API Transformer is packed with more features and settings like new configuration settings, more specification extensions for OAS and RAML annotations, and so on.</p>
<blockquote class="wp-block-quote">
<p>Read more about what the&nbsp;<a href="https://docs.apimatic.io/changelog/releasing-apimatic-v3-revamped-transformer">revamped API Transformer offers</a>&nbsp;in APIMatic v3.</p>
</blockquote>
<h2 id="2c4a" class="">How do I Migrate to APIMatic v3? <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/2708.png" alt="✈" class="wp-smiley" style="height: 1em; max-height: 1em;" /></h2>
<p id="6280" class="">Migrating to APIMatic v3 is easy. All your data is preserved during migration so you don’t have to worry about any data being lost or discarded. We have also ensured that everything remains backward compatible so if for any reason you revert to v2, no data is lost.</p>
<blockquote class="wp-block-quote">
<p>For more detail, please refer to our guide on&nbsp;<a href="https://docs.apimatic.io/account-management/migrate-to-v3">how to migrate to APIMatic v3</a>, or contact&nbsp;<a href="https://www.apimatic.io/contact/">support</a>.</p>
</blockquote>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/whats-new-in-apimatic-v3/">What’s New in APIMatic v3?</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>The Whys and Hows of Exposing a SOAP Service Using Your REST API</title>
		<link>/blog/the-whys-and-hows-of-exposing-a-soap-service-using-your-rest-api/</link>
		
		<dc:creator><![CDATA[Faria Rehman]]></dc:creator>
		<pubDate>Mon, 22 Jun 2020 13:12:15 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[REST APIs]]></category>
		<category><![CDATA[SOAP]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[Rest]]></category>
		<category><![CDATA[Soap]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=1183</guid>

					<description><![CDATA[<p>This blog is the fifth part of the series called “API Transformer Recipes”. The series aims to highlight numerous ways in which developers can integrate&#160;API Transformer&#160;into their workflow in order to gain access to a wide range of tools and frameworks. Hopefully, it should eliminate any assumptions that they might have about being restricted to [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/the-whys-and-hows-of-exposing-a-soap-service-using-your-rest-api/">The Whys and Hows of Exposing a SOAP Service Using Your REST API</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1183" class="elementor elementor-1183">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-29e95da2 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="29e95da2" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-76519aca" data-id="76519aca" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-6585503a elementor-widget elementor-widget-text-editor" data-id="6585503a" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12"><!-- wp:group -->
<div class="wp-block-group">
<div class="wp-block-group__inner-container"><!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column" style="flex-basis: 100%;"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_2SKA02w5_032Y4Yg5SEvTw-1024x682.png" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:group -->
<div class="wp-block-group">
<div class="wp-block-group__inner-container"><!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column" style="flex-basis: 100%;"><!-- wp:paragraph -->
<p class=""><em>This blog is the fifth part of the series called “API Transformer Recipes”. The series aims to highlight numerous ways in which developers can integrate&nbsp;</em><a href="https://www.apimatic.io/transformer"><em>API Transformer</em></a><em>&nbsp;into their workflow in order to gain access to a wide range of tools and frameworks. Hopefully, it should eliminate any assumptions that they might have about being restricted to a particular set of tools just because they use a certain API specification format.</em></p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns --></div>
</div>
<!-- /wp:group -->

<!-- wp:group -->
<div class="wp-block-group">
<div class="wp-block-group__inner-container"><!-- wp:paragraph -->
<p id="3e6f" class="">You can find numerous debates out there on the topic of “SOAP vs REST” including those that believe&nbsp; REST is the new SOAP.&nbsp;Depending on your service and its target consumers, it might actually be a good idea (albeit rarely) to provide that service in the form of both SOAP and REST APIs. Sounds like an awful load of work? Perhaps not. Let’s dig deeper.</p>
<!-- /wp:paragraph --></div>
</div>
<!-- /wp:group -->

<!-- wp:group -->
<div class="wp-block-group">
<div class="wp-block-group__inner-container"><!-- wp:paragraph -->
<p id="3dcb" class="">You can also check out one of my earlier blogs on a similar topic where I shared some tips on<a href="https://apimatic.io/blog/2018/12/api-transformer-recipes-facilitating-migration-from-soap-to-rest">migrating your SOAP APIs to REST</a>.</p>
<!-- /wp:paragraph --></div>
</div>
<!-- /wp:group -->

<!-- wp:paragraph -->
<h2 class=""><strong>Is REST not enough?</strong></h2>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="e560" class="">A lot of businesses today have adapted the RESTful approach for their services as it provides a more flexible, lightweight, and efficient solution as compared to the other available alternatives. While this holds true for most cases, there can be times when you’ll find your clients (especially enterprises) seeking a SOAP service to integrate with. Some of the reasons for that can be:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="">
<li>Being slow adopters, enterprise clients might be reluctant to shift to REST since it is still a relatively newer approach to things and differs greatly from the rigid contract-based approach used by SOAP.</li>
<li>Tools and infrastructure used by enterprise clients may not yet support REST well.</li>
</ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p id="0855">Keeping this in mind, it may be useful to expose your REST service partially/completely in the form of a SOAP service as well.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h2 class=""><strong>Real-life Use Cases</strong></h2>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="d89b" class=""><a href="https://www.salesforce.com/in/?ir=1">Salesforce</a>&nbsp;provides some APIs as both SOAP and REST allowing developers to integrate in a way that suits them best e.g. check out their&nbsp;<a href="https://developer.salesforce.com/docs/atlas.en-us.api_tooling.meta/api_tooling/intro_api_tooling.htm">Tooling API</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="7b09" class="">One of our clients at APIMatic,&nbsp;<a href="https://www.cdq.ch/">CDQ AG</a>, is a data centric company. Their RESTful services provide a link between their cloud services and business applications. To facilitate smooth integration for enterprise customers, whose infrastructure does not support REST well, they have exposed the same APIs as SOAP services/WSDL interfaces too. This WSDL serves as a contract for both parties. To keep their REST and SOAP APIs in sync, they have integrated&nbsp;<a href="https://www.apimatic.io/transformer/">API Transformer</a>&nbsp;into their workflow which helps generate a new version of the WSDL for every change in their REST API (more on this later). With the newer WSDL, they update their SOAP service accordingly and in order to access the latest changes their service consumers also eventually update their applications based on this latest WSDL.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h3 class=""><strong>SOAP and WSDL</strong></h3>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="076c" class="">While it is not mandatory for every SOAP service to have a WSDL file associated with it, it is widely used as a contract between the SOAP service provider and its consumer. This file provides a complete definition of how the service works, the various operations involved and other fine grain details of all elements and attributes involved. Many tools exist that lets you generate method stubs in almost any language if you have the WSDL file with you.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h3><strong>From REST to SOAP, Using API Transformer</strong></h3>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="1af0" class="">One of the less obvious but distinctive features of&nbsp;<a href="https://www.apimatic.io/transformer/">API Transformer</a>&nbsp;is its ability to convert REST APIs to SOAP by generating WSDL files from popular formats used to describe REST APIs like OpenAPI/Swagger, RAML, API Blueprint, etc. We’ve seen, on average, over 50 unique transformations (unique per user) to WSDL every month for the past three years since this feature was launched.</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<figure style="width: 700px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2021/12/1__B0qfzhhuvta5UoEBWqIWw.png" alt="API Transformer WSDL Export Trend (Jun 2017 — Jun 2020)" width="700" height="292"><figcaption class="wp-caption-text">API Transformer WSDL Export Trend (Jun 2017 — Jun 2020)</figcaption></figure>
<figcaption></figcaption>
Note, however, that the REST APIs spoken of here include not only APIs that completely follow REST architecture style but also those that follow more of a hybrid approach between REST and RPC style.</figure>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h2><strong>Generating WSDL from REST &#8212; How does this work?</strong></h2>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="7341" class="">I went ahead and created a sample OpenAPI&nbsp;<code>v3.0</code>&nbsp;file which I then converted to WSDL using&nbsp;<a href="https://www.apimatic.io/transformer/">API Transformer</a>. Using these files, I will now show you the inner workings of the conversion below. If you are interested to see the complete files, you can find them<a href="https://github.com/fariadev22/api-transformer-recipes/tree/master/Exposing%20a%20SOAP%20API%20Using%20REST">here</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h3 class=""><strong>1. API Information</strong></h3>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="14f8">During the conversion, details related to the API like its identifying title, description and server URLs are extracted from the OpenAPI file and placed in the relevant service metadata of WSDL.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p class=""><strong><em>OpenAPI:</em></strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<pre class=""><code class="language-json">openapi: 3.0.0
info:
  title: HelloService
  description: Swagger file for generating WSDL
version: &#039;1.0&#039;
servers:
  - url: https://www.example.com/SayHello/</code></pre>
<!-- /wp:paragraph -->

<!-- wp:paragraph --><strong><em>WSDL:</em></strong> <!-- /wp:paragraph -->

<!-- wp:paragraph -->
<pre class=""><code class="language-xml">&lt;service name=&quot;HelloService&quot;&gt;
  &lt;documentation&gt;Swagger file for generating WSDL&lt;/documentation&gt;
  &lt;port name=&quot;default_Port&quot; binding=&quot;wsdl:HelloService_Binding&quot;&gt;
    &lt;soap:address location=&quot;https://www.example.com/SayHello/&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; /&gt;
  &lt;/port&gt;
&lt;/service&gt;</code></pre>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h3 class=""><strong>2. OpenAPI Paths</strong></h3>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p class="">Generally, the relative paths in OpenAPI help identify RESTful resources and associated with each of these paths are the various operations possible on these resources. However, these paths have no significance in SOAP/WSDL because the concept of resources is restricted to RESTful APIs only. Only their associated operations are converted to WSDL operations.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h3 class=""><strong>3. OpenAPI Operations vs WSDL Operations</strong></h3>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->WSDL operations are defined in an abstract way inside the port types and their concrete details are provided in the bindings. Information from OpenAPI operations is loaded into both these port types and binding operations. <!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p class=""><em><strong>OpenAPI</strong>:</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<pre class=""><code class="language-json">/message:
   get:
     tags:
      - Messages
     description: View message entry
     operationId: GetMessage
     parameters:
       - name: messageId
         in: query
         required: true
         schema:
           type: string
     responses:
       200:
         description: Message object against the id, if found
         content:
           application/json:
             schema:
               $ref: &#039;#/components/schemas/Message&#039;
       404:
         description: No messages found
         content:
           application/json:
             schema:
               $ref: &#039;#/components/schemas/Error&#039;</code></pre>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="4899" class=""><em><strong>WSDL</strong>:</em></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-xml">&lt;portType name=&quot;HelloService_PortType&quot;&gt;
  &lt;operation name=&quot;GET_GetMessage&quot;&gt;
    &lt;documentation&gt;View message entry&lt;/documentation&gt;
    &lt;input message=&quot;wsdl:GET_GetMessage_InputMessage&quot; /&gt;
    &lt;output message=&quot;wsdl:GET_GetMessage_OutputMessage&quot;&gt;
        &lt;documentation&gt;Message object against the id, if found&lt;/documentation&gt;
    &lt;/output&gt;
    &lt;fault name=&quot;GET_GetMessage_404&quot; message=&quot;wsdl:GET_GetMessage_404&quot;&gt;
        &lt;documentation&gt;No messages found&lt;/documentation&gt;
    &lt;/fault&gt;
    &lt;/operation&gt;
&lt;/portType&gt;
&lt;binding name=&quot;HelloService_Binding&quot; type=&quot;wsdl:HelloService_PortType&quot;&gt;
  &lt;soap:binding transport=&quot;http://schemas.xmlsoap.org/soap/http&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; /&gt;
  &lt;operation name=&quot;GET_GetMessage&quot;&gt;
    &lt;soap:operation soapAction=&quot;GET_GetMessage&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; /&gt;
    &lt;input&gt;
      &lt;soap:body use=&quot;literal&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; /&gt;
    &lt;/input&gt;
    &lt;output&gt;
      &lt;soap:body use=&quot;literal&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; /&gt;
    &lt;/output&gt;
    &lt;fault name=&quot;GET_GetMessage_404&quot;&gt;
      &lt;soap:fault use=&quot;literal&quot; name=&quot;GET_GetMessage_404&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; /&gt;
    &lt;/fault&gt;
  &lt;/operation&gt;
&lt;/binding&gt;</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<h4 id="1625"><strong>HTTP Verb</strong></h4>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="53c0" class="">An OpenAPI operation has a distinct HTTP verb associated with it e.g.&nbsp;<code>GET</code>,&nbsp;<code>POST</code>,&nbsp;<code>DELETE</code>, etc. indicating the type of functionality that is expected to be performed on the resource. All OpenAPI operations are converted to&nbsp;<code>POST</code>&nbsp;methods for SOAP/WSDL conversion.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h4 id="722f" class=""><strong>WSDL Operation Name</strong></h4>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="2f34" class="">The operation name for WSDL is generated by combining the HTTP verb and operation id/name from the OpenAPI operation and serves as a unique identifier.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h4 id="ee27"><strong>Request Parameters</strong></h4>
<!-- /wp:paragraph -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large is-resized">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/0_WZXzYl_m6KZQWtpE-1.jpg" alt="" width="500" height="505"></p>
<figcaption>Input parameters are wrapped and sent in SOAP body</figcaption>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph -->
<p id="4d93">All associated request parameters of an OpenAPI operation are wrapped in a single new input type and sent in the form of an&nbsp;<strong>input message</strong>&nbsp;in the SOAP body. The wrapper input type’s name is generated by combining the original HTTP verb of the operation with the operation’s id and a postfix indicating it as the input type.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="cd0f" class="">Unlike JSON, a root XML element cannot be an array. So even if only a single parameter is involved, a wrapper type helps preserve all type related information of it including array representations that would otherwise be lost.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->In the WSDL example above, note the use of the&nbsp;<code>message</code>&nbsp;attribute in&nbsp;<code class="">&lt;input&gt;</code>&nbsp;that provides a link to the concrete&nbsp;<code>&lt;message&gt;</code>&nbsp;definition in WSDL. <!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<h4 id="3f92"><strong>Operation Responses</strong></h4>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="7661">The first success response definition (of the range 2XX) is also wrapped in a new output type which defines the body of the&nbsp;<strong>output message</strong>&nbsp;received. The type name is generated in a similar fashion as that of the input type except for the postfix which indicates it as an output type.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="5e1e" class="">Error responses of the range 400 and above are considered SOAP&nbsp;<strong>faults</strong>. Note, however, that response code has no significance in WSDL.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="6fa3">Again, note the use of the&nbsp;<code>message</code>&nbsp;attribute in&nbsp;<code>&lt;output&gt;</code>&nbsp;and&nbsp;<code>&lt;fault&gt;</code>&nbsp;that provides a link to the concrete&nbsp;<code>&lt;message&gt;</code>&nbsp;definition in WSDL.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h4 id="0c7e"><strong>SOAP Binding Transport Protocol</strong></h4>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="739a" class="">SOAP binding transport protocol is assumed to be HTTP for the conversion. Since SOAP supports other transport protocols as well, this can be modified manually if required.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h3><strong>4. WSDL Messages</strong></h3>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="ae44" class="">WSDL messages defined using the&nbsp;<code>&lt;message&gt;</code>&nbsp;tag help describe the data being exchanged between the service provider and the client. Request messages are associated with the&nbsp;<code>&lt;input&gt;</code>&nbsp;tag while response messages are associated with the&nbsp;<code>&lt;output&gt;</code>&nbsp;or&nbsp;<code>&lt;fault&gt;</code>&nbsp;tag. Different parts of a message define its components and help provide a link to their concrete type schema definitions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="796f" class=""><em><strong>WSDL</strong>:</em></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-xml">&lt;message name=&quot;GET_GetMessage_InputMessage&quot;&gt;
  &lt;part name=&quot;GET_GetMessage_InputMessage&quot; element=&quot;schemas:GET_GetMessage_InputMessage&quot; /&gt;
&lt;/message&gt;
&lt;message name=&quot;GET_GetMessage_OutputMessage&quot;&gt;
  &lt;part name=&quot;GET_GetMessage_OutputMessage&quot; element=&quot;schemas:GET_GetMessage_OutputMessage&quot; /&gt;
&lt;/message&gt;
&lt;message name=&quot;GET_GetMessage_404&quot;&gt;
  &lt;part name=&quot;GET_GetMessage_404&quot; element=&quot;schemas:GET_GetMessage_404&quot; /&gt;
&lt;/message&gt;</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<h3><strong>5. OpenAPI Schema and XML Schema</strong></h3>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="5503">Schema definitions from OpenAPI are added to the XML schema(s) in WSDL&nbsp;<code>&lt;types&gt;</code>&nbsp;section. These not only include the types defined globally in OpenAPI&nbsp;<code>schema</code>&nbsp;definitions but also additional types that represent the wrapped request/response messages.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="490a" class="">In OpenAPI, you can fine-tune your schema definitions to represent XML types by adding<a href="https://swagger.io/docs/specification/data-models/representing-xml/">XML metadata</a>&nbsp;like information about namespace, prefix, XML node name, whether the property is an attribute or not, etc. Let’s have a look at how an OpenAPI schema defined with these attributes translates to a type in WSDL during the conversion.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="62f3" class=""><em><strong>OpenAPI</strong>:</em></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-json">Message:
  title: Message
  required:
    - from
    - to
    - text
    - date
  type: object
  properties:
    from:
      type: string
    to:
      type: string
    text:
      type: string
    date:
      type: string
      format: date-time
    id:
      type: string
      xml:
        name: id
        attribute: true
  xml:
    name: MessageEntry
    namespace: https://www.example.com/message
    prefix: m</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p id="f2c3"><em>WSDL:</em></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-xml">&lt;types&gt;
  &lt;xs:schema xmlns:tns=&quot;https://www.example.com/message&quot; targetNamespace=&quot;https://www.example.com/message&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;
    &lt;xs:complexType name=&quot;MessageEntry&quot;&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element minOccurs=&quot;1&quot; name=&quot;from&quot; type=&quot;xs:string&quot; /&gt;
        &lt;xs:element minOccurs=&quot;1&quot; name=&quot;to&quot; type=&quot;xs:string&quot; /&gt;
        &lt;xs:element minOccurs=&quot;1&quot; name=&quot;text&quot; type=&quot;xs:string&quot; /&gt;
        &lt;xs:element minOccurs=&quot;1&quot; name=&quot;date&quot; type=&quot;xs:dateTime&quot; /&gt;
      &lt;/xs:sequence&gt;
      &lt;xs:attribute name=&quot;id&quot; type=&quot;xs:string&quot; /&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:schema&gt;
&lt;/types&gt;</code></pre>
<!-- /wp:preformatted -->

<!-- wp:list -->
<ul class="">
<li>The XML name&nbsp;<code>MessageEntry</code>&nbsp;specified in the OpenAPI schema overrides the schema’s original name&nbsp;<code>Message</code>&nbsp;and is used instead, when creating the XML schema type in WSDL.</li>
<li>The boolean&nbsp;<code>attribute</code>&nbsp;flag in property&nbsp;<code>id</code>&nbsp;helped create an XML attribute of the same name as can be seen from the above example.</li>
<li>Furthermore, notice how in the example above, the&nbsp;<code>namespace</code>&nbsp;information from the OpenAPI schema helped us place the type definition in&nbsp;<code>&lt;schema&gt;</code>&nbsp;of the same namespace in WSDL. The prefix assigned to this namespace&nbsp;<code>m</code>&nbsp;is also preserved in the root tag of WSDL.</li>
</ul>
<!-- /wp:list -->

<!-- wp:preformatted -->
<pre><code class="language-xml">&lt;definitions 
  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; 
  xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; 
  xmlns:schemas=&quot;https://www.example.com/SayHello/schemas&quot; 
  xmlns:wsdl=&quot;https://www.example.com/SayHello/wsdl&quot; 
  xmlns:m=&quot;https://www.example.com/message&quot; 
  xmlns:e=&quot;https://www.example.com/error&quot; 
  targetNamespace=&quot;https://www.example.com/SayHello/wsdl&quot; xmlns=&quot;http://schemas.xmlsoap.org/wsdl/&quot;&gt;</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p id="693a" class="">Let’s now see how XML metadata specified in request/response schema translate to a type in WSDL:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="d63d" class=""><em><strong>OpenAPI</strong>:</em></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-json">responses:
  200:
    description: List of all message objects
    content:
      application/json:
        schema:
          type: array
          items:
            $ref: &#039;#/components/schemas/Message&#039;
          description: List of all message objects
          xml:
            name: Messages
            wrapped: true</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p id="c37b" class=""><em><strong>WSDL</strong>:</em></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-xml">&lt;types&gt;
  &lt;xs:schema xmlns:tns=&quot;https://www.example.com/SayHello/schemas&quot; targetNamespace=&quot;https://www.example.com/SayHello/schemas&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;  
    &lt;xs:complexType name=&quot;GET_GetMessages_OutputMessage&quot;&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name=&quot;Messages&quot;&gt;
          &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
              &lt;xs:element minOccurs=&quot;1&quot; maxOccurs=&quot;unbounded&quot; name=&quot;response&quot; type=&quot;m:MessageEntry&quot;&gt;
                &lt;xs:annotation&gt;
                  &lt;xs:documentation&gt;List of all message objects&lt;/xs:documentation&gt;
                &lt;/xs:annotation&gt;
              &lt;/xs:element&gt;
            &lt;/xs:sequence&gt;
          &lt;/xs:complexType&gt;
        &lt;/xs:element&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:schema&gt;
&lt;/types&gt;</code></pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<h2 id="b148">You have the WSDL — What next?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p id="6f9f" class="">Having a WSDL basically means, you have a skeleton of what your SOAP service will look like. Various tools and frameworks can then help you accelerate actual implementation of the SOAP service by generating stubs. However, before you start implementing, you need to decide whether you plan to keep the SOAP service independent from your existing REST service or not. The former case will have bigger maintenance cost and it will be difficult to keep both services in sync when changes occur. The recommended way is to implement this SOAP service more as a proxy service that handles SOAP payloads but converts them to those compatible with your existing REST service. This way your actual service will still be the REST service while the SOAP service will help facilitate the smaller chunk of your customers like enterprises. What option you pick is something you are the best judge of.</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image">
<figure style="width: 700px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2021/12/1_zo53IiiN0ricDCXce6IvNw-2.png" alt="From REST to SOAP, using API Transformer" width="700" height="466"><figcaption class="wp-caption-text">From REST to SOAP, using API Transformer</figcaption></figure>
<figcaption></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2 id="0df0" class="">Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p id="1aae" class="">REST or SOAP or both? I hope this article offered some clarification in this regard. Ultimately the choice really depends on your service and your target customers. Once you’ve made the decision, there are various tools like&nbsp;<a href="https://www.apimatic.io/transformer/" target="_blank" rel="noreferrer noopener">API Transformer</a>&nbsp;available to help you get started.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="4e4f" class="">Continue reading more API Transformer Recipes:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="">
<li><a href="https://apimatic.io/blog/2018/11/api-transformer-recipes-enabling-postmans-team-sharing-features-for-openapi-users" target="_blank" rel="noreferrer noopener">Enabling Postman’s Team Sharing Features for OpenAPI Users</a></li>
<li><a href="https://apimatic.io/blog/2018/12/api-transformer-recipes-facilitating-migration-from-soap-to-rest" target="_blank" rel="noreferrer noopener">Facilitating Migration from SOAP to REST</a></li>
<li><a href="https://apimatic.io/blog/2019/01/api-transformer-recipes-opening-ways-into-ibm-api-connect" target="_blank" rel="noreferrer noopener">Opening ways into IBM API Connect</a></li>
<li><a href="https://apimatic.io/blog/2019/07/moving-to-graphql-from-soap-or-rest" target="_blank" rel="noreferrer noopener">Moving to GraphQL from SOAP or REST</a></li>
</ul>
<!-- /wp:list --></div>
</div>
<!-- /wp:group --></div>
</div>
</div>
</div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/the-whys-and-hows-of-exposing-a-soap-service-using-your-rest-api/">The Whys and Hows of Exposing a SOAP Service Using Your REST API</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>APIMatic 2020: New Year, New Place, New Passion</title>
		<link>/blog/apimatic-2020-new-year-new-place-new-passion/</link>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Fri, 07 Feb 2020 11:02:52 +0000</pubDate>
				<category><![CDATA[APIMATIC]]></category>
		<category><![CDATA[Company]]></category>
		<category><![CDATA[Apimatic]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=404</guid>

					<description><![CDATA[<p>January, 2020 was an important month for team APIMatic as we: Completed another year of APIMatic in Pakistan, leading to our 4 year anniversary Moved to a new office space For more than a year, our team had been super excited to move to the new space. Everyone was flowing with ideas, enthusiasm and zeal, [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/apimatic-2020-new-year-new-place-new-passion/">APIMatic 2020: New Year, New Place, New Passion</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="404" class="elementor elementor-404">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-707ddb1a elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="707ddb1a" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-6bb7c72b" data-id="6bb7c72b" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-3a038600 elementor-widget elementor-widget-text-editor" data-id="3a038600" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="c782" class="">January, 2020 was an important month for team APIMatic as we:</p>
<ul class="">
<li>Completed another year of APIMatic in Pakistan, leading to our 4 year anniversary</li>
<li>Moved to a new office space</li>
</ul>
<p id="ecb7">For more than a year, our team had been super excited to move to the new space. Everyone was flowing with ideas, enthusiasm and zeal, all of which we got translated to a well rounded design that suited our entire team.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1_3XSdPTC04WZ7IOnv2Z0o9g-1024x682.jpg" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1_BVp-YrrxbNd2ExL5fUXgfw-1024x683.jpg" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="644c">Since our teams work in such close collaboration with each other, we went for an open-floor plan. And the energy on the floor is simply amazing. Everyone is buzzing with ideas, brainstorming, helping each other out to solve problems and come with solutions, working as one big unit.</p>
<p id="9652">At APIMatic we have always put people and human experience at the center of everything and got the space designed to reflect those values. There is something for everyone, silent corners, calling pods, rec rooms, huddle area, kitchenette, sleep bunkers you name it.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1_RHrYDENGs2KJYgfKN7hXyg-1024x683.png" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1_7H6NeGl9OlHwgeNyHkoNoQ-1024x682.png" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="0941" class="">A Day for Families</h2>
<p id="8ea1" class="">So an office that amazing and that too coinciding with our 4th birthday? We could not let that go and threw a big party to celebrate it. We dedicated the day to our families, who have been instrumental in our success from day one, and who share the same dream and same passion with us. It was great to have them around while we looked back at our achievements and learnings of the past, and the exciting plans of the future.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1_jwjTbOcGHP6AxaXG_TttqQ-1024x682.jpg" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1_DCVKOph2WATDMIx2LzFdIw-1024x682.jpg" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1_j5_D_O3i5mrm21RzVvLZIg-1024x682.jpg" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="0fa5">Words of Wisdom</h2>
<p id="ec15">At the event we were joined by some big names including Kalsoom Lakhani, founder and CEO at i2i Ventures. She delivered an excellent speech encouraging entrepreneurs from Pakistan to go change the world and perceptions out there for once and forever.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1_MDpmaYUvHla2bfQU0mpRHA-1024x682.jpg" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1_z_SStmZur6Z2YiLxjE4A_A-1024x682.jpg" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1_QOep8kk6HdZhxGLYcJES1w-1024x682.jpg" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">DG R&amp;D from HEC, Pakistan, Dr. Zain ul Abideen, talked about the Higher Education initiatives on top of funding degrees to facilitate more inventors, something which was applauded by all.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1_-kULbkWOLgmkhPpN8CN5PA-1024x682.jpg" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1_meXyxHUIqo0wc89TaYzaXw-1024x682.jpg" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1_AV9p7GdqqFaItK5IH0HpZg-1024x682.jpg" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p>Mr Muhammad Ali Muhammad, the Head of Research at NUST, was delighted by the promise the youth of Pakistan is showing, applying their takeaways from academia to markets and promised to kickstart more initiatives that would nourish all such aspirants.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1__wBjz4gQL9pM3dGK26SrcQ-1024x682.jpg" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1_J1QwVvVt8QZ6UKjjeEooBA-1024x682.jpg" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1_nzit-90ti-MoSye8QnneVw-1024x682.jpg" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="b7e6" class="">Our VP of Business and Strategy, Ameer Hassan, shed light on the outstanding statistics of 2019, while Obaidullah Khuwaja, Senior Product Manager at Polly talked about the importance of innovation, product management and making the right decisions when it comes to scaling a product. At the end, our founder Adeel Ali talked about his drive behind it all, and the passion of going from being a tool user to a tool creator. He thanked HEC Pakistan for the scholarship which laid the basis of this multinational venture. Adeel concluded by elucidating the potential impact that startups like APIMatic could create by increasing exports and creating skilled resources in the country.</p>
<h2 id="5369">The Inauguration &amp; Annual Awards</h2>
<p id="4e7b" class="">This was followed by the inauguration of the new office, where after the guests were given the tour of your office space followed by refreshments.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_hfCURpwgtkk7pHNSMMtpIg.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1_lR3RbgSVFJr-TyT0KokT6A-1024x682.jpg" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1_fzdEDJfNXqP7Y-24q7NKNQ-1024x682.jpg" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">The event concluded with annual awards for the people who have been here for us for the past 4 years, and those who had a great 2019 with APIMatic, a tradition that takes place every year at our anniversaries.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1_4PI3lqgQuJYEXvy_su-RwQ-1024x682.jpg" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1_wnI42O7DLRduSy4PQEvOsQ-1024x682.jpg" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1_N5N01i0zSAD1LwKqUDdZRw-1024x683.jpg" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1_B6iQVsOQARga2285_9tHJQ-1024x682.jpg" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1_PTxj1YpCzGHAf4ataRu1MA-1024x683.png" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1_MKb45rRuWlOG0FUcW0EPXw-1024x682.jpg" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1_Q6C17eldHxaAmJPx4PfcEA-1024x682.jpg" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1_9LDHyH7BxyqmihSkt2Gdjg-1-1024x687.png" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1_pJhYjjDFZ0G8pVgcSEFG3A-1024x682.png" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="9c4b">As we head into 2020, as a team are more excited than ever to unlock more opportunities, explore more horizons and grow at unprecedented rates, outdoing our performance of the year before.</p>
<p id="92f4" class="">Think you can help us achieve even more? Head on to our&nbsp;<a href="https://www.apimatic.io/careers/">Careers Page</a> and apply away to a position that suits you best. We are hiring!</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/apimatic-2020-new-year-new-place-new-passion/">APIMatic 2020: New Year, New Place, New Passion</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Moving to GraphQL from SOAP or REST</title>
		<link>/blog/moving-to-graphql-from-soap-or-rest/</link>
		
		<dc:creator><![CDATA[Faria Rehman]]></dc:creator>
		<pubDate>Fri, 12 Jul 2019 11:27:02 +0000</pubDate>
				<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[Blog]]></category>
		<category><![CDATA[REST APIs]]></category>
		<category><![CDATA[SOAP]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[GraphQL]]></category>
		<category><![CDATA[Graphql Schema]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=624</guid>

					<description><![CDATA[<p>This blog is the fourth part of the series called “API Transformer Recipes”. The series aims to highlight numerous ways in which developers can integrate&#160;API Transformer into their workflow in order to gain access to a wide range of tools and frameworks. Hopefully, it will help eliminate any assumptions that they have about being restricted [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/moving-to-graphql-from-soap-or-rest/">Moving to GraphQL from SOAP or REST</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="624" class="elementor elementor-624">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-5fc28771 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="5fc28771" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-1d7582c7" data-id="1d7582c7" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-4f627216 elementor-widget elementor-widget-text-editor" data-id="4f627216" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-625" src="/wp-content/uploads/2021/12/1_R4yFQi_9PINp_LHuwRsVag-1024x512.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="e10f" class=""><em>This blog is the fourth part of the series called “API Transformer Recipes”. The series aims to highlight numerous ways in which developers can integrate&nbsp;</em><a href="https://www.apimatic.io/transformer"><em>API Transformer</em></a><em> into their workflow in order to gain access to a wide range of tools and frameworks. Hopefully, it will help eliminate any assumptions that they have about being restricted to a particular set of tools just because they use a certain API specification format.&nbsp;</em></p>
<h2 id="8e77" class="">Announcing support for GraphQL Schema</h2>
<p id="4d39" class="">Oh yes, you heard it right. You can now&nbsp;<a href="https://docs.apimatic.io/changelog/support-for-exporting-graphql-schema-files-now-available/">export GraphQL Schema from APIMatic</a>&nbsp;using&nbsp; API Transformer! Previously, we provided our users means of&nbsp;<a href="https://blog.apimatic.io/api-transformer-recipes-facilitating-migration-from-soap-to-rest-72b8248432d8">migrating from SOAP to REST</a>, and now also aim to facilitate those SOAP/REST users looking to migrate to GraphQL.</p>
<p id="c99b" class="">Why GraphQL, you wonder? Without going into details, GraphQL is known for being simpler, faster and efficient allowing users to fetch exactly the data they need. Many strongly believe that GraphQL is the future of APIs. So if you are one of them and are considering moving to GraphQL, read on.</p>
<p id="2a57" class="">Our support for GraphQL schema is currently in beta so we are open to any feedback/suggestions that you might have.</p>
<h2 id="512e" class="">Role of GraphQL Schema</h2>
<p id="7f3a" class="">GraphQL schemas for a service are defined using&nbsp;<a href="https://graphql.org/learn/schema/">GraphQL SDL</a>&nbsp;(schema definition language) having a pretty simple syntax for defining various components like types, queries, mutations etc. We’ll take a look at some examples later in this blog.</p>
<p id="50c9">A GraphQL schema is at the core of any GraphQL server implementation. It describes the functionality available to the client applications that connect to it. So having this schema file will serve as a key starting point for migrating your API to GraphQL. You can then easily generate server code, resolver signatures, etc. from it using various tools available out there.</p>
<h2 id="109f">Export GraphQL Schema Files with API Transformer</h2>
<p id="d41a" class="">Bring your API files and export them to GraphQL schema using&nbsp;<a href="https://www.apimatic.io/transformer">API Transformer</a>. All major input formats (e.g. OpenAPI, RAML, API Blueprint, etc.) are supported.</p>
<p id="5919">The following features of the schema are supported:</p>
<ul class="">
<li>Object types</li>
<li>Scalar and Enumeration types</li>
<li>Input types</li>
<li>Arguments</li>
<li>Queries</li>
<li>Mutations</li>
<li>Lists and Non-null fields</li>
</ul>
<p id="8a1e" class="">GraphQL itself does not impose any strict naming conventions other than a list of allowed characters mentioned in their&nbsp;<a href="https://graphql.github.io/graphql-spec/June2018/#sec-Names">spec</a>. However, keeping in mind some of the best practices highlighted for&nbsp;<a href="https://graphqlmastery.com/blog/graphql-best-practices-for-graphql-schema-design">GraphQL schema design</a>,&nbsp;<a href="https://blog.apollographql.com/designing-graphql-mutations-e09de826ed97">mutations</a>&nbsp;and&nbsp;<a href="https://graphqlmastery.com/blog/how-to-use-graphql-enum-type-and-its-best-practices">GraphQL enum types</a>, we follow some conventions to make the migration process for our users easier. These conventions aim to facilitate development and interoperability.</p>
<p id="2c5f"><strong>Conventions</strong></p>
<ul class="">
<li>The names of various components will obey the rules specified in the spec.</li>
<li>Object/Input and Enumeration type names will be&nbsp;<code>pascal</code>&nbsp;cased.</li>
<li>All field names will be&nbsp;<code>camel</code>&nbsp;cased.</li>
<li>Enumeration field names will be&nbsp;<code>upper</code>&nbsp;cased to represent their nature as constants.</li>
<li>HTTP verb will be prepended with query/mutation names to represent the action that will be performed upon calling it.</li>
</ul>
<h2 id="2593">For SOAP Users — Migrating to GraphQL</h2>
<p id="04e6" class="">With&nbsp; API Transformer, SOAP users can start migrating to GraphQL by obtaining a GraphQL schema file from their service WSDL file. This involves a conversion of all WSDL types to GraphQL schema types, operations to mutations and attributes to arguments. The example below illustrates this:</p>
<p id="7774" class="">WSDL example:</p>
<pre class=""><code class="language-xml">&lt;definitions name=&quot;HelloService&quot; targetNamespace=&quot;http://www.examples.com/wsdl/HelloService.wsdl&quot; xmlns=&quot;http://schemas.xmlsoap.org/wsdl/&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; xmlns:tns=&quot;http://www.examples.com/wsdl/HelloService.wsdl&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:s=&quot;http://www.examples.com/schema1&quot;&gt;
  &lt;types&gt;
      &lt;schema xmlns=&quot;http://www.w3.org/2001/XMLSchema&quot; targetNamespace=&quot;http://www.examples.com/schema1&quot; elementFormDefault=&quot;qualified&quot;&gt;
        &lt;element name=&quot;GreetingMessage&quot;&gt;
            &lt;complexType&gt;
                &lt;sequence&gt;
                    &lt;element name=&quot;senderName&quot; type=&quot;xsd:string&quot;/&gt;
                    &lt;element name=&quot;greeting&quot; type=&quot;xsd:string&quot;/&gt;
                &lt;/sequence&gt;                
            &lt;/complexType&gt;
        &lt;/element&gt;
      &lt;/schema&gt;
  &lt;/types&gt;
  &lt;message name=&quot;SendMessageRequest&quot;&gt;
      &lt;part name=&quot;message&quot; type=&quot;s:GreetingMessage&quot;/&gt;
  &lt;/message&gt;
  &lt;message name=&quot;SendMessageResponse&quot;&gt;
      &lt;part name=&quot;message&quot; type=&quot;s:GreetingMessage&quot;/&gt;
  &lt;/message&gt;
  &lt;portType name=&quot;Hello_PortType&quot;&gt;
      &lt;operation name=&quot;sendMessage&quot;&gt;
         &lt;input message=&quot;tns:SendMessageRequest&quot;/&gt;
         &lt;output message=&quot;tns:SendMessageResponse&quot;/&gt;
      &lt;/operation&gt;
  &lt;/portType&gt;
  &lt;binding name=&quot;Hello_Binding&quot; type=&quot;tns:Hello_PortType&quot;&gt;
      &lt;soap:binding style=&quot;rpc&quot;
         transport=&quot;http://schemas.xmlsoap.org/soap/http&quot;/&gt;
      &lt;operation name=&quot;sendMessage&quot;&gt;
         &lt;soap:operation soapAction=&quot;sendMessage&quot;/&gt;
         &lt;input&gt;
            &lt;soap:body encodingStyle=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;
               namespace=&quot;urn:examples:helloservice&quot;
               use=&quot;encoded&quot;/&gt;
         &lt;/input&gt;    
         &lt;output&gt;
            &lt;soap:body encodingStyle=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;
               namespace=&quot;urn:examples:helloservice&quot;
               use=&quot;encoded&quot;/&gt;
         &lt;/output&gt;
      &lt;/operation&gt;
   &lt;/binding&gt;
   &lt;service name=&quot;Hello_Service&quot;&gt;
      &lt;documentation&gt;WSDL File for HelloService&lt;/documentation&gt;
      &lt;port binding=&quot;tns:Hello_Binding&quot; name=&quot;Hello_Port&quot;&gt;
         &lt;soap:address location=&quot;http://www.examples.com/SayHello/&quot; /&gt;
      &lt;/port&gt;
   &lt;/service&gt;   
&lt;/definitions&gt;</code></pre>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:table -->
<figure class="wp-block-table"></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row" style="padding-top: 0px;">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="d1fc" class="">GraphQL schema obtained by converting above WSDL file using&nbsp; API Transformer:</p>
<pre class=""><code class="language-cs"># API Name: &quot;HelloService&quot;
# Host: http://www.examples.com/SayHello/
# WSDL File for HelloService

type GreetingMessage {
    senderName: String!
    greeting: String!
}

type SendMessageRequest {
    greetingMessage: GreetingMessage!
}

type SendMessageResponse {
    greetingMessage: GreetingMessage!
}

input GreetingMessageInput {
    senderName: String!
    greeting: String!
}

input SendMessageRequestInput {
    greetingMessage: GreetingMessageInput!
}

input CreateSendmessageInput {
    body: SendMessageRequestInput!
}

type Query {
    _: Boolean
}

type Mutation {
    createSendmessage(input: CreateSendmessageInput!): SendMessageResponse!
}

schema {
    mutation: Mutation
    query: Query
}</code></pre>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"></figure>
<!-- /wp:table -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="8674">For REST Users — Layering GraphQL on top</h2>
<p id="91f0" class="">Instead of completely migrating to GraphQL, users generally prefer to add a GraphQL layer on top of REST and enjoy benefits of both. The choice is yours depending on your service and system needs.</p>
<p id="841a" class="">You can convert your RESTful API defined in one of the popular formats like OpenAPI/Swagger, RAML, etc. to GraphQL schema with&nbsp; API Transformer. The conversion process will:</p>
<ul class="">
<li>Convert GET operations to GraphQL queries while other operations involving server-side changes to GraphQL mutations.</li>
<li>Convert complex types in the API to GraphQL object and enumeration types.</li>
<li>Wrap operation parameters in a GraphQL input type and link that input type to respective query/mutation arguments.</li>
</ul>
<p id="fce7">The example below shows the conversion:</p>
<p id="1f1d" class="">OpenAPI 3.0 example:</p>
<pre class=""><code class="language-yaml">openapi: 3.0.0
info:
  title: Calculator
  description: Simple Calculator API
  version: &#039;1.0&#039;
servers:
- url: https://examples.devapi.dream.press/apps/calculator  
paths:
  /{operation}:
    get:
      description: Calculates the expression based on the x and y operator
      operationId: Calculate
      parameters:
      - name: operation
        in: path
        required: true
        schema:
          $ref: &#039;#/components/schemas/OperationType&#039;
      - name: x
        in: query
        required: true
        schema:
          type: number
          format: double
      - name: y
        in: query
        required: true
        schema:
          type: number
          format: double
      responses:
        200:
          description: &#039;Returns the result of operation&#039;
          content:
            text/plain:
              schema:
                type: number
                format: double      
components:
  schemas:
    OperationType:
      enum:
      - SUM
      - SUBTRACT
      - MULTIPLY
      - DIVIDE
      type: string
      description: Possible operations are sum, subtract, multiply, divide</code></pre>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:table -->
<figure class="wp-block-table"></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="2920" class="">GraphQL schema obtained by converting above OpenAPI 3.0 file using&nbsp; API Transformer:</p>
<pre class=""><code class="language-cs"># API Name: &quot;Calculator&quot;
# Host: https://examples.devapi.dream.press/apps/calculator
# Simple Calculator API

&quot;Possible operations are sum, subtract, multiply, divide&quot;
enum OperationType {
    DIVIDE
    MULTIPLY
    SUBTRACT
    SUM
}

input GetCalculateInput {
    operation: OperationType!
    x: Float!
    y: Float!
}

type Query {
    &quot;Calculates the expression based on the x and y operator&quot;
    getCalculate(input: GetCalculateInput!): Float!
}

type Mutation {
    _: Boolean
}

schema {
    mutation: Mutation
    query: Query
}</code></pre>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"></figure>
<!-- /wp:table -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="5c1b">Conclusion</h2>
<p id="0841" class="">We hope you found our migration guide to GraphQL useful. If you have any feedback for our GraphQL schema export feature, feel free to reach out.</p>
<p id="28a8" class="">Continue reading more API Transformer Recipes:</p>
<ul class="">
<li><a href="https://apimatic.io/blog/2018/11/api-transformer-recipes-enabling-postmans-team-sharing-features-for-openapi-users" target="_blank" rel="noreferrer noopener">Enabling Postman’s Team Sharing Features for OpenAPI Users</a></li>
<li><a href="https://apimatic.io/blog/2018/12/api-transformer-recipes-facilitating-migration-from-soap-to-rest" target="_blank" rel="noreferrer noopener">Facilitating Migration from SOAP to REST</a></li>
<li><a href="https://apimatic.io/blog/2019/01/api-transformer-recipes-opening-ways-into-ibm-api-connect" target="_blank" rel="noreferrer noopener">Opening ways into IBM API Connect</a></li>
<li><a href="https://apimatic.io/blog/2020/06/the-whys-and-hows-of-exposing-a-soap-service-using-your-rest-api">The Whys and Hows of Exposing a SOAP Service Using Your REST API</a></li>
</ul>
<p class="">Thanks to&amp;nbsp;Adeel Ali.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/moving-to-graphql-from-soap-or-rest/">Moving to GraphQL from SOAP or REST</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>API Transformer Insights 2018</title>
		<link>/blog/api-transformer-insights-2018/</link>
		
		<dc:creator><![CDATA[Faria Rehman]]></dc:creator>
		<pubDate>Fri, 05 Apr 2019 10:53:46 +0000</pubDate>
				<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[REST APIs]]></category>
		<category><![CDATA[2018]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[Trends]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=669</guid>

					<description><![CDATA[<p>Time sure flies and here we are — once again ready to analyze&#160;API Transformer&#160;over the course of one more year. We did a similar analysis back in 2017 as well. If you are interested, do check it out&#160;here. Interestingly, API Transformer’s usage appears to be doubling every year as can be seen from the figure [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/api-transformer-insights-2018/">API Transformer Insights 2018</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="669" class="elementor elementor-669">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-4f6c7104 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="4f6c7104" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-6bc3f95e" data-id="6bc3f95e" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-52e7b5e8 elementor-widget elementor-widget-text-editor" data-id="52e7b5e8" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-670 aligncenter" src="/wp-content/uploads/2021/12/1_-QjVR5w3yJnZrRwvS2QHzg-1024x469.png" alt="API Transformer Insights 2018" width="1024" height="469"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row" style="padding-bottom: 0px;">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">Time sure flies and here we are — once again ready to analyze&nbsp;<a href="https://www.apimatic.io/transformer">API Transformer</a>&nbsp;over the course of one more year. We did a similar analysis back in 2017 as well. If you are interested, do check it out&nbsp;<a href="https://apimatic.io/blog/2018/04/a-year-with-api-transformer">here</a>.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-671 aligncenter" src="/wp-content/uploads/2021/12/1_bnA_aAeKqhAC1lSj6RRwvg.png" alt=""></p>
<figcaption><em>API Transformer conversions over the past 3 years</em></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="1f91">Interestingly, API Transformer’s usage appears to be doubling every year as can be seen from the figure above. 2018 has seen an all-time high — 217,388 transformations in total.</p>
<p id="0d35" class="">So why are so many people using&nbsp; API Transformer? What in fact is&nbsp; API Transformer?</p>
<p id="66d8" class="">Today, with an ever increasing number of APIs, more and more developers are recognizing the need to have machine-readable descriptions alongside these APIs. Some of these descriptions are maintained and exposed by the API providers themselves while others are created and maintained by third-party contributors. Format preferences tends to vary due to which a major issue with these descriptions is their heterogeneity. Given that each format has limitations of its own and a different set of tools and frameworks associated with it, anybody looking to utilize a description to its maximum capacity will feel the need to transform between available formats based on their requirements. This is where <strong>API Transformer</strong> comes in. It breaks all format barriers by enabling users to convert an API description easily into any format of their choice. It supports all popular formats e.g. OpenAPI (previously known as Swagger), RAML, API Blueprint, WSDL etc. which is what makes it an ideal tool for many.</p>
<h2 id="e028"><strong>What was new in 2018?</strong></h2>
<p id="00d8" class="">As promised at the end of 2017, we finally&nbsp;<a href="https://docs.apimatic.io/changelog/announcing-support-for-insomnia-export-format/">introduced support for Insomnia</a>&nbsp;in December, 2018.</p>
<p id="cbc3" class="">In addition to this, <a href="https://docs.apimatic.io/changelog/long-awaited-major-transformer-improvements/">many improvements were added to API Transformer</a>&nbsp;with focus on three key aspects: stability, consistency and accuracy.</p>
<h2 id="7bc6"><strong>Total vs Unique</strong></h2>
<p id="fe81">For each aspect of API Transformer that we analyze below, calculations are performed over two kinds of data which are:</p>
<p id="6c85"><strong>Total &#8211;</strong>&nbsp;This data takes into account all events that occurred irrespective of the users performing these events.</p>
<p id="028d" class=""><strong>Unique &#8211;</strong>&nbsp;This data only considers unique events per user. This helps eliminate the skewness that arises in the previous case because of users who performed thousands of conversions every month.</p>
<h2 id="3d62"><strong>Which formats developers brought most as input?</strong></h2>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-672 aligncenter" src="/wp-content/uploads/2021/12/1_5Ueg0Ii4RZuXXdi6w_Z2jg-1024x492.png" alt=""></p>
<figcaption><em>Total vs Unique Analysis of Most Common Formats Imported</em></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3><strong>Total</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-673" src="/wp-content/uploads/2021/12/1_ZWZnG-k1GeN-BO4HG4BWFA.png" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph -->
<p class="">Out of the total imported files on Transformer (approximately 217,388), 55% were Postman files (versions 1.0, 2.0 and 2.1) while 35% were OpenAPI files (versions 1.x, 2.0 and 3.0). The rest fell under much smaller chunks. Unlike 2017, it can be seen that OpenAPI v.3.0 usage finally rose above v.2.0: 56% of the OpenAPI transformations belonged to v.3.0, 33% to v.2.0 and 11% to v.1.x.</p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3><strong>Unique</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-674" src="/wp-content/uploads/2021/12/1_jPKfFx0zj19XLt1vIG_JUw.png" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph -->
<p id="c523" class="">The second graph considers only unique formats per user e.g. if a user converted 50 Postman and 10 OpenAPI files, he converted two unique format files (one Postman and one OpenAPI).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="6d55" class="">The unique data shows that 38% of the imported files were OpenAPI files (all versions included) while 31% of the imported files were Postman files (all versions included). Around 9% of the users brought in WSDL files.</p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="fc00"><strong>Overall</strong></h3>
<p id="2869" class="">As can be seen from above, much like 2017, the two formats that stood out as the most imported formats on API Transformer in 2018 were still&nbsp;<strong>OpenAPI</strong>&nbsp;and&nbsp;<strong>Postman</strong>.</p>
<strong>Which formats developers most converted to?</strong></div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-675 aligncenter" src="/wp-content/uploads/2021/12/1_im1ngI_IhCmlPmLv9wzzog.png" alt=""></p>
<figcaption><em>Total vs Unique Anaylsis of Most Common Formats Exported</em></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3><strong>Total</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-676" src="/wp-content/uploads/2021/12/1_3LZR__Z-XObf7mUJv9A1ww.png" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph -->
<p>43% of the conversions were to OpenAPI (versions 1.2, 2.0, 3.0). API Blueprint and Postman (versions 1.0, 2.0) were the next two major exported formats. They both appeared to be in a neck to neck race each sharing 25% of the complete chunk.</p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3><strong>Unique</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-677" src="/wp-content/uploads/2021/12/1_47E-GMFbXiPuYkgK5w7ETw.png" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph -->
<p id="c746">Eliminating multiple exports to the same format per user, we observed that 72% of the files were exported to OpenAPI (versions 1.2, 2.0, 3.0). 77% of this OpenAPI chunk consisted of v.2.0 files. This shows that although v.3.0 was a popular input format, much of the developers used API Transformer to export v.2.0 files instead of v.3.0.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="3aba">Apart from OpenAPI, 8% files were exported to RAML (versions 0.8, 1.0) and 7% to Postman (versions 1.0, 2.0).</p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="5b90"><strong>Overall</strong></h3>
<p id="c393" class="">Like 2017,&nbsp;<strong>OpenAPI v.2.0</strong>&nbsp;was again found to be the most popular exported format in 2018. This comes as no suprise since it is the most stable version of OpenAPI, being used for many years now. It boasts strong community support and a wide range of tools and frameworks. The adoption rate for its latest version v.3.0 is still relatively slower. However, it can be expected to rise with the passing time as more and more tools start supporting it.</p>
<p id="8e01"><strong>Postman v.2.0</strong>&nbsp;was another major exported format which is largely popular with users aiming to test or document their APIs. Very few users prefer to export to WADL or WSDL because of limited usage and tooling.</p>
<h2 id="6fbd" class=""><strong>What were the top 10 conversions?</strong></h2>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-678 aligncenter" src="/wp-content/uploads/2021/12/1_hGfH3Ac2UQ2vjnXXBWmjzw-1024x437.png" alt=""></p>
<figcaption>Total vs Unique Analysis of Top Ten Format Conversions</figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="b00a" class="">Here we analyze the import-export relationship in conversions and identify the top ten pairs for each kind of data.</p>
<h3 id="d400" class=""><strong>Total</strong></h3>
<p id="c73a">For the total conversions performed, the most common conversion seen was from&nbsp;<strong><em>Postman v.1.0 to API Blueprint</em></strong>&nbsp;(approx 51,526 conversions).</p>
<h3 id="111a"><strong>Unique</strong></h3>
<p id="808d">By eliminating non-unique mappings per user, import from&nbsp;<strong><em>Postman 2.X to OpenAPI 2.0</em></strong>&nbsp;was found to be the most common (approx 3,751 conversions).</p>
<h3 id="5cca"><strong>Overall</strong></h3>
<p id="fac5">Based on above data it can be seen that, much like 2017, developers still preferred Transformer for converting&nbsp;<strong>from Postman to other API description formats</strong>.</p>
<h2 id="afc5"><strong>Where were the developers performing conversions geographically based?</strong></h2>
<p id="7e66">In this section, we aim to analyze the geographical usage of API Transformer.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-679" src="/wp-content/uploads/2021/12/1_lG74YLk8JylPB3JlVLMwYw-1024x474.png" alt=""></p>
<figcaption><em>Total vs Unique Analysis of Geographical Usage of Formats</em></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="ad28"><strong>Total</strong></h3>
<p id="85e6">A large number of conversions were performed from India (36%), US (28%) and UK (5%) while the rest of the conversions were distributed across other parts of the world.</p>
<h3 id="802c"><strong>Unique</strong></h3>
<p id="6969">Ignoring multiple conversions from the same location per user, the results we got showed that 22% of the conversions were performed from US, 11% from India while 6% were from UK.</p>
<h3 id="d0e7"><strong>Overall</strong></h3>
<p id="6591">As can be clearly seen, majority of our users using Transformer in 2018 were based in&nbsp;<strong>US, India and UK.&nbsp;</strong>Note that for these graphs we eliminated data of conversions in which the locations were unknown.</p>
<h2 id="c109" class=""><strong>Which formats failed to transform most (and why)?</strong></h2>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-680 aligncenter" src="/wp-content/uploads/2021/12/1_nhiPX8M-pswsB3RY44MTSg-1024x444.png" alt=""></p>
<figcaption><em>Total vs Unique Analysis of Most Common Format Failures</em></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="e1e9" class="">With the increasing number of transformations, a rise in the number of failed transformations was also seen (approx. 41,569 which is roughly 19% of the total conversions performed).</p>
<h3 id="c862"><strong>Total</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-681" src="/wp-content/uploads/2021/12/1_DYsVs0uEXAanztwABMwR3g.png" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph -->
<p class="">56% of the total failed transformations involved OpenAPI files (versions 1.x, 2.0, 3.0) as input while 34% of the failures occurred when users tried converting invalid/unsupported files.</p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="4ea5" class=""><strong>Unique</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-682" src="/wp-content/uploads/2021/12/1_IH9YotSH65XF-HqGyYxidg.png" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph -->
<p class="">After removing redundant format failures per user, 49% of the total failed transformations were found to be from invalid/unsupported files while only 27% were due to OpenAPI files (versions 1.x, 2.0, 3.0). 13% were attributed to RAML files (versions 0.8, 1.0).</p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="7d13"><strong>Overall</strong></h3>
<p id="7366">As you can see, a large portion of failures constituted of the&nbsp;<strong>invalid/unsupported files</strong>. Following are the kinds of files that fall under this category:</p>
<ol class="">
<li>Not valid API description files e.g. HTML files, JSON response data, XML schema files, etc.</li>
<li>Files that lacked necessary metadata, thus, preventing identification at the time of conversion e.g. API Blueprint files without “Format” and “Host” information.</li>
<li>Format files that contained some critical errors/ human mistakes preventing them from being identified properly e.g. invalid JSON, incomplete file, etc.</li>
</ol>
<p id="43bf" class="">The rest of the failed conversions mainly consisted of&nbsp;<strong>RAML or OpenAPI</strong>&nbsp;files. These transformations failed largely due to errors/human mistakes while a small portion of them failed due to bugs in our tool which were later fixed.</p>
<p id="efe3" class="">In 2018, we analyzed, in the form of a blog series, the common mistakes developers made resulting in failed transformations. If you are interested to learn more, please head over to the following:</p>
<ol class="">
<li><a href="https://apimatic.io/blog/2018/09/common-mistakes-developers-make-in-their-api-blueprint-files">Common Mistakes Developers Make in Their API Blueprint Files</a></li>
<li><a href="https://apimatic.io/blog/2018/04/common-mistakes-developers-make-in-their-raml-files">Common Mistakes Developers Make in Their RAML Files</a></li>
<li><a href="https://apimatic.io/blog/2018/03/common-mistakes-developers-make-in-their-openapi-3-files">Common Mistakes Developers Make in Their OpenAPI 3 Files</a></li>
</ol>
<h2 id="7198" class=""><strong>Did developers prefer to transform via the website or via our API?</strong></h2>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:heading /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-683" src="/wp-content/uploads/2021/12/1_abnhHqigDqnDnUI07snfDQ-1024x408.png" alt=""></p>
<figcaption><em>Total vs Unique Comparison of Transformer Web and API Conversions</em></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="b449" class="">&nbsp;API Transformer&nbsp; not only provides a web UI to users for performing conversions but also facilitates them by providing a simple <a href="https://www.apimatic.io/apidocs/apimatic">Transformation API</a>&nbsp;that offers the same functionality as the UI.</p>
<h3 id="b1d4" class=""><strong>Total</strong></h3>
<p id="f312" class="">In 2018, 80% of the total conversions were performed by users over the API while only 20% were performed via the web UI. The data here is skewed largely due to several of our users performing thousands of conversions via the API every month. This skewness is ignored in the second data discussed below.</p>
<h3 id="e66a"><strong>Unique</strong></h3>
<p id="9f3c">In contrast to what the results from the Total data shows, if we consider unique conversions per user, 95% of the conversions were performed via web while only 5% were performed via the API.</p>
<h3 id="5284"><strong>Overall</strong></h3>
<p id="2f49">Ignoring the skewness, it can be safely concluded that&nbsp;<strong>majority of the conversions were performed using the web UI.</strong></p>
<h2 id="18cd"><strong>What trends could be seen in terms of size of APIs?</strong></h2>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-684 aligncenter" src="/wp-content/uploads/2021/12/1_YHagzghl3fcmBJtTquZlBw.png" alt=""></p>
<figcaption><em>Analysis of Size of API for Total Conversions</em></figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="a7f8" class="">For measuring the size of an API, we considered the number of endpoints in an API. 97% of the APIs involved in the conversions had less than 100 endpoints while 3% of the APIs had endpoints ranging between 100 and 500. The remaining small portion of APIs had endpoints greater than 500. It can be concluded that, with a few exceptions,&nbsp;<strong>APIs with less than 100 endpoints are the most common.</strong></p>
<h2 id="3294" class=""><strong>Conclusion</strong></h2>
<p id="7ab6" class="">2018 undoubtedly turned out be quite an important year for API Transformer both in terms of its growth and stability. We hope to make API Transformer even better and stronger in the days to come. You can also play a big role in that! If you have any feedback or ideas that you want to share with us or have any queries, please don’t hesitate to reach out to <a href="mailto:support@apimatic.io">support@apimatic.io</a>.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/api-transformer-insights-2018/">API Transformer Insights 2018</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
