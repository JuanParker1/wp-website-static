
<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Sdk Generation Archives - APIMatic</title>
	<atom:link href="/blog/tag/sdk-generation/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>APIMatic is an API documentation tool that provides a complete set of DX components such as autogenerated SDKs, API portal, API docs, live code samples, and more.</description>
	<lastBuildDate>Mon, 11 Apr 2022 05:37:12 +0000</lastBuildDate>
	<language>en</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.9.3</generator>

<image>
	<url>/wp-content/uploads/2021/10/cropped-cropped-apimaticio-favicon-1-32x32.png</url>
	<title>Sdk Generation Archives - APIMatic</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Testing Auto-Generated SDKs — Problems, Techniques and Goals</title>
		<link>/blog/testing-auto-generated-sdks-problems-techniques-and-goals/</link>
					<comments>/blog/testing-auto-generated-sdks-problems-techniques-and-goals/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Thu, 27 Jul 2017 11:02:53 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Jenkins]]></category>
		<category><![CDATA[Sdk]]></category>
		<category><![CDATA[Sdk Generation]]></category>
		<category><![CDATA[Testing]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=532</guid>

					<description><![CDATA[<p>Ensuring the quality of automatically generated code has always been a tough nut to crack at APIMatic. Code generation engines dynamically generate code; a section of code that appears in a generated SDK might be different or even non-existent in other SDKs. How, then, can the correctness of generated code be ensured when its form [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/testing-auto-generated-sdks-problems-techniques-and-goals/">Testing Auto-Generated SDKs — Problems, Techniques and Goals</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="532" class="elementor elementor-532">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-49564178 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="49564178" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-37bf436c" data-id="37bf436c" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-37fd1f69 elementor-widget elementor-widget-text-editor" data-id="37fd1f69" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
			<style>/*! elementor - v3.6.4 - 13-04-2022 */
.elementor-widget-text-editor.elementor-drop-cap-view-stacked .elementor-drop-cap{background-color:#818a91;color:#fff}.elementor-widget-text-editor.elementor-drop-cap-view-framed .elementor-drop-cap{color:#818a91;border:3px solid;background-color:transparent}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap{margin-top:8px}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap-letter{width:1em;height:1em}.elementor-widget-text-editor .elementor-drop-cap{float:left;text-align:center;line-height:1;font-size:50px}.elementor-widget-text-editor .elementor-drop-cap-letter{display:inline-block}</style>				<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter wp-image-533" src="/wp-content/uploads/2021/12/1_u63JGTl-GhgdpBOH9Ns1YQ.jpg" alt="Testing Auto-Generated SDKs — Problems Techniques &amp; Goals by APIMatic" width="1000" height="400"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="4fef" class="">Ensuring the quality of automatically generated code has always been a tough nut to crack at APIMatic. Code generation engines dynamically generate code; a section of code that appears in a generated SDK might be different or even non-existent in other SDKs. How, then, can the correctness of generated code be ensured when its form is determined by limitless combinations of endpoint configurations, model structures, and code generation settings? In this article, we will share with you our humble beginnings in the world of generated code testing, our current state of affairs, and our future goals and aspirations.</p>
<blockquote class="wp-block-quote">
<p><em>The only way to make sure that the generated code works exactly as expected is to write unit tests for it.</em></p>
</blockquote>
<p id="f39a" class="">To ensure that a code generation engine is working correctly, it is not enough to only test the code which generates code. Individual components of the engine might be generating pieces of code correctly but it is necessary to test that these pieces of generated code fit together perfectly and work as expected in the form of an SDK. Independent testing of the generated SDK is therefore also required to guarantee quality. But how does one go about doing that? You can compile the generated SDK and the compiler will catch syntax errors for you. But what do you do about logic errors? And how do you test SDKs of interpreted programming languages which necessitate running the code to check for simple syntax errors?</p>
<h2 id="7e65" class="">The Past — Manual Testing</h2>
<p id="a85e" class="">The only way to make sure that the generated code works exactly as expected is to write unit tests for it and that is how our initial testing efforts began. We created a comprehensive API description covering the most commonly expected endpoint configurations, model structures, and code generation settings.</p>
<p id="678b" class="">A test API, aptly named Tester API, was created against this API description, SDKs were generated and developers manually wrote unit tests to test these SDKs. Whenever changes were made to the code generation engine to add new features or fix bugs, developers regenerated SDKs for the Tester API and ran the unit tests they had previously written.</p>
<p id="8e88" class="">These unit tests had to be updated whenever the Tester API was improved or added to. When additional test APIs were created to test varying code generation settings or features like API authentication, it started becoming increasingly tedious for developers to maintain unit tests for all of them and manually run them after every small change in the engine. Due to these obvious limitations and scalability issues, this manual approach was quickly discarded in favor of a more automated one.</p>
<blockquote class="wp-block-quote">
<p><em>We design unit tests for our APIs once and leave it up to our code generation engine to generate language specific unit tests.</em></p>
</blockquote>
<h2 id="0f99" class="">The Present — Jenkins CI and Automatically Generated Unit Tests</h2>
<p id="c5e9" class="">We had been working on adding functionality in our code generation engine to generate unit tests with our SDKs when we realized that it was the perfect opportunity to simultaneously set up a testing server in-house. Given our need to test SDKs of multiple APIs in ten different languages, we required flexibility and power and therefore opted for an on-premise Jenkins installation.</p>
<p id="562b" class="">Gone are the days of manually writing and maintaining unit tests for our&nbsp;<em>SDKs</em>; we design unit tests for our&nbsp;<em>APIs</em> once and leave it up to our code generation engine to generate language-specific unit tests. Whenever a developer makes a commit to our code generation engine, our Jenkins server pulls the code from the online repository, compiles the project, runs internal unit tests, generates SDKs of all our supported platforms for all our test APIs, and then runs the unit tests for all these SDKs. The whole automated process, involving testing SDKs of about a dozen APIs, takes about thirty minutes and if all tests pass, the developer is allowed to release his changes.</p>
<p id="ca9a" class="">There are limitations with this approach as well. Even though our code generation engine generates unit tests for us and our Jenkins server runs them, we still have to&nbsp;<em>design</em>&nbsp;these unit tests and add them to the API descriptions ourselves. We also have to manually update the corresponding test APIs when the API descriptions are improved or added to. Furthermore, although we now have a very wide testing coverage for our generated code, we cannot yet guarantee that all corner cases are covered; ideally, every SDK generated by our code generation engine should be automatically tested before reaching the hands of our clients.</p>
<blockquote class="wp-block-quote">
<p><em>Any SDK delivered in the hands of our customers will be guaranteed to work correctly.</em></p>
</blockquote>
<h2 id="7b33" class="">The Future — Mock APIs and Automatically Designed Unit Tests</h2>
<p id="1f24" class="">Planning the future of SDK testing at APIMatic has got us all very excited and we have some very cool ideas which we would like to implement as soon as possible. We are aiming to introduce a testing framework that will enable us to achieve 100% test coverage for each and every SDK generated by our code generation engine. Any SDK delivered in the hands of our customers will be guaranteed to work correctly.</p>
<p id="7173" class="">This can be achieved by leveraging the power of our code generation engine to create mock APIs which can serve randomly generated static data. To create a mock API, all one needs to know is the structure of the data and the methods of receiving and serving it. This information is completely and very conveniently captured by API descriptions. Once we automatically start creating mock APIs, our code generation engine will be able to not only&nbsp;<em>generate</em> SDK-specific unit tests but also&nbsp;<em>design</em>&nbsp;these unit tests based on the mock API it has created.</p>
<p id="31ea" class="">We expect that this framework, once implemented, will allow us to actively monitor for faulty SDK generations from our service. We will be able to squash out bugs very quickly without having to wait for bug reports and this shall eventually enable us to deliver SDKs of unprecedented quality to our customers.</p>
<p id="8c2c" class="">We always welcome feedback, comments, and suggestions from our customers. Please <a href="mailto:sales@apimatic.io">reach out</a> if you have any questions or would like to discuss better ways to ensure the quality of our generated code!</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/testing-auto-generated-sdks-problems-techniques-and-goals/">Testing Auto-Generated SDKs — Problems, Techniques and Goals</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/testing-auto-generated-sdks-problems-techniques-and-goals/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Improved SDKs with Timeouts, Multiple Base URI Support and Custom Exception Classes</title>
		<link>/blog/improved-sdks-with-timeouts-multiple-base-uri-support-and-custom-exception-classes/</link>
					<comments>/blog/improved-sdks-with-timeouts-multiple-base-uri-support-and-custom-exception-classes/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Sat, 04 Mar 2017 08:21:59 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Apimatic Features]]></category>
		<category><![CDATA[Custom Exception Classes]]></category>
		<category><![CDATA[Multiple Base Uri Support]]></category>
		<category><![CDATA[Sdk Generation]]></category>
		<category><![CDATA[Sdk Timeouts]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=510</guid>

					<description><![CDATA[<p>We never stop thinking of ways to make our SDKs better and easier to use. Due to this constant struggle for self-improvement, you see new features being added every now and then. I will be talking about three of those in this blog: ★ Timeouts ★ Multiple Base URI Support ★ Custom Exception Classes Timeouts [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/improved-sdks-with-timeouts-multiple-base-uri-support-and-custom-exception-classes/">Improved SDKs with Timeouts, Multiple Base URI Support and Custom Exception Classes</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="510" class="elementor elementor-510">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-1536fc96 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="1536fc96" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-65577685" data-id="65577685" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-7244815d elementor-widget elementor-widget-text-editor" data-id="7244815d" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="064d" class="">We never stop thinking of ways to make our SDKs better and easier to use. Due to this constant struggle for self-improvement, you see new features being added every now and then. I will be talking about three of those in this blog:</p>
<p id="93d9">★ Timeouts</p>
<p id="15ee" class="">★ Multiple Base URI Support</p>
<p id="ce0e" class="">★ Custom Exception Classes</p>
<h2 id="08bc" class="">Timeouts</h2>
<p id="9bc7">Timeout and retries are widely talked about terms in networking. And are important to consider when building reliable and consistent applications that require network calls. Some of the leading names in the IT industry (example: Google, Facebook, Amazon, Dropbox) provide timeout and retry features built-in with their SDKs.</p>
<p id="e3e4" class="">But why do we need timeout and retry? Let’s take a simple example. Let’s say you are a developer working on an application which makes an HTTP call to a server and waits for it to send you back some information. You then display this information to the user. Now you’ve written and tested all the code and everything is working perfectly. But after an hour, you try showing the application to your friend and it just breaks. Upon investigation, you find out that the server which you were contacting for data is not performing well. It is receiving a lot of client requests and is not able to reply back very quickly.</p>
<p class="">This is where retry and timeouts come in. You can use retry mechanism to keep pinging the server to check if it’s free to send back the response. If not, you’ll wait and then send the request again. You will specify a timeout value after which the retries will come to a halt. Suppose you specify a timeout value of 10 seconds. If the server doesn’t respond after 10 seconds, you will stop retrying and show the user a message that the server is busy. This is important because this improves user experience. Network latency drops all the time. Timeouts and retries make the application more robust and reliable.</p>
<p id="acce" class="">APIMatic provides SDKs with timeouts and retry behavior by default. The timeout values can be changed as required by the user. Tests generated with the SDKs can also be configured with timeouts. Timeout values can be changed in APIMatic API Editor, within CodeGen Settings and TestGen Settings (for tests) page.</p>
<h2 id="52a7" class="">Multiple Base URI Support</h2>
<p id="fd6e" class="">This is one of the most recent features that has been added to our new and improved SDKs. Within our SDKs, a base URI is provided by the user which specifies which URI will be used to make HTTP calls to.</p>
<p id="7fc2" class="">However, in the present day, developers use multiple environments to separate out different parts of their project. For example, the tested and running code will be pushed to Production. There could be another environment where all tests are run. Likewise, there could be another environment in which a developer might be adding new features to the code. The environments need to be separated out to make sure nothing breaks. Therefore, we have added Multiple Base URI support with our SDKs to allow developers to use the SDKs with their already configured environments, without any hassle. They can easily specify which environment they want to use and within that environment, which server has to be used for making HTTP calls to.</p>
<p id="4c11">The figures below show how different environments and corresponding servers can be set up inside the API Editor.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-511 aligncenter" src="/wp-content/uploads/2021/12/0_CRkNvU3v1cqCKHZq.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-512 aligncenter" src="/wp-content/uploads/2021/12/0_dLFwvNCMOrI6dZLJ.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="f2df" class="">Custom Exception Classes</h2>
<p id="f8b6" class="">Many times, during development, programmers encounter situations in which the built-in exception classes are not good enough for displaying the error message that they require. In such cases, they sometimes add useful methods to already built-in exception classes that provide more information about the exception that occurred.</p>
<p id="938f" class="">Custom Exceptions can be defined in APIMatic’s API Editor. They are automatically included in the SDK when it is generated. Custom Exceptions are referred to as API Errors in the Editor. It allows specifying custom description of errors corresponding to HTTP response codes within the range of 300–599. Global API errors are applied across all endpoints within the generated SDK.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-513 aligncenter" src="/wp-content/uploads/2021/12/0__fvYFBn2jGr88gLh.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">This concludes everything that I had to talk about today. If these features got you excited, then keep on the lookout for more announcements about our SDK improvements because we are constantly working to improve developer’s experience and provide value-added features with our automatically generated SDKs. Do sign up for APIMatic’s <a href="https://devapi.dream.press/code-generation-as-a-service">Code Generation as a Service</a>and leave all the SDK hassle to us!</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/improved-sdks-with-timeouts-multiple-base-uri-support-and-custom-exception-classes/">Improved SDKs with Timeouts, Multiple Base URI Support and Custom Exception Classes</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/improved-sdks-with-timeouts-multiple-base-uri-support-and-custom-exception-classes/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>APIMatic’s Code Generation Speeds Up the NZOR’s Application Development Cycle</title>
		<link>/blog/apimatics-code-generation-speeds-up-the-nzors-application-development-cycle/</link>
					<comments>/blog/apimatics-code-generation-speeds-up-the-nzors-application-development-cycle/#respond</comments>
		
		<dc:creator><![CDATA[Rehan Alam]]></dc:creator>
		<pubDate>Thu, 18 Feb 2016 09:44:27 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Code Generation]]></category>
		<category><![CDATA[Nzor]]></category>
		<category><![CDATA[Sdk Generation]]></category>
		<category><![CDATA[Success Stories]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=491</guid>

					<description><![CDATA[<p>Fundamental identifiers are used by biodiversity identifiers to recognize organism’s names. Necessary information is provided by names though which they index, manage, and share information relating to biodiversity. NZOR is a definitive to source to provide taxonomic data in identical style and of standard level of quality to overcome the wastage issue of resources. &#160; [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/apimatics-code-generation-speeds-up-the-nzors-application-development-cycle/">APIMatic’s Code Generation Speeds Up the NZOR’s Application Development Cycle</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="491" class="elementor elementor-491">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-76affa1c elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="76affa1c" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-5876b833" data-id="5876b833" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-22755160 elementor-widget elementor-widget-text-editor" data-id="22755160" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">Fundamental identifiers are used by biodiversity identifiers to recognize organism’s names. Necessary information is provided by names though which they index, manage, and share information relating to biodiversity. NZOR is a definitive to source to provide taxonomic data in identical style and of standard level of quality to overcome the wastage issue of resources.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->
<p>&nbsp;</p>
<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter wp-image-492" src="/wp-content/uploads/2021/12/1_mbNT6T-SzO-_Ep-kD7KEAw.jpg" alt="NZOR uses APIMatic auto-generated SDKs" width="500" height="191" /></p>
</figure>
<!-- /wp:image -->
<p>&nbsp;</p>
<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="c49e" class="">NZOR Web API</h2>
<p id="5488" class="">The NZOR web application programming interface (API) is a publicly accessible service that enables applications to use data from the core NZOR repository in order to provide the following capabilities:</p>
<ul class="">
<li>List and view details about an organism’s name.</li>
<li>Search organism’s names.</li>
<li>List and view details about information providers.</li>
<li>List and view details about enumerations and the vocabulary used to describe entities within NZOR.</li>
</ul>
<h2 id="1736" class="">Landcare Research and NatureHack 2015</h2>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:heading /-->
<p><img class="wp-image-493 alignright" src="/wp-content/uploads/2021/12/1_GWvdcon8JUKnGFx6XxKo4A.jpg" alt="" /></p>
<!-- /wp:image -->
<p>NZOR’s infrastructure is currently hosted by Landcare Research’s. Their core purpose is to drive innovation in the management of terrestrial biodiversity and land resource. Landcare Research played an important role in organizing a weekend hackathon to create new value from New Zealand’s living species and environment. The goal of Nature Hack was to build a simple web service or app related to nature and/or wildlife.</p>
<!-- /wp:paragraph -->
<h2 id="51ea" class="">SDKs — A Valuable Resource for Nature Hack</h2>
<p id="d121" class="">SDKs for NZOR API were generated using APIMATIC and provided to hackathon participants in all major programming languages including Java, Objective-C, C#, PHP, Python, Ruby and AngularJS. SDK’s are very fruitful for coding rock stars participating in Nature Hack and allow them to build web services and applications related to nature by using environmental data provided by Landcare Research.</p>
<p id="7be1">This is what Greg Byrom, Geospatial Professional at Landcare Research, has to say about us:</p>
<blockquote>
<p>“Landcare Research maintain publicly accessible datasets from their extensive collections of New Zealand’s biological heritage. APIMatic has so simplified the process of writing SDKs to access the data from these collections that we wonder what we ever did before! Having an SDK with which developers can hit the ground running speeds up the application development cycle, saving time and resources for the real work. Making the SDKs publicly available via SDKS.IO allows unprecedented access, unlocking the data and enabling its consumption. APIMatic makes it a breeze to build good SDKs and is simple enough for anyone to use yet complete and flexible enough to support complex queries. I love working with APIMatic!”</p>
</blockquote>
<!-- wp:quote /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/apimatics-code-generation-speeds-up-the-nzors-application-development-cycle/">APIMatic’s Code Generation Speeds Up the NZOR’s Application Development Cycle</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/apimatics-code-generation-speeds-up-the-nzors-application-development-cycle/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Announcing Code Generation API</title>
		<link>/blog/announcing-code-generation-api/</link>
					<comments>/blog/announcing-code-generation-api/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Sun, 21 Jun 2015 11:02:52 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Apimatic Features]]></category>
		<category><![CDATA[Code Generation]]></category>
		<category><![CDATA[Restful Api]]></category>
		<category><![CDATA[Sdk Generation]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=466</guid>

					<description><![CDATA[<p>APIMatic’s automatic code generation is now publicly available for our users. You can check out its API documentation here. The Code Generation API allows you to do interesting stuff with SDK generation for your API. Some of the interesting uses of this API that we could think of are as follows. Provide freshly-squeezed SDKs for [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/announcing-code-generation-api/">Announcing Code Generation API</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="466" class="elementor elementor-466">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-435f7dde elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="435f7dde" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-6fab6970" data-id="6fab6970" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-99424c2 elementor-widget elementor-widget-text-editor" data-id="99424c2" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-467 aligncenter" src="/wp-content/uploads/2021/12/1_1MbRUd5V1fDD3cTFrrvQGg.png" alt="Code Generation API" width="632" height="310"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="7b3f" class="">APIMatic’s automatic code generation is now publicly available for our users. You can check out its <a href="https://docs.apimatic.io/">API documentation here</a>. The Code Generation API allows you to do interesting stuff with SDK generation for your API. Some of the interesting uses of this API that we could think of are as follows.</p>
<ul class="">
<li>Provide freshly-squeezed SDKs for your API on your developer portal</li>
<li>Validate your API backend through its generated description file</li>
<li>Batch script to push your SDKs to GitHub or other code repos</li>
<li>Hook this API in your continuous integration (CI) cycle for automatic code generation</li>
</ul>
<p id="8568" class="">As you might have guessed, this is the same API we use for our SDKs search engine&nbsp;&nbsp;SDKS.IO&nbsp;&nbsp;as well as our Javascript widget. Let us know if you have found any other interesting use case for our API and we will update the list. If you have any suggestion of feature request for this API, we would love to hear from you.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:list /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/announcing-code-generation-api/">Announcing Code Generation API</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/announcing-code-generation-api/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
